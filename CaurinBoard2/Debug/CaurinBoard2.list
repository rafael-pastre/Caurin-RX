
CaurinBoard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007334  08007334  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800733c  0800733c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000070  080073b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080073b4  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e2a  00000000  00000000  0003934d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  0003c178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  0003d868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c62e  00000000  00000000  0003edf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011677  00000000  00000000  0006b41e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d6b4  00000000  00000000  0007ca95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018a149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006468  00000000  00000000  0018a1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072d4 	.word	0x080072d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080072d4 	.word	0x080072d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f001 f960 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f80d 	bl	80004f8 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
		status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 80004ea:	f006 fb2d 	bl	8006b48 <HAL_MspInit>
	}

	/* Return function status */
	return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority  Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

	if (uwTickFreq != 0U) {
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <HAL_InitTick+0x68>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d022      	beq.n	8000552 <HAL_InitTick+0x5a>
		/*Configure the SysTick to have interrupt in 1ms time basis*/
		if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U) {
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_InitTick+0x6c>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_InitTick+0x68>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000518:	fbb1 f3f3 	udiv	r3, r1, r3
 800051c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000520:	4618      	mov	r0, r3
 8000522:	f001 f96e 	bl	8001802 <HAL_SYSTICK_Config>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10f      	bne.n	800054c <HAL_InitTick+0x54>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b0f      	cmp	r3, #15
 8000530:	d809      	bhi.n	8000546 <HAL_InitTick+0x4e>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000532:	2200      	movs	r2, #0
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	f04f 30ff 	mov.w	r0, #4294967295
 800053a:	f001 f938 	bl	80017ae <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_InitTick+0x70>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e007      	b.n	8000556 <HAL_InitTick+0x5e>
			} else {
				status = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e004      	b.n	8000556 <HAL_InitTick+0x5e>
			}
		} else {
			status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e001      	b.n	8000556 <HAL_InitTick+0x5e>
		}
	} else {
		status = HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
	}

	/* Return function status */
	return status;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000004 	.word	0x20000004
 8000564:	20000008 	.word	0x20000008
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_IncTick+0x1c>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4413      	add	r3, r2
 800057a:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x1c>)
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	200003d0 	.word	0x200003d0
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_GetTick>:
 * @brief Provide a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200003d0 	.word	0x200003d0

080005a8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

	/* Add a period to guaranty minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d004      	beq.n	80005cc <HAL_Delay+0x24>
		wait += (uint32_t) (uwTickFreq);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_Delay+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80005cc:	bf00      	nop
 80005ce:	f7ff ffdf 	bl	8000590 <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d8f7      	bhi.n	80005ce <HAL_Delay+0x26>
	}
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	431a      	orrs	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	609a      	str	r2, [r3, #8]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	431a      	orrs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000654:	b490      	push	{r4, r7}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3360      	adds	r3, #96	; 0x60
 8000666:	461a      	mov	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000670:	6822      	ldr	r2, [r4, #0]
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <LL_ADC_SetOffset+0x40>)
 8000674:	4013      	ands	r3, r2
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	430a      	orrs	r2, r1
 8000680:	4313      	orrs	r3, r2
 8000682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000686:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bc90      	pop	{r4, r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	03fff000 	.word	0x03fff000

08000698 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000698:	b490      	push	{r4, r7}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3360      	adds	r3, #96	; 0x60
 80006a6:	461a      	mov	r2, r3
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc90      	pop	{r4, r7}
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006c0:	b490      	push	{r4, r7}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3360      	adds	r3, #96	; 0x60
 80006d0:	461a      	mov	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc90      	pop	{r4, r7}
 80006ee:	4770      	bx	lr

080006f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006f0:	b490      	push	{r4, r7}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3330      	adds	r3, #48	; 0x30
 8000700:	461a      	mov	r2, r3
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	f003 030c 	and.w	r3, r3, #12
 800070c:	4413      	add	r3, r2
 800070e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000710:	6822      	ldr	r2, [r4, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	211f      	movs	r1, #31
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	401a      	ands	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	0e9b      	lsrs	r3, r3, #26
 8000726:	f003 011f 	and.w	r1, r3, #31
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bc90      	pop	{r4, r7}
 8000740:	4770      	bx	lr

08000742 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000742:	b490      	push	{r4, r7}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3314      	adds	r3, #20
 8000752:	461a      	mov	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	0e5b      	lsrs	r3, r3, #25
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	4413      	add	r3, r2
 8000760:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000762:	6822      	ldr	r2, [r4, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	0d1b      	lsrs	r3, r3, #20
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	2107      	movs	r1, #7
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	401a      	ands	r2, r3
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	0d1b      	lsrs	r3, r3, #20
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bc90      	pop	{r4, r7}
 8000790:	4770      	bx	lr
	...

08000794 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007ac:	43db      	mvns	r3, r3
 80007ae:	401a      	ands	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0318 	and.w	r3, r3, #24
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007b8:	40d9      	lsrs	r1, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	400b      	ands	r3, r1
 80007be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007c2:	431a      	orrs	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	0007ffff 	.word	0x0007ffff

080007dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80007ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	6093      	str	r3, [r2, #8]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000814:	d101      	bne.n	800081a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800083c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000864:	d101      	bne.n	800086a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b01      	cmp	r3, #1
 800088a:	d101      	bne.n	8000890 <LL_ADC_IsEnabled+0x18>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <LL_ADC_IsEnabled+0x1a>
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d101      	bne.n	80008b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d101      	bne.n	80008dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_ADC_Init>:
 *         case of update of a parameter of ADC_InitTypeDef on the fly,
 *         without  disabling the other ADCs.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	77fb      	strb	r3, [r7, #31]
	uint32_t tmpCFGR;
	uint32_t tmp_adc_reg_is_conversion_on_going;
	__IO uint32_t wait_loop_index = 0UL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
	uint32_t tmp_adc_is_conversion_on_going_regular;
	uint32_t tmp_adc_is_conversion_on_going_injected;

	/* Check ADC handle */
	if (hadc == NULL) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <HAL_ADC_Init+0x1a>
		return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e134      	b.n	8000b70 <HAL_ADC_Init+0x284>
	assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
	assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	2b00      	cmp	r3, #0
	assert_param(
			!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

	/* Actions performed only if ADC is coming from state reset:                */
	/* - Initialization of ADC MSP                                              */
	if (hadc->State == HAL_ADC_STATE_RESET) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f006 f93b 	bl	8006b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

		/* Set ADC error code to none */
		ADC_CLEAR_ERRORCODE(hadc);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	659a      	str	r2, [r3, #88]	; 0x58

		/* Initialize Lock */
		hadc->Lock = HAL_UNLOCKED;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

	/* - Exit from deep-power-down mode and ADC voltage regulator enable        */
	if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff67 	bl	8000800 <LL_ADC_IsDeepPowerDownEnabled>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <HAL_ADC_Init+0x56>
		/* Disable ADC deep power down mode */
		LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff4d 	bl	80007dc <LL_ADC_DisableDeepPowerDown>
		/* System was in deep power down mode, calibration must
		 be relaunched or a previously saved calibration factor
		 re-applied once the ADC voltage regulator is enabled */
	}

	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff82 	bl	8000850 <LL_ADC_IsInternalRegulatorEnabled>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d113      	bne.n	800097a <HAL_ADC_Init+0x8e>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff66 	bl	8000828 <LL_ADC_EnableInternalRegulator>

		/* Note: Variable divided by 2 to compensate partially              */
		/*       CPU processing cycles, scaling in us split to not          */
		/*       exceed 32 bits register capacity and handle low frequency. */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
				* (SystemCoreClock / (100000UL * 2UL)));
 800095c:	4b86      	ldr	r3, [pc, #536]	; (8000b78 <HAL_ADC_Init+0x28c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_ADC_Init+0x290>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	099b      	lsrs	r3, r3, #6
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800096a:	60bb      	str	r3, [r7, #8]
		while (wait_loop_index != 0UL) {
 800096c:	e002      	b.n	8000974 <HAL_ADC_Init+0x88>
			wait_loop_index--;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3b01      	subs	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
		while (wait_loop_index != 0UL) {
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f9      	bne.n	800096e <HAL_ADC_Init+0x82>
	}

	/* Verification that ADC voltage regulator is correctly enabled, whether    */
	/* or not ADC is coming from state reset (if any potential problem of       */
	/* clocking, voltage regulator would not be enabled).                       */
	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff66 	bl	8000850 <LL_ADC_IsInternalRegulatorEnabled>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10d      	bne.n	80009a6 <HAL_ADC_Init+0xba>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800098e:	f043 0210 	orr.w	r2, r3, #16
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	655a      	str	r2, [r3, #84]	; 0x54

		/* Set ADC error code to ADC peripheral internal error */
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f043 0201 	orr.w	r2, r3, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	659a      	str	r2, [r3, #88]	; 0x58

		tmp_hal_status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	77fb      	strb	r3, [r7, #31]

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed and if there is no conversion on going on regular    */
	/* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
	/* called to update a parameter on the fly).                                */
	tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff77 	bl	800089e <LL_ADC_REG_IsConversionOngoing>
 80009b0:	6178      	str	r0, [r7, #20]
			hadc->Instance);

	if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 80cf 	bne.w	8000b5e <HAL_ADC_Init+0x272>
			&& (tmp_adc_reg_is_conversion_on_going == 0UL)) {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 80cb 	bne.w	8000b5e <HAL_ADC_Init+0x272>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009d0:	f043 0202 	orr.w	r2, r3, #2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
		/* Configuration of common ADC parameters                                 */

		/* Parameters update conditioned to ADC state:                            */
		/* Parameters that can be updated only when ADC is disabled:              */
		/*  - clock configuration                                                 */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff4b 	bl	8000878 <LL_ADC_IsEnabled>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d115      	bne.n	8000a14 <HAL_ADC_Init+0x128>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80009e8:	4865      	ldr	r0, [pc, #404]	; (8000b80 <HAL_ADC_Init+0x294>)
 80009ea:	f7ff ff45 	bl	8000878 <LL_ADC_IsEnabled>
 80009ee:	4604      	mov	r4, r0
 80009f0:	4864      	ldr	r0, [pc, #400]	; (8000b84 <HAL_ADC_Init+0x298>)
 80009f2:	f7ff ff41 	bl	8000878 <LL_ADC_IsEnabled>
 80009f6:	4603      	mov	r3, r0
 80009f8:	431c      	orrs	r4, r3
 80009fa:	4863      	ldr	r0, [pc, #396]	; (8000b88 <HAL_ADC_Init+0x29c>)
 80009fc:	f7ff ff3c 	bl	8000878 <LL_ADC_IsEnabled>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4323      	orrs	r3, r4
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d105      	bne.n	8000a14 <HAL_ADC_Init+0x128>
				/*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
				/*     HAL_ADCEx_MultiModeConfigChannel() )                             */
				/*   - internal measurement paths: Vbat, temperature sensor, Vref       */
				/*     (set into HAL_ADC_ConfigChannel() or                             */
				/*     HAL_ADCEx_InjectedConfigChannel() )                              */
				LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	485f      	ldr	r0, [pc, #380]	; (8000b8c <HAL_ADC_Init+0x2a0>)
 8000a10:	f7ff fdec 	bl	80005ec <LL_ADC_SetCommonClock>
		/*  - external trigger polarity                Init.ExternalTrigConvEdge  */
		/*  - continuous conversion mode               Init.ContinuousConvMode    */
		/*  - overrun                                  Init.Overrun               */
		/*  - discontinuous mode                       Init.DiscontinuousConvMode */
		/*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
		tmpCFGR = (ADC_CFGR_CONTINUOUS((uint32_t )hadc->Init.ContinuousConvMode)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7e5b      	ldrb	r3, [r3, #25]
 8000a18:	035a      	lsls	r2, r3, #13
				| hadc->Init.Overrun | hadc->Init.DataAlign
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	431a      	orrs	r2, r3
				| hadc->Init.Resolution
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	431a      	orrs	r2, r3
				| ADC_CFGR_REG_DISCONTINUOUS(
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a32:	041b      	lsls	r3, r3, #16
		tmpCFGR = (ADC_CFGR_CONTINUOUS((uint32_t )hadc->Init.ContinuousConvMode)
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
						(uint32_t )hadc->Init.DiscontinuousConvMode));

		if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d106      	bne.n	8000a50 <HAL_ADC_Init+0x164>
			tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	3b01      	subs	r3, #1
 8000a48:	045b      	lsls	r3, r3, #17
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
		/* Enable external trigger if trigger selection is different of software  */
		/* start.                                                                 */
		/* Note: This configuration keeps the hardware feature of parameter       */
		/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
		/*       software start.                                                  */
		if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <HAL_ADC_Init+0x180>
			tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
					| hadc->Init.ExternalTrigConvEdge);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	4313      	orrs	r3, r2
			tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
		}

		/* Update Configuration Register CFGR */
		MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <HAL_ADC_Init+0x2a4>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	69b9      	ldr	r1, [r7, #24]
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	60d3      	str	r3, [r2, #12]
		/* Parameters that can be updated when ADC is disabled or enabled without */
		/* conversion on going on regular and injected groups:                    */
		/*  - DMA continuous request          Init.DMAContinuousRequests          */
		/*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
		/*  - Oversampling parameters         Init.Oversampling                   */
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff0a 	bl	800089e <LL_ADC_REG_IsConversionOngoing>
 8000a8a:	6138      	str	r0, [r7, #16]
				hadc->Instance);
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
		tmp_adc_is_conversion_on_going_injected =
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff17 	bl	80008c4 <LL_ADC_INJ_IsConversionOngoing>
 8000a96:	60f8      	str	r0, [r7, #12]
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d13d      	bne.n	8000b1a <HAL_ADC_Init+0x22e>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d13a      	bne.n	8000b1a <HAL_ADC_Init+0x22e>
			tmpCFGR = (ADC_CFGR_DFSDM(hadc)
					| ADC_CFGR_AUTOWAIT((uint32_t )hadc->Init.LowPowerAutoWait)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7e1b      	ldrb	r3, [r3, #24]
 8000aa8:	039a      	lsls	r2, r3, #14
					| ADC_CFGR_DMACONTREQ(
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ab0:	005b      	lsls	r3, r3, #1
			tmpCFGR = (ADC_CFGR_DFSDM(hadc)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
							(uint32_t )hadc->Init.DMAContinuousRequests));

			MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	69b9      	ldr	r1, [r7, #24]
 8000aca:	430b      	orrs	r3, r1
 8000acc:	60d3      	str	r3, [r2, #12]

			if (hadc->Init.OversamplingMode == ENABLE) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d118      	bne.n	8000b0a <HAL_ADC_Init+0x21e>
				/* Configuration of Oversampler:                                      */
				/*  - Oversampling Ratio                                              */
				/*  - Right bit shift                                                 */
				/*  - Triggered mode                                                  */
				/*  - Oversampling mode (continued/resumed)                           */
				MODIFY_REG(hadc->Instance->CFGR2,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ae2:	f023 0304 	bic.w	r3, r3, #4
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000aee:	4311      	orrs	r1, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000af4:	4311      	orrs	r1, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000afa:	430a      	orrs	r2, r1
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	e007      	b.n	8000b1a <HAL_ADC_Init+0x22e>
						ADC_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS | ADC_CFGR2_ROVSM,
						ADC_CFGR2_ROVSE | hadc->Init.Oversampling.Ratio | hadc->Init.Oversampling.RightBitShift | hadc->Init.Oversampling.TriggeredMode | hadc->Init.Oversampling.OversamplingStopReset);
			} else {
				/* Disable ADC oversampling scope on ADC group regular */
				CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
		/*   Note: Scan mode is not present by hardware on this device, but       */
		/*   emulated by software for alignment over all STM32 devices.           */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion".                                         */

		if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <HAL_ADC_Init+0x250>
			/* Set number of ranks in regular group sequencer */
			MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f023 010f 	bic.w	r1, r3, #15
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3a:	e007      	b.n	8000b4c <HAL_ADC_Init+0x260>
					(hadc->Init.NbrOfConversion - (uint8_t )1));
		} else {
			CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 020f 	bic.w	r2, r2, #15
 8000b4a:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/* Initialize the ADC state */
		/* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
		ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	f023 0303 	bic.w	r3, r3, #3
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	655a      	str	r2, [r3, #84]	; 0x54
 8000b5c:	e007      	b.n	8000b6e <HAL_ADC_Init+0x282>
	} else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b62:	f043 0210 	orr.w	r2, r3, #16
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	77fb      	strb	r3, [r7, #31]
	}

	/* Return function status */
	return tmp_hal_status;
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	053e2d63 	.word	0x053e2d63
 8000b80:	50040000 	.word	0x50040000
 8000b84:	50040100 	.word	0x50040100
 8000b88:	50040200 	.word	0x50040200
 8000b8c:	50040300 	.word	0x50040300
 8000b90:	fff0c007 	.word	0xfff0c007

08000b94 <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param sConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_ChannelConfTypeDef *sConfig) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0a6      	sub	sp, #152	; 0x98
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t tmpOffsetShifted;
	uint32_t tmp_config_internal_channel;
	__IO uint32_t wait_loop_index = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
	} else {
		assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_ConfigChannel+0x22>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e348      	b.n	8001248 <HAL_ADC_ConfigChannel+0x6b4>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Channel number                                                        */
	/*  - Channel rank                                                          */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fe6b 	bl	800089e <LL_ADC_REG_IsConversionOngoing>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8329 	bne.w	8001222 <HAL_ADC_ConfigChannel+0x68e>
		/* Correspondence for compatibility with legacy definition of             */
		/* sequencer ranks in direct number format. This correspondence can       */
		/* be done only on ranks 1 to 5 due to literal values.                    */
		/* Note: Sequencer ranks in direct number format are no more used         */
		/*       and are detected by activating USE_FULL_ASSERT feature.          */
		if (sConfig->Rank <= 5U) {
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	d824      	bhi.n	8000c22 <HAL_ADC_ConfigChannel+0x8e>
			switch (sConfig->Rank) {
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d81b      	bhi.n	8000c1a <HAL_ADC_ConfigChannel+0x86>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <HAL_ADC_ConfigChannel+0x54>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000c01 	.word	0x08000c01
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c11 	.word	0x08000c11
			case 2U:
				sConfig->Rank = ADC_REGULAR_RANK_2;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	605a      	str	r2, [r3, #4]
				break;
 8000bfe:	e011      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x90>
			case 3U:
				sConfig->Rank = ADC_REGULAR_RANK_3;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2212      	movs	r2, #18
 8000c04:	605a      	str	r2, [r3, #4]
				break;
 8000c06:	e00d      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x90>
			case 4U:
				sConfig->Rank = ADC_REGULAR_RANK_4;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2218      	movs	r2, #24
 8000c0c:	605a      	str	r2, [r3, #4]
				break;
 8000c0e:	e009      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x90>
			case 5U:
				sConfig->Rank = ADC_REGULAR_RANK_5;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	605a      	str	r2, [r3, #4]
				break;
 8000c18:	e004      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x90>
				/* case 1U */
			default:
				sConfig->Rank = ADC_REGULAR_RANK_1;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2206      	movs	r2, #6
 8000c1e:	605a      	str	r2, [r3, #4]
				break;
 8000c20:	e000      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x90>
			}
		}
 8000c22:	bf00      	nop
#endif

		/* Set ADC group regular sequence: channel on the selected scan sequence rank */
		LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	6859      	ldr	r1, [r3, #4]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	f7ff fd5d 	bl	80006f0 <LL_ADC_REG_SetSequencerRanks>
		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated when ADC is disabled or enabled without   */
		/* conversion on going on regular group:                                    */
		/*  - Channel sampling time                                                 */
		/*  - Channel offset                                                        */
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe2f 	bl	800089e <LL_ADC_REG_IsConversionOngoing>
 8000c40:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
				hadc->Instance);
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
		tmp_adc_is_conversion_on_going_injected =
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe3b 	bl	80008c4 <LL_ADC_INJ_IsConversionOngoing>
 8000c4e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8148 	bne.w	8000eec <HAL_ADC_ConfigChannel+0x358>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8000c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 8143 	bne.w	8000eec <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
			/* Set sampling time of the selected ADC channel */
			LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	6819      	ldr	r1, [r3, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	461a      	mov	r2, r3
 8000c74:	f7ff fd65 	bl	8000742 <LL_ADC_SetChannelSamplingTime>

			/* Configure the offset: offset enable/disable, channel, offset value */

			/* Shift the offset with respect to the selected ADC resolution. */
			/* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
			tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc,
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	08db      	lsrs	r3, r3, #3
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					(uint32_t )sConfig->Offset);

			if (sConfig->OffsetNumber != ADC_OFFSET_NONE) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d00a      	beq.n	8000cb0 <HAL_ADC_ConfigChannel+0x11c>
				/* Set ADC selected offset number */
				LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000caa:	f7ff fcd3 	bl	8000654 <LL_ADC_SetOffset>
 8000cae:	e11d      	b.n	8000eec <HAL_ADC_ConfigChannel+0x358>
						sConfig->Channel, tmpOffsetShifted);

			} else {
				/* Scan each offset register to check if the selected channel is targeted. */
				/* If this is the case, the corresponding offset number is disabled.       */
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fcee 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <HAL_ADC_ConfigChannel+0x148>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fce3 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	0e9b      	lsrs	r3, r3, #26
 8000cd6:	f003 021f 	and.w	r2, r3, #31
 8000cda:	e012      	b.n	8000d02 <HAL_ADC_ConfigChannel+0x16e>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fcd8 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
		result |= value & 1U;
		s--;
	}
	result <<= s; /* shift when v's highest bits are zero */
#endif
	return result;
 8000cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel)) {
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d105      	bne.n	8000d1a <HAL_ADC_ConfigChannel+0x186>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	0e9b      	lsrs	r3, r3, #26
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	e00a      	b.n	8000d30 <HAL_ADC_ConfigChannel+0x19c>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	677b      	str	r3, [r7, #116]	; 0x74
	return result;
 8000d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d106      	bne.n	8000d42 <HAL_ADC_ConfigChannel+0x1ae>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fcbf 	bl	80006c0 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2101      	movs	r1, #1
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fca5 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10a      	bne.n	8000d6e <HAL_ADC_ConfigChannel+0x1da>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fc9a 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	0e9b      	lsrs	r3, r3, #26
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	e010      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x1fc>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2101      	movs	r1, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fc8f 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d80:	fa93 f3a3 	rbit	r3, r3
 8000d84:	66fb      	str	r3, [r7, #108]	; 0x6c
	return result;
 8000d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel)) {
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x214>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0e9b      	lsrs	r3, r3, #26
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	e00a      	b.n	8000dbe <HAL_ADC_ConfigChannel+0x22a>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	667b      	str	r3, [r7, #100]	; 0x64
	return result;
 8000db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d106      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x23c>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc78 	bl	80006c0 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc5e 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10a      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x268>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fc53 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	0e9b      	lsrs	r3, r3, #26
 8000df6:	f003 021f 	and.w	r2, r3, #31
 8000dfa:	e010      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x28a>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc48 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	65fb      	str	r3, [r7, #92]	; 0x5c
	return result;
 8000e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel)) {
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d105      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x2a2>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0e9b      	lsrs	r3, r3, #26
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	e00a      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x2b8>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	657b      	str	r3, [r7, #84]	; 0x54
	return result;
 8000e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d106      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x2ca>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc31 	bl	80006c0 <LL_ADC_SetOffsetState>
							LL_ADC_OFFSET_DISABLE);
				}
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2103      	movs	r1, #3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fc17 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10a      	bne.n	8000e8a <HAL_ADC_ConfigChannel+0x2f6>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fc0c 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	0e9b      	lsrs	r3, r3, #26
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	e010      	b.n	8000eac <HAL_ADC_ConfigChannel+0x318>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fc01 	bl	8000698 <LL_ADC_GetOffsetChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e9c:	fa93 f3a3 	rbit	r3, r3
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
	return result;
 8000ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
						LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel)) {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x330>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0e9b      	lsrs	r3, r3, #26
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	e00a      	b.n	8000eda <HAL_ADC_ConfigChannel+0x346>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
	return result;
 8000ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
				if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d106      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x358>
					LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fbea 	bl	80006c0 <LL_ADC_SetOffsetState>
		}

		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated only when ADC is disabled:                */
		/*  - Single or differential mode                                           */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fcc1 	bl	8000878 <LL_ADC_IsEnabled>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 810c 	bne.w	8001116 <HAL_ADC_ConfigChannel+0x582>
			/* Set mode single-ended or differential input of the selected ADC channel */
			LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f7ff fc42 	bl	8000794 <LL_ADC_SetChannelSingleDiff>
					sConfig->SingleDiff);

			/* Configuration of differential mode */
			if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED) {
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4aad      	ldr	r2, [pc, #692]	; (80011cc <HAL_ADC_ConfigChannel+0x638>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	f040 80fd 	bne.w	8001116 <HAL_ADC_ConfigChannel+0x582>
				/* Set sampling time of the selected ADC channel */
				/* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6818      	ldr	r0, [r3, #0]
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x3b0>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0e9b      	lsrs	r3, r3, #26
 8000f32:	3301      	adds	r3, #1
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	bf94      	ite	ls
 8000f3c:	2301      	movls	r3, #1
 8000f3e:	2300      	movhi	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	e012      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x3d6>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
	return result;
 8000f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f54:	fab3 f383 	clz	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	bf94      	ite	ls
 8000f64:	2301      	movls	r3, #1
 8000f66:	2300      	movhi	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d064      	beq.n	8001038 <HAL_ADC_ConfigChannel+0x4a4>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <HAL_ADC_ConfigChannel+0x3f6>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0e9b      	lsrs	r3, r3, #26
 8000f80:	3301      	adds	r3, #1
 8000f82:	069b      	lsls	r3, r3, #26
 8000f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f88:	e00e      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x414>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
	return result;
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	069b      	lsls	r3, r3, #26
 8000fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x434>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0e9b      	lsrs	r3, r3, #26
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	e010      	b.n	8000fea <HAL_ADC_ConfigChannel+0x456>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	ea42 0103 	orr.w	r1, r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10a      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x47c>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0e9b      	lsrs	r3, r3, #26
 8001000:	3301      	adds	r3, #1
 8001002:	f003 021f 	and.w	r2, r3, #31
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	051b      	lsls	r3, r3, #20
 800100e:	e011      	b.n	8001034 <HAL_ADC_ConfigChannel+0x4a0>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	return result;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	051b      	lsls	r3, r3, #20
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001034:	430b      	orrs	r3, r1
 8001036:	e069      	b.n	800110c <HAL_ADC_ConfigChannel+0x578>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x4c0>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0e9b      	lsrs	r3, r3, #26
 800104a:	3301      	adds	r3, #1
 800104c:	069b      	lsls	r3, r3, #26
 800104e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001052:	e00e      	b.n	8001072 <HAL_ADC_ConfigChannel+0x4de>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	61fb      	str	r3, [r7, #28]
	return result;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	3301      	adds	r3, #1
 800106c:	069b      	lsls	r3, r3, #26
 800106e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_ConfigChannel+0x4fe>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0e9b      	lsrs	r3, r3, #26
 8001084:	3301      	adds	r3, #1
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	e010      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x520>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	617b      	str	r3, [r7, #20]
	return result;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	ea42 0103 	orr.w	r1, r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10d      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x54c>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0e9b      	lsrs	r3, r3, #26
 80010ca:	3301      	adds	r3, #1
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	051b      	lsls	r3, r3, #20
 80010da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010de:	e014      	b.n	800110a <HAL_ADC_ConfigChannel+0x576>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	60fb      	str	r3, [r7, #12]
	return result;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	3b1e      	subs	r3, #30
 8001104:	051b      	lsls	r3, r3, #20
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800110a:	430b      	orrs	r3, r1
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6892      	ldr	r2, [r2, #8]
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fb16 	bl	8000742 <LL_ADC_SetChannelSamplingTime>
		/* If internal channel selected, enable dedicated internal buffers and    */
		/* paths.                                                                 */
		/* Note: these internal measurement paths can be disabled using           */
		/* HAL_ADC_DeInit().                                                      */

		if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)) {
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_ADC_ConfigChannel+0x63c>)
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 808c 	beq.w	800123c <HAL_ADC_ConfigChannel+0x6a8>
			tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8001124:	482b      	ldr	r0, [pc, #172]	; (80011d4 <HAL_ADC_ConfigChannel+0x640>)
 8001126:	f7ff fa87 	bl	8000638 <LL_ADC_GetCommonPathInternalCh>
 800112a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					__LL_ADC_COMMON_INSTANCE(hadc->Instance));

			/* If the requested internal measurement path has already been enabled, */
			/* bypass the configuration processing.                                 */
			if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_ADC_ConfigChannel+0x644>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d12b      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x5fc>
					&& ((tmp_config_internal_channel
							& LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL)) {
 8001138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800113c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
					&& ((tmp_config_internal_channel
 8001140:	2b00      	cmp	r3, #0
 8001142:	d125      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x5fc>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <HAL_ADC_ConfigChannel+0x648>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d004      	beq.n	8001158 <HAL_ADC_ConfigChannel+0x5c4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_ADC_ConfigChannel+0x64c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d16e      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x6a2>
					LL_ADC_SetCommonPathInternalCh(
 8001158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800115c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001160:	4619      	mov	r1, r3
 8001162:	481c      	ldr	r0, [pc, #112]	; (80011d4 <HAL_ADC_ConfigChannel+0x640>)
 8001164:	f7ff fa55 	bl	8000612 <LL_ADC_SetCommonPathInternalCh>
					/* Wait loop initialization and execution */
					/* Note: Variable divided by 2 to compensate partially              */
					/*       CPU processing cycles, scaling in us split to not          */
					/*       exceed 32 bits register capacity and handle low frequency. */
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
							* (SystemCoreClock / (100000UL * 2UL)));
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_ADC_ConfigChannel+0x650>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_ADC_ConfigChannel+0x654>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	099a      	lsrs	r2, r3, #6
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
					wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800117e:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 8001180:	e002      	b.n	8001188 <HAL_ADC_ConfigChannel+0x5f4>
						wait_loop_index--;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b01      	subs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0UL) {
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x5ee>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 800118e:	e052      	b.n	8001236 <HAL_ADC_ConfigChannel+0x6a2>
					}
				}
			} else if ((sConfig->Channel == ADC_CHANNEL_VBAT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_ConfigChannel+0x658>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12a      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x65c>
					&& ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT)
 800119a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800119e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d124      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x65c>
							== 0UL)) {
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <HAL_ADC_ConfigChannel+0x648>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d004      	beq.n	80011ba <HAL_ADC_ConfigChannel+0x626>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_ConfigChannel+0x64c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d13f      	bne.n	800123a <HAL_ADC_ConfigChannel+0x6a6>
					LL_ADC_SetCommonPathInternalCh(
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011c2:	4619      	mov	r1, r3
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_ADC_ConfigChannel+0x640>)
 80011c6:	f7ff fa24 	bl	8000612 <LL_ADC_SetCommonPathInternalCh>
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 80011ca:	e036      	b.n	800123a <HAL_ADC_ConfigChannel+0x6a6>
 80011cc:	407f0000 	.word	0x407f0000
 80011d0:	80080000 	.word	0x80080000
 80011d4:	50040300 	.word	0x50040300
 80011d8:	c7520000 	.word	0xc7520000
 80011dc:	50040000 	.word	0x50040000
 80011e0:	50040200 	.word	0x50040200
 80011e4:	20000008 	.word	0x20000008
 80011e8:	053e2d63 	.word	0x053e2d63
 80011ec:	cb840000 	.word	0xcb840000
							__LL_ADC_COMMON_INSTANCE(hadc->Instance),
							LL_ADC_PATH_INTERNAL_VBAT
									| tmp_config_internal_channel);
				}
			} else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_ADC_ConfigChannel+0x6bc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d120      	bne.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
					&& ((tmp_config_internal_channel
							& LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
 80011fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
					&& ((tmp_config_internal_channel
 8001202:	2b00      	cmp	r3, #0
 8001204:	d11a      	bne.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
				if (ADC_VREFINT_INSTANCE(hadc)) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_ADC_ConfigChannel+0x6c0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d115      	bne.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
					LL_ADC_SetCommonPathInternalCh(
 8001210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_ADC_ConfigChannel+0x6c4>)
 800121c:	f7ff f9f9 	bl	8000612 <LL_ADC_SetCommonPathInternalCh>
 8001220:	e00c      	b.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
	/* If a conversion is on going on regular group, no update on regular       */
	/* channel could be done on neither of the channel configuration structure  */
	/* parameters.                                                              */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	f043 0220 	orr.w	r2, r3, #32
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001234:	e002      	b.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
				if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <HAL_ADC_ConfigChannel+0x6a8>
				if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 800123a:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 8001244:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001248:	4618      	mov	r0, r3
 800124a:	3798      	adds	r7, #152	; 0x98
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	80000001 	.word	0x80000001
 8001254:	50040000 	.word	0x50040000
 8001258:	50040300 	.word	0x50040300

0800125c <LL_ADC_IsEnabled>:
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <LL_ADC_IsEnabled+0x18>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <LL_ADC_IsEnabled+0x1a>
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_REG_IsConversionOngoing>:
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b04      	cmp	r3, #4
 8001294:	d101      	bne.n	800129a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_ADCEx_MultiModeConfigChannel>:
 * @param hadc Master ADC handle
 * @param multimode Structure of ADC multimode configuration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_MultiModeTypeDef *multimode) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b09f      	sub	sp, #124	; 0x7c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
		assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e08f      	b.n	80013e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d102      	bne.n	80012de <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e001      	b.n	80012e2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]

	if (tmphadcSlave.Instance == NULL) {
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x58>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f043 0220 	orr.w	r2, r3, #32
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54

		/* Process unlocked */
		__HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e072      	b.n	80013e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Multimode DMA configuration                                           */
	/*  - Multimode DMA mode                                                    */
	tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffbd 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001308:	6738      	str	r0, [r7, #112]	; 0x70
			(&tmphadcSlave)->Instance);
	if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffb7 	bl	8001282 <LL_ADC_REG_IsConversionOngoing>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d154      	bne.n	80013c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
			&& (tmphadcSlave_conversion_on_going == 0UL)) {
 800131a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800131c:	2b00      	cmp	r3, #0
 800131e:	d151      	bne.n	80013c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
		/* Pointer to the common control register */
		tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001322:	66fb      	str	r3, [r7, #108]	; 0x6c

		/* If multimode is selected, configure all multimode parameters.          */
		/* Otherwise, reset multimode parameters (can be used in case of          */
		/* transition from multimode to independent mode).                        */
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02c      	beq.n	8001386 <HAL_ADCEx_MultiModeConfigChannel+0xde>
			MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800132c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800133e:	035b      	lsls	r3, r3, #13
 8001340:	430b      	orrs	r3, r1
 8001342:	431a      	orrs	r2, r3
 8001344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001346:	609a      	str	r2, [r3, #8]
			/*      from 1 to 10 clock cycles for 10 bits,                              */
			/*      from 1 to 8 clock cycles for 8 bits                                 */
			/*      from 1 to 6 clock cycles for 6 bits                                 */
			/*    If a higher delay is selected, it will be clipped to maximum delay    */
			/*    range                                                                 */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8001348:	4829      	ldr	r0, [pc, #164]	; (80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800134a:	f7ff ff87 	bl	800125c <LL_ADC_IsEnabled>
 800134e:	4604      	mov	r4, r0
 8001350:	4828      	ldr	r0, [pc, #160]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001352:	f7ff ff83 	bl	800125c <LL_ADC_IsEnabled>
 8001356:	4603      	mov	r3, r0
 8001358:	431c      	orrs	r4, r3
 800135a:	4828      	ldr	r0, [pc, #160]	; (80013fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800135c:	f7ff ff7e 	bl	800125c <LL_ADC_IsEnabled>
 8001360:	4603      	mov	r3, r0
 8001362:	4323      	orrs	r3, r4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d137      	bne.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
				MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8001368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6811      	ldr	r1, [r2, #0]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	6892      	ldr	r2, [r2, #8]
 800137c:	430a      	orrs	r2, r1
 800137e:	431a      	orrs	r2, r3
 8001380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001382:	609a      	str	r2, [r3, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 8001384:	e028      	b.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
						multimode->Mode | multimode->TwoSamplingDelay);
			}
		} else /* ADC_MODE_INDEPENDENT */
		{
			CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800138e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001390:	609a      	str	r2, [r3, #8]

			/* Parameters that can be updated only when ADC is disabled:                */
			/*  - Multimode mode selection                                              */
			/*  - Multimode delay                                                       */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001394:	f7ff ff62 	bl	800125c <LL_ADC_IsEnabled>
 8001398:	4604      	mov	r4, r0
 800139a:	4816      	ldr	r0, [pc, #88]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800139c:	f7ff ff5e 	bl	800125c <LL_ADC_IsEnabled>
 80013a0:	4603      	mov	r3, r0
 80013a2:	431c      	orrs	r4, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80013a6:	f7ff ff59 	bl	800125c <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4323      	orrs	r3, r4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d112      	bne.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
				CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80013b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013ba:	f023 030f 	bic.w	r3, r3, #15
 80013be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013c0:	6093      	str	r3, [r2, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 80013c2:	e009      	b.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
	}
	/* If one of the ADC sharing the same common group is enabled, no update    */
	/* could be done on neither of the multimode structure parameters.          */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	f043 0220 	orr.w	r2, r3, #32
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80013d6:	e000      	b.n	80013da <HAL_ADCEx_MultiModeConfigChannel+0x132>
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 80013d8:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 80013e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	377c      	adds	r7, #124	; 0x7c
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	50040000 	.word	0x50040000
 80013f4:	50040100 	.word	0x50040100
 80013f8:	50040300 	.word	0x50040300
 80013fc:	50040200 	.word	0x50040200

08001400 <HAL_CAN_Init>:
 *         parameters in the CAN_InitStruct.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Check CAN handle */
	if (hcan == NULL) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_CAN_Init+0x12>
		return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0ed      	b.n	80015ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
	if (hcan->State == HAL_CAN_STATE_RESET) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_CAN_Init+0x24>
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f005 fbf4 	bl	8006c0c <HAL_CAN_MspInit>
	}
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

	/* Exit from sleep mode */
	CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0202 	bic.w	r2, r2, #2
 8001432:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8001434:	f7ff f8ac 	bl	8000590 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

	/* Check Sleep mode leave acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 800143a:	e012      	b.n	8001462 <HAL_CAN_Init+0x62>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 800143c:	f7ff f8a8 	bl	8000590 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b0a      	cmp	r3, #10
 8001448:	d90b      	bls.n	8001462 <HAL_CAN_Init+0x62>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2205      	movs	r2, #5
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0c5      	b.n	80015ee <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e5      	bne.n	800143c <HAL_CAN_Init+0x3c>
		}
	}

	/* Request initialisation */
	SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8001480:	f7ff f886 	bl	8000590 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

	/* Wait initialisation acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 8001486:	e012      	b.n	80014ae <HAL_CAN_Init+0xae>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8001488:	f7ff f882 	bl	8000590 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b0a      	cmp	r3, #10
 8001494:	d90b      	bls.n	80014ae <HAL_CAN_Init+0xae>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e09f      	b.n	80015ee <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e5      	beq.n	8001488 <HAL_CAN_Init+0x88>
		}
	}

	/* Set the time triggered communication mode */
	if (hcan->Init.TimeTriggeredMode == ENABLE) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_CAN_Init+0xd6>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e007      	b.n	80014e6 <HAL_CAN_Init+0xe6>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic bus-off management */
	if (hcan->Init.AutoBusOff == ENABLE) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7e5b      	ldrb	r3, [r3, #25]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_CAN_Init+0x100>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e007      	b.n	8001510 <HAL_CAN_Init+0x110>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800150e:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (hcan->Init.AutoWakeUp == ENABLE) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e9b      	ldrb	r3, [r3, #26]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_CAN_Init+0x12a>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e007      	b.n	800153a <HAL_CAN_Init+0x13a>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0220 	bic.w	r2, r2, #32
 8001538:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic retransmission */
	if (hcan->Init.AutoRetransmission == ENABLE) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7edb      	ldrb	r3, [r3, #27]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_CAN_Init+0x154>
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0210 	bic.w	r2, r2, #16
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e007      	b.n	8001564 <HAL_CAN_Init+0x164>
	} else {
		SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0210 	orr.w	r2, r2, #16
 8001562:	601a      	str	r2, [r3, #0]
	}

	/* Set the receive FIFO locked mode */
	if (hcan->Init.ReceiveFifoLocked == ENABLE) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7f1b      	ldrb	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_CAN_Init+0x17e>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0208 	orr.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <HAL_CAN_Init+0x18e>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0208 	bic.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (hcan->Init.TransmitFifoPriority == ENABLE) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7f5b      	ldrb	r3, [r3, #29]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_CAN_Init+0x1a8>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0204 	orr.w	r2, r2, #4
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_CAN_Init+0x1b8>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	ea42 0103 	orr.w	r1, r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	61da      	str	r2, [r3, #28]
			(uint32_t )(hcan->Init.Mode | hcan->Init.SyncJumpWidth
					| hcan->Init.TimeSeg1 | hcan->Init.TimeSeg2
					| (hcan->Init.Prescaler - 1U)));

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

	/* Return function status */
	return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
	}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
	}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
		SubPriorityBits =
 800171e:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
 8001744:	4313      	orrs	r3, r2
	}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff29 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff3e 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff31 	bl	800165c <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa2 	bl	8001754 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d008      	beq.n	8001844 <HAL_DMA_Abort+0x2a>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2204      	movs	r2, #4
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e022      	b.n	800188a <HAL_DMA_Abort+0x70>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 020e 	bic.w	r2, r2, #14
 8001852:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8001876:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		return status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d005      	beq.n	80018ba <HAL_DMA_Abort_IT+0x24>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2204      	movs	r2, #4
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c

		status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e029      	b.n	800190e <HAL_DMA_Abort_IT+0x78>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020e 	bic.w	r2, r2, #14
 80018c8:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
    }

#else
		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 021c 	and.w	r2, r3, #28
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				<< (hdma->ChannelIndex & 0x1CU));
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 80018ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_DMA_Abort_IT+0x78>
			hdma->XferAbortCallback(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
		}
	}
	return status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_GetError>:
 * @brief  Return the DMA error code.
 * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
 *              the configuration information for the specified DMA Channel.
 * @retval DMA Error Code
 */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	return hdma->ErrorCode;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800193e:	e17f      	b.n	8001c40 <HAL_GPIO_Init+0x310>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8171 	beq.w	8001c3a <HAL_GPIO_Init+0x30a>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x38>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x80>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	6939      	ldr	r1, [r7, #16]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	601a      	str	r2, [r3, #0]

			/* In case of Output or Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d00b      	beq.n	8001a04 <HAL_GPIO_Init+0xd4>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_PP)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0xd4>
					|| (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b11      	cmp	r3, #17
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0xd4>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b12      	cmp	r3, #18
 8001a02:	d130      	bne.n	8001a66 <HAL_GPIO_Init+0x136>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u)
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	605a      	str	r2, [r3, #4]
			}

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

			/* In case of Analog mode, check if ADC control mode is selected */
			if ((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG) {
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d118      	bne.n	8001aa4 <HAL_GPIO_Init+0x174>
				/* Configure the IO Output Type */
				temp = GPIOx->ASCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_ASCR_ASC0 << position);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
				GPIOx->ASCR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
			}

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

			/* Activate the Pull-up or Pull down resistor for the current IO */
			temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
			GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	60da      	str	r2, [r3, #12]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80ac 	beq.w	8001c3a <HAL_GPIO_Init+0x30a>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE()
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6613      	str	r3, [r2, #96]	; 0x60
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
				;

				temp = SYSCFG->EXTICR[position >> 2u];
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x242>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x23e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_GPIO_Init+0x338>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x23a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_GPIO_Init+0x33c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x236>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <HAL_GPIO_Init+0x340>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x232>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x344>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x348>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b72:	2300      	movs	r3, #0
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8001b84:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR1;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x286>
					temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6013      	str	r3, [r2, #0]

				temp = EXTI->EMR1;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2b0>
					temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6053      	str	r3, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2da>
					temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x304>
					temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	60d3      	str	r3, [r2, #12]
			}
		}

		position++;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f ae78 	bne.w	8001940 <HAL_GPIO_Init+0x10>
	}
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	48001000 	.word	0x48001000
 8001c74:	48001400 	.word	0x48001400
 8001c78:	48001800 	.word	0x48001800
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_TogglePin>:
 * @brief  Toggle the specified GPIO pin.
 * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
 * @param  GPIO_Pin specifies the pin to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->ODR & GPIO_Pin) != 0x00u) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_TogglePin+0x20>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 8001cc8:	887a      	ldrh	r2, [r7, #2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
	}
}
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_TogglePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  Handle EXTI interrupt request.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f806 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_PWREx_GetVoltageRange>:
/**
 * @brief Return Voltage Scaling Range.
 * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
 *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
 */
uint32_t HAL_PWREx_GetVoltageRange(void) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
	return (PWR->CR1 & PWR_CR1_VOS);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        50 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  }

#else

	/* If Set Range 1 */
	if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d56:	d130      	bne.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x72>
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1) {
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d64:	d038      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 1 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d74:	6013      	str	r3, [r2, #0]

			/* Wait until VOSF is cleared */
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock)
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2232      	movs	r2, #50	; 0x32
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
					/ 1000000U) + 1U;
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
			wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock)
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8c:	e002      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
					&& (wait_loop_index != 0U)) {
				wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
			while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d102      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x60>
					&& (wait_loop_index != 0U)) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x46>
			}
			if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d110      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
				return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x92>
			}
		}
	} else {
		if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2) {
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d007      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
			/* Set Range 2 */
			MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
			/* No need to wait for VOSF to be cleared for this transition */
		}
	}
#endif

	return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000
 8001dec:	20000008 	.word	0x20000008
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status;
	uint32_t sysclk_source, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e39d      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e06:	4ba4      	ldr	r3, [pc, #656]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	61bb      	str	r3, [r7, #24]
	pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e10:	4ba1      	ldr	r3, [pc, #644]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	617b      	str	r3, [r7, #20]

	/*----------------------------- MSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80e1 	beq.w	8001fea <HAL_RCC_OscConfig+0x1f6>
		assert_param(
				IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
		assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

		/* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_MSI)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f040 8088 	bne.w	8001f46 <HAL_RCC_OscConfig+0x152>
						&& (pll_config == RCC_PLLSOURCE_MSI))) {
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 8084 	bne.w	8001f46 <HAL_RCC_OscConfig+0x152>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3e:	4b96      	ldr	r3, [pc, #600]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
					&& (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
				return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e375      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			/* Otherwise, just the calibration and MSI range change are allowed */
			else {
				/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
				 must be correctly programmed according to the frequency of the CPU clock
				 (HCLK) and the supply voltage of the device. */
				if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE()) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x7c>
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_OscConfig+0x88>
 8001e70:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d223      	bcs.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
					/* First increase number of wait states update if necessary */
					if (RCC_SetFlashLatencyFromMSIRange(
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fd09 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0xa0>
							RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
						return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e356      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
					}

					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7f      	ldr	r2, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b7d      	ldr	r3, [pc, #500]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	497a      	ldr	r1, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
							RCC_OscInitStruct->MSIClockRange);
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 8001eb2:	4b79      	ldr	r3, [pc, #484]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	4975      	ldr	r1, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
 8001ec6:	e022      	b.n	8001f0e <HAL_RCC_OscConfig+0x11a>
							RCC_OscInitStruct->MSICalibrationValue);
				} else {
					/* Else, keep current flash latency while decreasing applies */
					/* Selects the Multiple Speed oscillator (MSI) clock range .*/
					__HAL_RCC_MSI_RANGE_CONFIG(
 8001ec8:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	496d      	ldr	r1, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
							RCC_OscInitStruct->MSIClockRange);
					/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
					__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 8001ee6:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	4968      	ldr	r1, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->MSICalibrationValue);

					/* Decrease number of wait states update if necessary */
					if (RCC_SetFlashLatencyFromMSIRange(
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fccc 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x11a>
							RCC_OscInitStruct->MSIClockRange) != HAL_OK) {
						return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e319      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
					}
				}

				/* Update the SystemCoreClock global variable */
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001f0e:	f000 fc03 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8001f12:	4601      	mov	r1, r0
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	689b      	ldr	r3, [r3, #8]
								>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8001f1e:	4a5f      	ldr	r2, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x2a8>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
								>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f22:	f003 031f 	and.w	r3, r3, #31
						>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 8001f26:	fa21 f303 	lsr.w	r3, r1, r3
				SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001f2a:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	6013      	str	r3, [r2, #0]

				/* Configure the source of time base considering new system clocks settings*/
				status = HAL_InitTick(uwTickPrio);
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x2b0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fae0 	bl	80004f8 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
				if (status != HAL_OK) {
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d052      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1f4>
					return status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	e2fd      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				}
			}
		} else {
			/* Check the MSI State */
			if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d032      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1c0>
				/* Enable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_ENABLE();
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a51      	ldr	r2, [pc, #324]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8001f5a:	f7fe fb19 	bl	8000590 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x180>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8001f62:	f7fe fb15 	bl	8000590 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x180>
						return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e2e6      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x16e>
					}
				}
				/* Selects the Multiple Speed oscillator (MSI) clock range .*/
				__HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	4b45      	ldr	r3, [pc, #276]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	493f      	ldr	r1, [pc, #252]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
				/* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
				__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	493a      	ldr	r1, [pc, #232]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e01a      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
						RCC_OscInitStruct->MSICalibrationValue);

			} else {
				/* Disable the Internal High Speed oscillator (MSI). */
				__HAL_RCC_MSI_DISABLE();
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

				/* Get timeout */
				tickstart = HAL_GetTick();
 8001fc0:	f7fe fae6 	bl	8000590 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

				/* Wait till MSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1e6>
					if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE) {
 8001fc8:	f7fe fae2 	bl	8000590 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1e6>
						return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e2b3      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) {
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1d4>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
			if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe8:	bf00      	nop
				}
			}
		}
	}
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d074      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2ec>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((sysclk_source == RCC_CFGR_SWS_HSE)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x214>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d10e      	bne.n	8002020 <HAL_RCC_OscConfig+0x22c>
						&& (pll_config == RCC_PLLSOURCE_HSE))) {
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x22c>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d064      	beq.n	80020de <HAL_RCC_OscConfig+0x2ea>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d160      	bne.n	80020de <HAL_RCC_OscConfig+0x2ea>
				return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e290      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x244>
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0x280>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x268>
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x280>
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_RCC_OscConfig+0x2a4>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2c2>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800207c:	f7fe fa88 	bl	8000590 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8002082:	e011      	b.n	80020a8 <HAL_RCC_OscConfig+0x2b4>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002084:	f7fe fa84 	bl	8000590 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d90a      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2b4>
						return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e255      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	080072ec 	.word	0x080072ec
 80020a0:	20000008 	.word	0x20000008
 80020a4:	20000000 	.word	0x20000000
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 80020a8:	4bae      	ldr	r3, [pc, #696]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0e7      	beq.n	8002084 <HAL_RCC_OscConfig+0x290>
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x2ec>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80020b6:	f7fe fa6b 	bl	8000590 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2dc>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80020be:	f7fe fa67 	bl	8000590 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2dc>
						return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e238      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 80020d0:	4ba4      	ldr	r3, [pc, #656]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x2ca>
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x2ec>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d060      	beq.n	80021ae <HAL_RCC_OscConfig+0x3ba>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((sysclk_source == RCC_CFGR_SWS_HSI)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x30a>
				|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d119      	bne.n	800212c <HAL_RCC_OscConfig+0x338>
						&& (pll_config == RCC_PLLSOURCE_HSI))) {
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x338>
			/* When HSI is used as system clock it will not be disabled */
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fe:	4b99      	ldr	r3, [pc, #612]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x322>
					&& (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x322>
				return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e215      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8002116:	4b93      	ldr	r3, [pc, #588]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	498f      	ldr	r1, [pc, #572]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	e040      	b.n	80021ae <HAL_RCC_OscConfig+0x3ba>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_RCC_OscConfig+0x388>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8002134:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002140:	f7fe fa26 	bl	8000590 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x366>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002148:	f7fe fa22 	bl	8000590 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x366>
						return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1f3      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 800215a:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x354>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8002166:	4b7f      	ldr	r3, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	497b      	ldr	r1, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x3ba>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a78      	ldr	r2, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002188:	f7fe fa02 	bl	8000590 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3ae>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002190:	f7fe f9fe 	bl	8000590 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3ae>
						return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1cf      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 80021a2:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x39c>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03c      	beq.n	8002234 <HAL_RCC_OscConfig+0x440>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01c      	beq.n	80021fc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 80021c2:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80021d2:	f7fe f9dd 	bl	8000590 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x3f8>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80021da:	f7fe f9d9 	bl	8000590 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3f8>
					return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1aa      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <HAL_RCC_OscConfig+0x3e6>
 80021fa:	e01b      	b.n	8002234 <HAL_RCC_OscConfig+0x440>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002202:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800220c:	f7fe f9c0 	bl	8000590 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x432>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002214:	f7fe f9bc 	bl	8000590 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x432>
					return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e18d      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8002226:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ef      	bne.n	8002214 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a5 	beq.w	800238c <HAL_RCC_OscConfig+0x598>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	77fb      	strb	r3, [r7, #31]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN)) {
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x47a>
			__HAL_RCC_PWR_CLK_ENABLE()
 8002252:	4b44      	ldr	r3, [pc, #272]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a43      	ldr	r2, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
			;
			pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCC_OscConfig+0x574>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x4b8>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x574>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a3a      	ldr	r2, [pc, #232]	; (8002368 <HAL_RCC_OscConfig+0x574>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8002286:	f7fe f983 	bl	8000590 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ac>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800228e:	f7fe f97f 	bl	8000590 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x4ac>
					return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e150      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x574>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d108      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4d2>
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c4:	e024      	b.n	8002310 <HAL_RCC_OscConfig+0x51c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d110      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4fc>
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_OscConfig+0x51c>
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <HAL_RCC_OscConfig+0x552>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002318:	f7fe f93a 	bl	8000590 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x542>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002320:	f7fe f936 	bl	8000590 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x542>
					return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e105      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x570>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ed      	beq.n	8002320 <HAL_RCC_OscConfig+0x52c>
 8002344:	e019      	b.n	800237a <HAL_RCC_OscConfig+0x586>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002346:	f7fe f923 	bl	8000590 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 800234c:	e00e      	b.n	800236c <HAL_RCC_OscConfig+0x578>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800234e:	f7fe f91f 	bl	8000590 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d905      	bls.n	800236c <HAL_RCC_OscConfig+0x578>
					return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0ee      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 800236c:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x758>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e9      	bne.n	800234e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x598>
			__HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4a71      	ldr	r2, [pc, #452]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

	if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80d5 	beq.w	8002540 <HAL_RCC_OscConfig+0x74c>
		/* Check if the PLL is used as system clock or not */
		if (sysclk_source != RCC_CFGR_SWS_PLL) {
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	f000 808e 	beq.w	80024ba <HAL_RCC_OscConfig+0x6c6>
			if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d15b      	bne.n	800245e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80023a6:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80023ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80023b2:	f7fe f8ed 	bl	8000590 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x5d8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80023ba:	f7fe f8e9 	bl	8000590 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x5d8>
						return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0ba      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80023cc:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x5c6>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x75c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023e8:	3a01      	subs	r2, #1
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f2:	0212      	lsls	r2, r2, #8
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023fa:	0852      	lsrs	r2, r2, #1
 80023fc:	3a01      	subs	r2, #1
 80023fe:	0552      	lsls	r2, r2, #21
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002406:	0852      	lsrs	r2, r2, #1
 8002408:	3a01      	subs	r2, #1
 800240a:	0652      	lsls	r2, r2, #25
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002412:	0912      	lsrs	r2, r2, #4
 8002414:	0452      	lsls	r2, r2, #17
 8002416:	430a      	orrs	r2, r1
 8002418:	494c      	ldr	r1, [pc, #304]	; (800254c <HAL_RCC_OscConfig+0x758>)
 800241a:	4313      	orrs	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
#endif
						RCC_OscInitStruct->PLL.PLLQ,
						RCC_OscInitStruct->PLL.PLLR);

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800241e:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4a      	ldr	r2, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002428:	6013      	str	r3, [r2, #0]

				/* Enable PLL System Clock output. */
				__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_RCC_OscConfig+0x758>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a47      	ldr	r2, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002434:	60d3      	str	r3, [r2, #12]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002436:	f7fe f8ab 	bl	8000590 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x65c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800243e:	f7fe f8a7 	bl	8000590 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x65c>
						return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e078      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x64a>
 800245c:	e070      	b.n	8002540 <HAL_RCC_OscConfig+0x74c>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3a      	ldr	r2, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002468:	6013      	str	r3, [r2, #0]

				/* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
				if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY))
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_RCC_OscConfig+0x758>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x68e>
						== 0U) {
					MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC,
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a34      	ldr	r2, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x758>)
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
				__HAL_RCC_PLLCLKOUT_DISABLE(
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a31      	ldr	r2, [pc, #196]	; (800254c <HAL_RCC_OscConfig+0x758>)
 8002488:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002492:	f7fe f87d 	bl	8000590 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x6b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800249a:	f7fe f879 	bl	8000590 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x6b8>
						return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e04a      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x6a6>
 80024b8:	e042      	b.n	8002540 <HAL_RCC_OscConfig+0x74c>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x6d2>
				return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e03d      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
			} else {
				pll_config = RCC->PLLCFGR;
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCC_OscConfig+0x758>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	617b      	str	r3, [r7, #20]
				/* Do not return HAL_ERROR if request repeats the current configuration */
				if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0203 	and.w	r2, r3, #3
						!= RCC_OscInitStruct->PLL.PLLSource)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d130      	bne.n	800253c <HAL_RCC_OscConfig+0x748>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
								!= ((RCC_OscInitStruct->PLL.PLLM - 1U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLM_Pos))
 80024e6:	011b      	lsls	r3, r3, #4
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d127      	bne.n	800253c <HAL_RCC_OscConfig+0x748>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
								!= (RCC_OscInitStruct->PLL.PLLN
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
										<< RCC_PLLCFGR_PLLN_Pos))
 80024f6:	021b      	lsls	r3, r3, #8
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d11f      	bne.n	800253c <HAL_RCC_OscConfig+0x748>
						||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
						(READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
								!= ((RCC_OscInitStruct->PLL.PLLP
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b92      	ldr	r2, [r2, #56]	; 0x38
										== RCC_PLLP_DIV7) ? 0U : 1U))
 8002506:	2a07      	cmp	r2, #7
 8002508:	bf14      	ite	ne
 800250a:	2201      	movne	r2, #1
 800250c:	2200      	moveq	r2, #0
 800250e:	b2d2      	uxtb	r2, r2
						||
 8002510:	4293      	cmp	r3, r2
 8002512:	d113      	bne.n	800253c <HAL_RCC_OscConfig+0x748>
						||
#endif
#endif
						(READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
								!= ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLQ_Pos))
 8002522:	055b      	lsls	r3, r3, #21
						||
 8002524:	429a      	cmp	r2, r3
 8002526:	d109      	bne.n	800253c <HAL_RCC_OscConfig+0x748>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
								!= ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLR_Pos))) {
 8002536:	065b      	lsls	r3, r3, #25
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x74c>
					return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x74e>
				}
			}
		}
	}
	return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	f99d808c 	.word	0xf99d808c

08002554 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
	HAL_StatusTypeDef status;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0c8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4961      	ldr	r1, [pc, #388]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
		}
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d04c      	beq.n	800263e <HAL_RCC_ClockConfig+0xea>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* PLL is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x68>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 80025ac:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d121      	bne.n	80025fc <HAL_RCC_ClockConfig+0xa8>
				return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e09e      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
#endif
		} else {
			/* HSE is selected as System Clock Source */
			if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x80>
				/* Check the HSE ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <HAL_RCC_ClockConfig+0xa8>
					return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e092      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
				}
			}
			/* MSI is selected as System Clock Source */
			else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0x98>
				/* Check the MSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U) {
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_RCC_ClockConfig+0xa8>
					return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e086      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
				}
			}
			/* HSI is selected as System Clock Source */
			else {
				/* Check the HSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0xa8>
					return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e07e      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025fc:	4b42      	ldr	r3, [pc, #264]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 0203 	bic.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	493f      	ldr	r1, [pc, #252]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800260e:	f7fd ffbf 	bl	8000590 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002614:	e00a      	b.n	800262c <HAL_RCC_ClockConfig+0xd8>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002616:	f7fd ffbb 	bl	8000590 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_ClockConfig+0xd8>
				return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e066      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800263a:	429a      	cmp	r2, r3
 800263c:	d1eb      	bne.n	8002616 <HAL_RCC_ClockConfig+0xc2>
			}
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCC_ClockConfig+0x108>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	492c      	ldr	r1, [pc, #176]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d210      	bcs.n	800268c <HAL_RCC_ClockConfig+0x138>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	4924      	ldr	r1, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x138>
			return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e036      	b.n	80026fa <HAL_RCC_ClockConfig+0x1a6>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x156>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4918      	ldr	r1, [pc, #96]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x176>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4910      	ldr	r1, [pc, #64]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80026ca:	f000 f825 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026ce:	4601      	mov	r1, r0
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
					>> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026de:	f003 031f 	and.w	r3, r3, #31
			>> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE)
 80026e2:	fa21 f303 	lsr.w	r3, r1, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	status = HAL_InitTick(uwTickPrio);
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff02 	bl	80004f8 <HAL_InitTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	72fb      	strb	r3, [r7, #11]

	return status;
 80026f8:	7afb      	ldrb	r3, [r7, #11]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	080072ec 	.word	0x080072ec
 8002710:	20000008 	.word	0x20000008
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
	uint32_t msirange = 0U, sysclockfreq = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
	uint32_t pllvco, pllsource, pllr, pllm; /* no init needed */
	uint32_t sysclk_source, pll_oscsource;

	sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	613b      	str	r3, [r7, #16]
	pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	60fb      	str	r3, [r7, #12]

	if ((sysclk_source == RCC_CFGR_SWS_MSI)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x34>
			|| ((sysclk_source == RCC_CFGR_SWS_PLL)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d121      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
					&& (pll_oscsource == RCC_PLLSOURCE_MSI))) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d11e      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
		/* MSI or PLL with MSI source used as system clock source */

		/* Get SYSCLK source */
		if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U) { /* MSISRANGE from RCC_CSR applies */
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0x50>
			msirange = READ_BIT(RCC->CSR,
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
					RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800275e:	0a1b      	lsrs	r3, r3, #8
			msirange = READ_BIT(RCC->CSR,
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e005      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x5c>
		} else { /* MSIRANGE from RCC_CR applies */
			msirange =
					READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	091b      	lsrs	r3, r3, #4
			msirange =
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	61fb      	str	r3, [r7, #28]
		}
		/*MSI frequency range in HZ*/
		msirange = MSIRangeTable[msirange];
 8002774:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	61fb      	str	r3, [r7, #28]

		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
			/* MSI used as system clock source */
			sysclockfreq = msirange;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	61bb      	str	r3, [r7, #24]
		if (sysclk_source == RCC_CFGR_SWS_MSI) {
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
		}
	} else if (sysclk_source == RCC_CFGR_SWS_HSI) {
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d102      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x7e>
		/* HSI used as system clock source */
		sysclockfreq = HSI_VALUE;
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	e004      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
	} else if (sysclk_source == RCC_CFGR_SWS_HSE) {
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_GetSysClockFreq+0x110>)
 800279e:	61bb      	str	r3, [r7, #24]
	} else {
		/* unexpected case: sysclockfreq at 0 */
	}

	if (sysclk_source == RCC_CFGR_SWS_PLL) {
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d133      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0xf6>
		/* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	60bb      	str	r3, [r7, #8]

		switch (pllsource) {
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0xa4>
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80027ba:	e005      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xb0>
		case RCC_PLLSOURCE_HSI: /* HSI used as PLL clock source */
			pllvco = HSI_VALUE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027be:	617b      	str	r3, [r7, #20]
			break;
 80027c0:	e005      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb6>

		case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
			pllvco = HSE_VALUE;
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c4:	617b      	str	r3, [r7, #20]
			break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb6>

		case RCC_PLLSOURCE_MSI: /* MSI used as PLL clock source */
		default:
			pllvco = msirange;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	617b      	str	r3, [r7, #20]
			break;
 80027cc:	bf00      	nop
		}
		pllm =
				(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 80027d0:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0307 	and.w	r3, r3, #7
		pllm =
 80027d8:	3301      	adds	r3, #1
 80027da:	607b      	str	r3, [r7, #4]
		pllvco = (pllvco
				* (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN)
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 80027de:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
				* (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN)
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	fb02 f203 	mul.w	r2, r2, r3
		pllvco = (pllvco
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_GetSysClockFreq+0x104>)
 80027f6:	68db      	ldr	r3, [r3, #12]
				>> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80027f8:	0e5b      	lsrs	r3, r3, #25
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
		pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	603b      	str	r3, [r7, #0]
		sysclockfreq = pllvco / pllr;
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	61bb      	str	r3, [r7, #24]
	}

	return sysclockfreq;
 800280e:	69bb      	ldr	r3, [r7, #24]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3724      	adds	r7, #36	; 0x24
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	08007304 	.word	0x08007304
 8002824:	00f42400 	.word	0x00f42400
 8002828:	007a1200 	.word	0x007a1200

0800282c <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008

08002844 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Return the PCLK1 frequency.
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4601      	mov	r1, r0
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002850:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0307 	and.w	r3, r3, #7
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_RCC_GetPCLK1Freq+0x28>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
					>> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800285c:	f003 031f 	and.w	r3, r3, #31
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1)
 8002860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	080072fc 	.word	0x080072fc

08002870 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Return the PCLK2 frequency.
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002874:	f7ff ffda 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002878:	4601      	mov	r1, r0
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800287c:	689b      	ldr	r3, [r3, #8]
					>> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	f003 0307 	and.w	r3, r3, #7
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
					>> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002888:	f003 031f 	and.w	r3, r3, #31
			>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2)
 800288c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	080072fc 	.word	0x080072fc

0800289c <RCC_SetFlashLatencyFromMSIRange>:
 * @brief  Update number of Flash wait states in line with MSI range and current
 voltage range.
 * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
 * @retval HAL status
 */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	uint32_t vos;
	uint32_t latency = FLASH_LATENCY_0; /* default value 0WS */
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]

	if (__HAL_RCC_PWR_IS_CLK_ENABLED()) {
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <RCC_SetFlashLatencyFromMSIRange+0x20>
		vos = HAL_PWREx_GetVoltageRange();
 80028b4:	f7ff fa3a 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 80028b8:	6178      	str	r0, [r7, #20]
 80028ba:	e014      	b.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
	} else {
		__HAL_RCC_PWR_CLK_ENABLE()
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
		;
		vos = HAL_PWREx_GetVoltageRange();
 80028d4:	f7ff fa2a 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 80028d8:	6178      	str	r0, [r7, #20]
		__HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
	}

	if (vos == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ec:	d10b      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
		if (msirange > RCC_MSIRANGE_8) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d919      	bls.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			/* MSI > 16Mhz */
			if (msirange > RCC_MSIRANGE_10) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2ba0      	cmp	r3, #160	; 0xa0
 80028f8:	d902      	bls.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x64>
				/* MSI 48Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 80028fa:	2302      	movs	r3, #2
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e013      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else {
				/* MSI 24Mhz or 32Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 8002900:	2301      	movs	r3, #1
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e010      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
		if (msirange > RCC_MSIRANGE_8) {
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d902      	bls.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x76>
			/* MSI > 16Mhz */
			latency = FLASH_LATENCY_3; /* 3WS */
 800290c:	2303      	movs	r3, #3
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e00a      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
		} else {
			if (msirange == RCC_MSIRANGE_8) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d102      	bne.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x82>
				/* MSI 16Mhz */
				latency = FLASH_LATENCY_2; /* 2WS */
 8002918:	2302      	movs	r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e004      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
			} else if (msirange == RCC_MSIRANGE_7) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d101      	bne.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
				/* MSI 8Mhz */
				latency = FLASH_LATENCY_1; /* 1WS */
 8002924:	2301      	movs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
			/* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
		}
#endif
	}

	__HAL_FLASH_SET_LATENCY(latency);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0207 	bic.w	r2, r3, #7
 8002930:	4909      	ldr	r1, [pc, #36]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

	/* Check that the new number of wait states is taken into account to access the Flash
	 memory by reading the FLASH_ACR register */
	if (__HAL_FLASH_GET_LATENCY() != latency) {
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <RCC_SetFlashLatencyFromMSIRange+0xae>
		return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <RCC_SetFlashLatencyFromMSIRange+0xb0>
	}

	return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_RCCEx_PeriphCLKConfig>:
 *         the RTC clock source: in this case the access to Backup domain is enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	uint32_t tmpregister, tickstart; /* no init needed */
	HAL_StatusTypeDef ret = HAL_OK; /* Intermediate status */
 8002964:	2300      	movs	r3, #0
 8002966:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8002968:	2300      	movs	r3, #0
 800296a:	74bb      	strb	r3, [r7, #18]
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

	/*-------------------------- SAI1 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03f      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
			== RCC_PERIPHCLK_SAI1)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

		switch (PeriphClkInit->Sai1ClockSelection) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002980:	d01c      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002986:	d802      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800298c:	e01f      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800298e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002992:	d003      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002994:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002998:	d01c      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800299a:	e018      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x72>
		case RCC_SAI1CLKSOURCE_PLL: /* PLL is used as clock source for SAI1*/
			/* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800299c:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a84      	ldr	r2, [pc, #528]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
			/* SAI1 clock source config set later after clock selection check */
			break;
 80029a8:	e015      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

		case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fab9 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI1 clock source config set later after clock selection check */
			break;
 80029ba:	e00c      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

		case RCC_SAI1CLKSOURCE_PLLSAI2: /* PLLSAI2 is used as clock source for SAI1*/
			/* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3320      	adds	r3, #32
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fba0 	bl	8003108 <RCCEx_PLLSAI2_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI1 clock source config set later after clock selection check */
			break;
 80029cc:	e003      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI1 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	74fb      	strb	r3, [r7, #19]
			break;
 80029d2:	e000      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
			break;
 80029d4:	bf00      	nop
		}

		if (ret == HAL_OK) {
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
			/* Set the source of SAI1 clock*/
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ea:	4972      	ldr	r1, [pc, #456]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029f2:	e001      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
		} else {
			/* set overall return value */
			status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

	/*-------------------------- SAI2 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d03f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x128>
			== RCC_PERIPHCLK_SAI2)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

		switch (PeriphClkInit->Sai2ClockSelection) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0c:	d01c      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a12:	d802      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a18:	e01f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a24:	d01c      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a26:	e018      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
		case RCC_SAI2CLKSOURCE_PLL: /* PLL is used as clock source for SAI2*/
			/* Enable SAI Clock output generated form System PLL . */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a61      	ldr	r2, [pc, #388]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	60d3      	str	r3, [r2, #12]
			/* SAI2 clock source config set later after clock selection check */
			break;
 8002a34:	e015      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x106>

		case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
			/* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fa73 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI2 clock source config set later after clock selection check */
			break;
 8002a46:	e00c      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x106>

		case RCC_SAI2CLKSOURCE_PLLSAI2: /* PLLSAI2 is used as clock source for SAI2*/
			/* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3320      	adds	r3, #32
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb5a 	bl	8003108 <RCCEx_PLLSAI2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]
					DIVIDER_P_UPDATE);
			/* SAI2 clock source config set later after clock selection check */
			break;
 8002a58:	e003      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
			/* SAI2 clock source config set later after clock selection check */
			break;

		default:
			ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	74fb      	strb	r3, [r7, #19]
			break;
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x106>
			break;
 8002a60:	bf00      	nop
		}

		if (ret == HAL_OK) {
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x124>
			/* Set the source of SAI2 clock*/
			__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a68:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a76:	494f      	ldr	r1, [pc, #316]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x128>
		} else {
			/* set overall return value */
			status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
		}
	}
#endif /* SAI2 */

	/*-------------------------- RTC clock source configuration ----------------------*/
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a0 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x276>
			== RCC_PERIPHCLK_RTC) {
		FlagStatus pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	747b      	strb	r3, [r7, #17]

		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
			__HAL_RCC_PWR_CLK_ENABLE()
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a40      	ldr	r2, [pc, #256]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
			;
			pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	747b      	strb	r3, [r7, #17]
		}

		/* Enable write access to Backup domain */
		SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection disable */
		tickstart = HAL_GetTick();
 8002ad4:	f7fd fd5c 	bl	8000590 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 8002ada:	e009      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x194>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002adc:	f7fd fd58 	bl	8000590 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d902      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x194>
				ret = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	74fb      	strb	r3, [r7, #19]
				break;
 8002aee:	e005      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x180>
			}
		}

		if (ret == HAL_OK) {
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d15c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x260>
			/* Reset the Backup domain only if the RTC Clock source selection is modified from default */
			tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0c:	617b      	str	r3, [r7, #20]

			if ((tmpregister != RCC_RTCCLKSOURCE_NONE)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
					&& (tmpregister != PeriphClkInit->RTCClockSelection)) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d019      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
				/* Store the content of BDCR register before the reset of Backup Domain */
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2a:	617b      	str	r3, [r7, #20]
				/* RTC Clock selection can be changed only if the Backup Domain is reset */
				__HAL_RCC_BACKUPRESET_FORCE();
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				__HAL_RCC_BACKUPRESET_RELEASE();
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				/* Restore the Content of BDCR register */
				RCC->BDCR = tmpregister;
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			}

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x230>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002b5e:	f7fd fd17 	bl	8000590 <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]

				/* Wait till LSE is ready */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8002b64:	e00b      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x222>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002b66:	f7fd fd13 	bl	8000590 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d902      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x222>
						ret = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	74fb      	strb	r3, [r7, #19]
						break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x230>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ec      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
					}
				}
			}

			if (ret == HAL_OK) {
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x250>
				/* Apply new RTC clock source selection */
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba2:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002baa:	e009      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
			} else {
				/* set overall return value */
				status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
			}
		} else {
			/* set overall return value */
			status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8002bc0:	7c7b      	ldrb	r3, [r7, #17]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x276>
			__HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	4a9d      	ldr	r2, [pc, #628]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
		}
	}

	/*-------------------------- USART1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bde:	4b98      	ldr	r3, [pc, #608]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f023 0203 	bic.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	4994      	ldr	r1, [pc, #592]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- USART2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c00:	4b8f      	ldr	r3, [pc, #572]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 020c 	bic.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	498c      	ldr	r1, [pc, #560]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#if defined(USART3)

	/*-------------------------- USART3 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c22:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	4983      	ldr	r1, [pc, #524]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

	/*-------------------------- UART4 clock source configuration --------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
			== RCC_PERIPHCLK_UART4) {
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	497b      	ldr	r1, [pc, #492]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

	/*-------------------------- UART5 clock source configuration --------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x320>
			== RCC_PERIPHCLK_UART5) {
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	4972      	ldr	r1, [pc, #456]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#endif /* UART5 */

	/*-------------------------- LPUART1 clock source configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x342>
		/* Check the parameters */
		assert_param(
				IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

		/* Configure the LPUAR1 clock source */
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c88:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	496a      	ldr	r1, [pc, #424]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x364>
			== (RCC_PERIPHCLK_LPTIM1)) {
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	4961      	ldr	r1, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- LPTIM2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x386>
			== (RCC_PERIPHCLK_LPTIM2)) {
		assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ccc:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	4959      	ldr	r1, [pc, #356]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

	/*-------------------------- I2C1 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	4950      	ldr	r1, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#if defined(I2C2)

	/*-------------------------- I2C2 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
			== RCC_PERIPHCLK_I2C2) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d10:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	4948      	ldr	r1, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	}

#endif /* I2C2 */

	/*-------------------------- I2C3 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
			== RCC_PERIPHCLK_I2C3) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	493f      	ldr	r1, [pc, #252]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

	/*-------------------------- USB clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d028      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
			== (RCC_PERIPHCLK_USB)) {
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x426>
			/* Enable PLL48M1CLK output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a31      	ldr	r2, [pc, #196]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	e011      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
		} else {
#if defined(RCC_PLLSAI1_SUPPORT)
			if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
				/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
				ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f8c8 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	74fb      	strb	r3, [r7, #19]
						DIVIDER_Q_UPDATE);

				if (ret != HAL_OK) {
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
					/* set overall return value */
					status = ret;
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

	/*-------------------------- SDMMC1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
			== (RCC_PERIPHCLK_SDMMC1)) {
		assert_param(
				IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	491f      	ldr	r1, [pc, #124]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL) /* PLL "Q" ? */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x484>
		{
			/* Enable PLL48M1CLK output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ddc:	60d3      	str	r3, [r2, #12]
 8002dde:	e011      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
		else if (PeriphClkInit->Sdmmc1ClockSelection
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
				== RCC_SDMMC1CLKSOURCE_PLLSAI1) {
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f899 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
					DIVIDER_Q_UPDATE);

			if (ret != HAL_OK) {
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
				/* set overall return value */
				status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
	}

#endif /* SDMMC1 */

	/*-------------------------- RNG clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02b      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
			== (RCC_PERIPHCLK_RNG)) {
		assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
			/* Enable PLL48M1CLK output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a02      	ldr	r2, [pc, #8]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e3a:	60d3      	str	r3, [r2, #12]
 8002e3c:	e014      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
		}
#if defined(RCC_PLLSAI1_SUPPORT)
		else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
			/* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f867 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]
					DIVIDER_Q_UPDATE);

			if (ret != HAL_OK) {
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
				/* set overall return value */
				status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
		}
	}

	/*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02f      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x578>
			== RCC_PERIPHCLK_ADC) {
		/* Check the parameters */
		assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC interface clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e82:	4928      	ldr	r1, [pc, #160]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x554>
			/* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f844 	bl	8002f28 <RCCEx_PLLSAI1_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]
					DIVIDER_R_UPDATE);

			if (ret != HAL_OK) {
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d014      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x578>
				/* set overall return value */
				status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
 8002eae:	e011      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x578>
		}
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

		else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x578>
			/* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3320      	adds	r3, #32
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f921 	bl	8003108 <RCCEx_PLLSAI2_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
					DIVIDER_R_UPDATE);

			if (ret != HAL_OK) {
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x578>
				/* set overall return value */
				status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

	/*-------------------------- SWPMI1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
		/* Check the parameters */
		assert_param(
				IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

		/* Configure the SWPMI1 clock source */
		__HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eee:	490d      	ldr	r1, [pc, #52]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

	/*-------------------------- DFSDM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

		/* Configure the DFSDM1 interface clock source */
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

	return status;
 8002f1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <RCCEx_PLLSAI1_Config>:
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1,
		uint32_t Divider) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
	assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

	/* Check that PLLSAI1 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8002f36:	4b73      	ldr	r3, [pc, #460]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <RCCEx_PLLSAI1_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f42:	4b70      	ldr	r3, [pc, #448]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0203 	and.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d10d      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x46>
				|| (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d044      	beq.n	8002ff8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
				) {
			status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	e041      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xd0>
		}
	} else {
		/* Check PLLSAI1 clock source availability */
		switch (PllSai1->PLLSAI1Source) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d00c      	beq.n	8002f96 <RCCEx_PLLSAI1_Config+0x6e>
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d013      	beq.n	8002fa8 <RCCEx_PLLSAI1_Config+0x80>
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d120      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0x9e>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8002f84:	4b5f      	ldr	r3, [pc, #380]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11d      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0xa4>
				status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002f94:	e01a      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0xa4>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xa8>
				status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002fa6:	e013      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xa8>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 8002fa8:	4b56      	ldr	r3, [pc, #344]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0xac>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0xac>
					status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 8002fc4:	e006      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0xac>
		default:
			status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
			break;
 8002fca:	e004      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xae>
			break;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xae>
			break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xae>
			break;
 8002fd4:	bf00      	nop
		}

		if (status == HAL_OK) {
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
			/* Set PLLSAI1 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 8002fdc:	4b49      	ldr	r3, [pc, #292]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	4944      	ldr	r1, [pc, #272]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
					PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d17d      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x1d2>
		/* Disable the PLLSAI1 */
		__HAL_RCC_PLLSAI1_DISABLE();
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003008:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800300a:	f7fd fac1 	bl	8000590 <HAL_GetTick>
 800300e:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 8003010:	e009      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xfe>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8003012:	f7fd fabd 	bl	8000590 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d902      	bls.n	8003026 <RCCEx_PLLSAI1_Config+0xfe>
				status = HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	73fb      	strb	r3, [r7, #15]
				break;
 8003024:	e005      	b.n	8003032 <RCCEx_PLLSAI1_Config+0x10a>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 8003026:	4b37      	ldr	r3, [pc, #220]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ef      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0xea>
			}
		}

		if (status == HAL_OK) {
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d160      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x1d2>
			if (Divider == DIVIDER_P_UPDATE) {
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d111      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
				MODIFY_REG(RCC->PLLSAI1CFGR,
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	0211      	lsls	r1, r2, #8
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	0912      	lsrs	r2, r2, #4
 8003056:	0452      	lsls	r2, r2, #17
 8003058:	430a      	orrs	r2, r1
 800305a:	492a      	ldr	r1, [pc, #168]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	610b      	str	r3, [r1, #16]
 8003060:	e027      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0x18a>
						RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P,
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			} else if (Divider == DIVIDER_Q_UPDATE) {
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d112      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR,
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	0211      	lsls	r1, r2, #8
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6912      	ldr	r2, [r2, #16]
 800307e:	0852      	lsrs	r2, r2, #1
 8003080:	3a01      	subs	r2, #1
 8003082:	0552      	lsls	r2, r2, #21
 8003084:	430a      	orrs	r2, r1
 8003086:	491f      	ldr	r1, [pc, #124]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	610b      	str	r3, [r1, #16]
 800308c:	e011      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
				/* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR,
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003096:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6892      	ldr	r2, [r2, #8]
 800309e:	0211      	lsls	r1, r2, #8
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6952      	ldr	r2, [r2, #20]
 80030a4:	0852      	lsrs	r2, r2, #1
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0652      	lsls	r2, r2, #25
 80030aa:	430a      	orrs	r2, r1
 80030ac:	4915      	ldr	r1, [pc, #84]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	610b      	str	r3, [r1, #16]
						(PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
			__HAL_RCC_PLLSAI1_ENABLE();
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030bc:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80030be:	f7fd fa67 	bl	8000590 <HAL_GetTick>
 80030c2:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI1 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80030c4:	e009      	b.n	80030da <RCCEx_PLLSAI1_Config+0x1b2>
				if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80030c6:	f7fd fa63 	bl	8000590 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d902      	bls.n	80030da <RCCEx_PLLSAI1_Config+0x1b2>
					status = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	73fb      	strb	r3, [r7, #15]
					break;
 80030d8:	e005      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0x1be>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ef      	beq.n	80030c6 <RCCEx_PLLSAI1_Config+0x19e>
				}
			}

			if (status == HAL_OK) {
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x1d2>
				/* Configure the PLLSAI1 Clock output(s) */
				__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
			}
		}
	}

	return status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000

08003108 <RCCEx_PLLSAI2_Config>:
 * @note   PLLSAI2 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2,
		uint32_t Divider) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
	assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
	assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

	/* Check that PLLSAI2 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8003116:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <RCCEx_PLLSAI2_Config+0x4c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0203 	and.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d10d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0x46>
				|| (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800313c:	68db      	ldr	r3, [r3, #12]
						>> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
				|| (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM)
 800314a:	429a      	cmp	r2, r3
 800314c:	d044      	beq.n	80031d8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
				) {
			status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e041      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0xd0>
		}
	} else {
		/* Check PLLSAI2 clock source availability */
		switch (PllSai2->PLLSAI2Source) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d00c      	beq.n	8003176 <RCCEx_PLLSAI2_Config+0x6e>
 800315c:	2b03      	cmp	r3, #3
 800315e:	d013      	beq.n	8003188 <RCCEx_PLLSAI2_Config+0x80>
 8003160:	2b01      	cmp	r3, #1
 8003162:	d120      	bne.n	80031a6 <RCCEx_PLLSAI2_Config+0x9e>
		case RCC_PLLSOURCE_MSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8003164:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <RCCEx_PLLSAI2_Config+0xa4>
				status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003174:	e01a      	b.n	80031ac <RCCEx_PLLSAI2_Config+0xa4>
		case RCC_PLLSOURCE_HSI:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 8003176:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0xa8>
				status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003186:	e013      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0xa8>
		case RCC_PLLSOURCE_HSE:
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <RCCEx_PLLSAI2_Config+0xac>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 8003194:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <RCCEx_PLLSAI2_Config+0xac>
					status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
				}
			}
			break;
 80031a4:	e006      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0xac>
		default:
			status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
			break;
 80031aa:	e004      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xae>
			break;
 80031ac:	bf00      	nop
 80031ae:	e002      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xae>
			break;
 80031b0:	bf00      	nop
 80031b2:	e000      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xae>
			break;
 80031b4:	bf00      	nop
		}

		if (status == HAL_OK) {
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
			/* Set PLLSAI2 clock source and divider M */
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM,
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	430b      	orrs	r3, r1
 80031d2:	4939      	ldr	r1, [pc, #228]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
					PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
		}
	}

	if (status == HAL_OK) {
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d167      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0x1a6>
		/* Disable the PLLSAI2 */
		__HAL_RCC_PLLSAI2_DISABLE();
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80031ea:	f7fd f9d1 	bl	8000590 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI2 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U) {
 80031f0:	e009      	b.n	8003206 <RCCEx_PLLSAI2_Config+0xfe>
			if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 80031f2:	f7fd f9cd 	bl	8000590 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d902      	bls.n	8003206 <RCCEx_PLLSAI2_Config+0xfe>
				status = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	73fb      	strb	r3, [r7, #15]
				break;
 8003204:	e005      	b.n	8003212 <RCCEx_PLLSAI2_Config+0x10a>
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U) {
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ef      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xea>
			}
		}

		if (status == HAL_OK) {
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d14a      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0x1a6>
			if (Divider == DIVIDER_P_UPDATE) {
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d111      	bne.n	8003242 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
				MODIFY_REG(RCC->PLLSAI2CFGR,
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	0211      	lsls	r1, r2, #8
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68d2      	ldr	r2, [r2, #12]
 8003234:	0912      	lsrs	r2, r2, #4
 8003236:	0452      	lsls	r2, r2, #17
 8003238:	430a      	orrs	r2, r1
 800323a:	491f      	ldr	r1, [pc, #124]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	614b      	str	r3, [r1, #20]
 8003240:	e011      	b.n	8003266 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
				/* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI2CFGR,
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800324a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	0211      	lsls	r1, r2, #8
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6912      	ldr	r2, [r2, #16]
 8003258:	0852      	lsrs	r2, r2, #1
 800325a:	3a01      	subs	r2, #1
 800325c:	0652      	lsls	r2, r2, #25
 800325e:	430a      	orrs	r2, r1
 8003260:	4915      	ldr	r1, [pc, #84]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	614b      	str	r3, [r1, #20]
						(PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) | (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
			__HAL_RCC_PLLSAI2_ENABLE();
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8003272:	f7fd f98d 	bl	8000590 <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

			/* Wait till PLLSAI2 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 8003278:	e009      	b.n	800328e <RCCEx_PLLSAI2_Config+0x186>
				if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 800327a:	f7fd f989 	bl	8000590 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <RCCEx_PLLSAI2_Config+0x186>
					status = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	73fb      	strb	r3, [r7, #15]
					break;
 800328c:	e005      	b.n	800329a <RCCEx_PLLSAI2_Config+0x192>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ef      	beq.n	800327a <RCCEx_PLLSAI2_Config+0x172>
				}
			}

			if (status == HAL_OK) {
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0x1a6>
				/* Configure the PLLSAI2 Clock output(s) */
				__HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	614b      	str	r3, [r1, #20]
			}
		}
	}

	return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	uint32_t frxth;

	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07c      	b.n	80033c8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_SPI_Init+0x32>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f003 fcd3 	bl	8006c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	601a      	str	r2, [r3, #0]

	/* Align by default the rs fifo threshold on the data size */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800330e:	d902      	bls.n	8003316 <HAL_SPI_Init+0x5a>
		frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e002      	b.n	800331c <HAL_SPI_Init+0x60>
	} else {
		frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331a:	60fb      	str	r3, [r7, #12]
	}

	/* CRC calculation is valid only for 16Bit and 8 Bit */
	if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003324:	d007      	beq.n	8003336 <HAL_SPI_Init+0x7a>
			&& (hspi->Init.DataSize != SPI_DATASIZE_8BIT)) {
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Init+0x7a>
		/* CRC must be disabled */
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Align the CRC Length on the data size */
	if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10b      	bne.n	8003356 <HAL_SPI_Init+0x9a>
		/* CRC Length aligned on the data size : value set by default */
		if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003346:	d903      	bls.n	8003350 <HAL_SPI_Init+0x94>
			hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
 800334e:	e002      	b.n	8003356 <HAL_SPI_Init+0x9a>
		} else {
			hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	ea42 0103 	orr.w	r1, r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

	/* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
	WRITE_REG(hspi->Instance->CR2,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0204 	and.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	ea42 0103 	orr.w	r1, r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->State = HAL_SPI_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_SPI_Transmit>:
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_SPI_Transmit+0x22>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e150      	b.n	8003694 <HAL_SPI_Transmit+0x2c4>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 80033fa:	f7fd f8c9 	bl	8000590 <HAL_GetTick>
 80033fe:	61b8      	str	r0, [r7, #24]
	initial_TxXferCount = Size;
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	82fb      	strh	r3, [r7, #22]

	if (hspi->State != HAL_SPI_STATE_READY) {
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d002      	beq.n	8003416 <HAL_SPI_Transmit+0x46>
		errorcode = HAL_BUSY;
 8003410:	2302      	movs	r3, #2
 8003412:	77fb      	strb	r3, [r7, #31]
		goto error;
 8003414:	e135      	b.n	8003682 <HAL_SPI_Transmit+0x2b2>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0x52>
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <HAL_SPI_Transmit+0x58>
		errorcode = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	77fb      	strb	r3, [r7, #31]
		goto error;
 8003426:	e12c      	b.n	8003682 <HAL_SPI_Transmit+0x2b2>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pTxBuffPtr = (uint8_t *) pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = (uint8_t *) NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = 0U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->TxISR = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
	hspi->RxISR = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Configure communication direction : 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d107      	bne.n	8003484 <HAL_SPI_Transmit+0xb4>
		SPI_1LINE_TX(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003482:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_SPI_Transmit+0xd2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]
	}

	/* Transmit data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034aa:	d94b      	bls.n	8003544 <HAL_SPI_Transmit+0x174>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_Transmit+0xea>
				|| (initial_TxXferCount == 0x01U)) {
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d13e      	bne.n	8003538 <HAL_SPI_Transmit+0x168>
			hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		/* Transmit data in 16 Bit mode */
		while (hspi->TxXferCount > 0U) {
 80034de:	e02b      	b.n	8003538 <HAL_SPI_Transmit+0x168>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d112      	bne.n	8003514 <HAL_SPI_Transmit+0x144>
				hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	1c9a      	adds	r2, r3, #2
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003512:	e011      	b.n	8003538 <HAL_SPI_Transmit+0x168>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8003514:	f7fd f83c 	bl	8000590 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d803      	bhi.n	800352c <HAL_SPI_Transmit+0x15c>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x162>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Transmit+0x168>
					errorcode = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	77fb      	strb	r3, [r7, #31]
					goto error;
 8003536:	e0a4      	b.n	8003682 <HAL_SPI_Transmit+0x2b2>
		while (hspi->TxXferCount > 0U) {
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ce      	bne.n	80034e0 <HAL_SPI_Transmit+0x110>
 8003542:	e07c      	b.n	800363e <HAL_SPI_Transmit+0x26e>
			}
		}
	}
	/* Transmit data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_SPI_Transmit+0x182>
				|| (initial_TxXferCount == 0x01U)) {
 800354c:	8afb      	ldrh	r3, [r7, #22]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d170      	bne.n	8003634 <HAL_SPI_Transmit+0x264>
			if (hspi->TxXferCount > 1U) {
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d912      	bls.n	8003582 <HAL_SPI_Transmit+0x1b2>
				/* write on the data register in packing mode */
				hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b02      	subs	r3, #2
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003580:	e058      	b.n	8003634 <HAL_SPI_Transmit+0x264>
			} else {
				*((__IO uint8_t *) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while (hspi->TxXferCount > 0U) {
 80035a8:	e044      	b.n	8003634 <HAL_SPI_Transmit+0x264>
			/* Wait until TXE flag is set to send data */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d12b      	bne.n	8003610 <HAL_SPI_Transmit+0x240>
				if (hspi->TxXferCount > 1U) {
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d912      	bls.n	80035e8 <HAL_SPI_Transmit+0x218>
					/* write on the data register in packing mode */
					hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	881a      	ldrh	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	1c9a      	adds	r2, r3, #2
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b02      	subs	r3, #2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035e6:	e025      	b.n	8003634 <HAL_SPI_Transmit+0x264>
				} else {
					*((__IO uint8_t *) &hspi->Instance->DR) =
							(*hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
					*((__IO uint8_t *) &hspi->Instance->DR) =
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
							(*hspi->pTxBuffPtr);
 80035f2:	7812      	ldrb	r2, [r2, #0]
					*((__IO uint8_t *) &hspi->Instance->DR) =
 80035f4:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360e:	e011      	b.n	8003634 <HAL_SPI_Transmit+0x264>
				}
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8003610:	f7fc ffbe 	bl	8000590 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d803      	bhi.n	8003628 <HAL_SPI_Transmit+0x258>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d102      	bne.n	800362e <HAL_SPI_Transmit+0x25e>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Transmit+0x264>
					errorcode = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	77fb      	strb	r3, [r7, #31]
					goto error;
 8003632:	e026      	b.n	8003682 <HAL_SPI_Transmit+0x2b2>
		while (hspi->TxXferCount > 0U) {
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1b5      	bne.n	80035aa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fc94 	bl	8003f70 <SPI_EndRxTxTransaction>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Transmit+0x284>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_SPI_Transmit+0x2a2>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
	}

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0x2b0>
		errorcode = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e000      	b.n	8003682 <HAL_SPI_Transmit+0x2b2>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8003680:	bf00      	nop
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Process Unlocked */
	__HAL_UNLOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8003692:	7ffb      	ldrb	r3, [r7, #31]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_SPI_Receive>:
 * @param  Size amount of data to be received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	75fb      	strb	r3, [r7, #23]

	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b8:	d112      	bne.n	80036e0 <HAL_SPI_Receive+0x44>
			&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10e      	bne.n	80036e0 <HAL_SPI_Receive+0x44>
		hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2204      	movs	r2, #4
 80036c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		/* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
		return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f908 	bl	80038ec <HAL_SPI_TransmitReceive>
 80036dc:	4603      	mov	r3, r0
 80036de:	e101      	b.n	80038e4 <HAL_SPI_Receive+0x248>
	}

	/* Process Locked */
	__HAL_LOCK(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Receive+0x52>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0fa      	b.n	80038e4 <HAL_SPI_Receive+0x248>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 80036f6:	f7fc ff4b 	bl	8000590 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

	if (hspi->State != HAL_SPI_STATE_READY) {
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <HAL_SPI_Receive+0x72>
		errorcode = HAL_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	75fb      	strb	r3, [r7, #23]
		goto error;
 800370c:	e0e1      	b.n	80038d2 <HAL_SPI_Receive+0x236>
	}

	if ((pData == NULL) || (Size == 0U)) {
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_SPI_Receive+0x7e>
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Receive+0x84>
		errorcode = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
		goto error;
 800371e:	e0d8      	b.n	80038d2 <HAL_SPI_Receive+0x236>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2204      	movs	r2, #4
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pRxBuffPtr = (uint8_t *) pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->RxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	/*Init field not used in handle to zero */
	hspi->pTxBuffPtr = (uint8_t *) NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferSize = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->TxXferCount = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxISR = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi->TxISR = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376a:	d908      	bls.n	800377e <HAL_SPI_Receive+0xe2>
		/* Set RX Fifo threshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e007      	b.n	800378e <HAL_SPI_Receive+0xf2>
	} else {
		/* Set RX Fifo threshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378c:	605a      	str	r2, [r3, #4]
	}

	/* Configure communication direction: 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003796:	d107      	bne.n	80037a8 <HAL_SPI_Receive+0x10c>
		SPI_1LINE_RX(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037a6:	601a      	str	r2, [r3, #0]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d007      	beq.n	80037c6 <HAL_SPI_Receive+0x12a>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
	}

	/* Receive data in 8 Bit mode */
	if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT) {
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ce:	d867      	bhi.n	80038a0 <HAL_SPI_Receive+0x204>
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
 80037d0:	e030      	b.n	8003834 <HAL_SPI_Receive+0x198>
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d117      	bne.n	8003810 <HAL_SPI_Receive+0x174>
				/* read the received data */
				(*(uint8_t *) hspi->pRxBuffPtr) =
						*(__IO uint8_t *) &hspi->Instance->DR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f103 020c 	add.w	r2, r3, #12
				(*(uint8_t *) hspi->pRxBuffPtr) =
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						*(__IO uint8_t *) &hspi->Instance->DR;
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	b2d2      	uxtb	r2, r2
				(*(uint8_t *) hspi->pRxBuffPtr) =
 80037f0:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800380e:	e011      	b.n	8003834 <HAL_SPI_Receive+0x198>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8003810:	f7fc febe 	bl	8000590 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d803      	bhi.n	8003828 <HAL_SPI_Receive+0x18c>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d102      	bne.n	800382e <HAL_SPI_Receive+0x192>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <HAL_SPI_Receive+0x198>
					errorcode = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	75fb      	strb	r3, [r7, #23]
					goto error;
 8003832:	e04e      	b.n	80038d2 <HAL_SPI_Receive+0x236>
		while (hspi->RxXferCount > 0U) {
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1c8      	bne.n	80037d2 <HAL_SPI_Receive+0x136>
 8003840:	e034      	b.n	80038ac <HAL_SPI_Receive+0x210>
		}
	} else {
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <HAL_SPI_Receive+0x1e0>
				*((uint16_t *) hspi->pRxBuffPtr) =
						(uint16_t) hspi->Instance->DR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
				*((uint16_t *) hspi->pRxBuffPtr) =
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						(uint16_t) hspi->Instance->DR;
 800385a:	b292      	uxth	r2, r2
				*((uint16_t *) hspi->pRxBuffPtr) =
 800385c:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800387a:	e011      	b.n	80038a0 <HAL_SPI_Receive+0x204>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800387c:	f7fc fe88 	bl	8000590 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d803      	bhi.n	8003894 <HAL_SPI_Receive+0x1f8>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d102      	bne.n	800389a <HAL_SPI_Receive+0x1fe>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_SPI_Receive+0x204>
					errorcode = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	75fb      	strb	r3, [r7, #23]
					goto error;
 800389e:	e018      	b.n	80038d2 <HAL_SPI_Receive+0x236>
		while (hspi->RxXferCount > 0U) {
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ca      	bne.n	8003842 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb05 	bl	8003ec0 <SPI_EndRxTransaction>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Receive+0x226>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Receive+0x234>
		errorcode = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
 80038ce:	e000      	b.n	80038d2 <HAL_SPI_Receive+0x236>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 80038d0:	bf00      	nop
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	__HAL_UNLOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
		uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 80038fa:	2301      	movs	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef errorcode = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x26>
 800390e:	2302      	movs	r3, #2
 8003910:	e1fb      	b.n	8003d0a <HAL_SPI_TransmitReceive+0x41e>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800391a:	f7fc fe39 	bl	8000590 <HAL_GetTick>
 800391e:	61f8      	str	r0, [r7, #28]

	/* Init temporary variables */
	tmp_state = hspi->State;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003926:	76fb      	strb	r3, [r7, #27]
	tmp_mode = hspi->Init.Mode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]
	initial_TxXferCount = Size;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	827b      	strh	r3, [r7, #18]
	initial_RxXferCount = Size;
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

	if (!((tmp_state == HAL_SPI_STATE_READY)
 8003936:	7efb      	ldrb	r3, [r7, #27]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d00e      	beq.n	800395a <HAL_SPI_TransmitReceive+0x6e>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003942:	d106      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x66>
			|| ((tmp_mode == SPI_MODE_MASTER)
					&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x66>
					&& (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 800394c:	7efb      	ldrb	r3, [r7, #27]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d003      	beq.n	800395a <HAL_SPI_TransmitReceive+0x6e>
		errorcode = HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		goto error;
 8003958:	e1cd      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x40a>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_SPI_TransmitReceive+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_TransmitReceive+0x80>
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x88>
		errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		goto error;
 8003972:	e1c0      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x40a>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b04      	cmp	r3, #4
 800397e:	d003      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x9c>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2205      	movs	r2, #5
 8003984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	661a      	str	r2, [r3, #96]	; 0x60
	hspi->pRxBuffPtr = (uint8_t *) pRxData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->RxXferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi->RxXferSize = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi->pTxBuffPtr = (uint8_t *) pTxData;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	887a      	ldrh	r2, [r7, #2]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->TxXferSize = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	879a      	strh	r2, [r3, #60]	; 0x3c

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi->TxISR = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Set the Rx Fifo threshold */
	if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ca:	d802      	bhi.n	80039d2 <HAL_SPI_TransmitReceive+0xe6>
			|| (initial_RxXferCount > 1U)) {
 80039cc:	8a3b      	ldrh	r3, [r7, #16]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d908      	bls.n	80039e4 <HAL_SPI_TransmitReceive+0xf8>
		/* Set fiforxthreshold according the reception data length: 16bit */
		CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e007      	b.n	80039f4 <HAL_SPI_TransmitReceive+0x108>
	} else {
		/* Set fiforxthreshold according the reception data length: 8bit */
		SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f2:	605a      	str	r2, [r3, #4]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d007      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0x126>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a10:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a1a:	d97c      	bls.n	8003b16 <HAL_SPI_TransmitReceive+0x22a>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x13e>
				|| (initial_TxXferCount == 0x01U)) {
 8003a24:	8a7b      	ldrh	r3, [r7, #18]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d169      	bne.n	8003afe <HAL_SPI_TransmitReceive+0x212>
			hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	881a      	ldrh	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	1c9a      	adds	r2, r3, #2
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
			hspi->TxXferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8003a4e:	e056      	b.n	8003afe <HAL_SPI_TransmitReceive+0x212>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d11b      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x1aa>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x1aa>
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x1aa>
				hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	87da      	strh	r2, [r3, #62]	; 0x3e
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Check RXNE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d11c      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x1f2>
					&& (hspi->RxXferCount > 0U)) {
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_SPI_TransmitReceive+0x1f2>
				*((uint16_t *) hspi->pRxBuffPtr) =
						(uint16_t) hspi->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
				*((uint16_t *) hspi->pRxBuffPtr) =
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						(uint16_t) hspi->Instance->DR;
 8003aba:	b292      	uxth	r2, r2
				*((uint16_t *) hspi->pRxBuffPtr) =
 8003abc:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
				hspi->RxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8003ada:	2301      	movs	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if (((HAL_GetTick() - tickstart) >= Timeout)
 8003ade:	f7fc fd57 	bl	8000590 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d807      	bhi.n	8003afe <HAL_SPI_TransmitReceive+0x212>
					&& (Timeout != HAL_MAX_DELAY)) {
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d003      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x212>
				errorcode = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				goto error;
 8003afc:	e0fb      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1a3      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x164>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d19d      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x164>
 8003b14:	e0df      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x3ea>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x23a>
				|| (initial_TxXferCount == 0x01U)) {
 8003b1e:	8a7b      	ldrh	r3, [r7, #18]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 80cb 	bne.w	8003cbc <HAL_SPI_TransmitReceive+0x3d0>
			if (hspi->TxXferCount > 1U) {
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d912      	bls.n	8003b56 <HAL_SPI_TransmitReceive+0x26a>
				hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount -= 2U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b02      	subs	r3, #2
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b54:	e0b2      	b.n	8003cbc <HAL_SPI_TransmitReceive+0x3d0>
			} else {
				*(__IO uint8_t *) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8003b7c:	e09e      	b.n	8003cbc <HAL_SPI_TransmitReceive+0x3d0>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d134      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x30a>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02f      	beq.n	8003bf6 <HAL_SPI_TransmitReceive+0x30a>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d12c      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x30a>
				if (hspi->TxXferCount > 1U) {
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d912      	bls.n	8003bcc <HAL_SPI_TransmitReceive+0x2e0>
					hspi->Instance->DR = *((uint16_t *) hspi->pTxBuffPtr);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60da      	str	r2, [r3, #12]
					hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount -= 2U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b02      	subs	r3, #2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bca:	e012      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x306>
				} else {
					*(__IO uint8_t *) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	701a      	strb	r2, [r3, #0]
					hspi->pTxBuffPtr++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
					hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
				}
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
			}

			/* Wait until RXNE flag is reset */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d148      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x3aa>
					&& (hspi->RxXferCount > 0U)) {
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d042      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x3aa>
				if (hspi->RxXferCount > 1U) {
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d923      	bls.n	8003c64 <HAL_SPI_TransmitReceive+0x378>
					*((uint16_t *) hspi->pRxBuffPtr) =
							(uint16_t) hspi->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
					*((uint16_t *) hspi->pRxBuffPtr) =
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
							(uint16_t) hspi->Instance->DR;
 8003c26:	b292      	uxth	r2, r2
					*((uint16_t *) hspi->pRxBuffPtr) =
 8003c28:	801a      	strh	r2, [r3, #0]
					hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	1c9a      	adds	r2, r3, #2
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
					hspi->RxXferCount -= 2U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b02      	subs	r3, #2
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
					if (hspi->RxXferCount <= 1U) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d81f      	bhi.n	8003c92 <HAL_SPI_TransmitReceive+0x3a6>
						/* Set RX Fifo threshold before to switch on 8 bit data size */
						SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	e016      	b.n	8003c92 <HAL_SPI_TransmitReceive+0x3a6>
					}
				} else {
					(*(uint8_t *) hspi->pRxBuffPtr) =
							*(__IO uint8_t *) &hspi->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f103 020c 	add.w	r2, r3, #12
					(*(uint8_t *) hspi->pRxBuffPtr) =
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
							*(__IO uint8_t *) &hspi->Instance->DR;
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	b2d2      	uxtb	r2, r2
					(*(uint8_t *) hspi->pRxBuffPtr) =
 8003c74:	701a      	strb	r2, [r3, #0]
					hspi->pRxBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
					hspi->RxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				}
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if ((((HAL_GetTick() - tickstart) >= Timeout)
 8003c96:	f7fc fc7b 	bl	8000590 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d803      	bhi.n	8003cae <HAL_SPI_TransmitReceive+0x3c2>
					&& ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d102      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x3c8>
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x3d0>
				errorcode = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				goto error;
 8003cba:	e01c      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x40a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f47f af5b 	bne.w	8003b7e <HAL_SPI_TransmitReceive+0x292>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af54 	bne.w	8003b7e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f948 	bl	8003f70 <SPI_EndRxTxTransaction>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x408>
		errorcode = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8003cf2:	e000      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x40a>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8003cf4:	bf00      	nop
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	__HAL_UNLOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return errorcode;
 8003d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, FlagStatus State, uint32_t Timeout, uint32_t Tickstart) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	71fb      	strb	r3, [r7, #7]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8003d22:	e04c      	b.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xac>
		if (Timeout != HAL_MAX_DELAY) {
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d048      	beq.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xac>
			if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U)) {
 8003d2c:	f7fc fc30 	bl	8000590 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d902      	bls.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d13d      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xac>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d50:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5a:	d111      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x6e>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d004      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x5e>
								|| (hspi->Init.Direction
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d107      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x6e>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d10f      	bne.n	8003daa <SPI_WaitFlagStateUntilTimeout+0x98>
					SPI_RESET_CRC(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e00f      	b.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xcc>
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1a3      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x12>
			}
		}
	}

	return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <SPI_WaitFifoStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Fifo, uint32_t State, uint32_t Timeout, uint32_t Tickstart) {
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
	while ((hspi->Instance->SR & Fifo) != State) {
 8003df4:	e057      	b.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
		if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY)) {
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dfc:	d106      	bne.n	8003e0c <SPI_WaitFifoStateUntilTimeout+0x26>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <SPI_WaitFifoStateUntilTimeout+0x26>
			/* Read 8bit CRC to flush Data Register */
			READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	781b      	ldrb	r3, [r3, #0]
		}

		if (Timeout != HAL_MAX_DELAY) {
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d048      	beq.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
			if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U)) {
 8003e14:	f7fc fbbc 	bl	8000590 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d902      	bls.n	8003e2a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d13d      	bne.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e38:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e42:	d111      	bne.n	8003e68 <SPI_WaitFifoStateUntilTimeout+0x82>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4c:	d004      	beq.n	8003e58 <SPI_WaitFifoStateUntilTimeout+0x72>
								|| (hspi->Init.Direction
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d107      	bne.n	8003e68 <SPI_WaitFifoStateUntilTimeout+0x82>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e66:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e70:	d10f      	bne.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0xac>
					SPI_RESET_CRC(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e90:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e008      	b.n	8003eb8 <SPI_WaitFifoStateUntilTimeout+0xd2>
	while ((hspi->Instance->SR & Fifo) != State) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d19f      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0x10>
			}
		}
	}

	return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SPI_EndRxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed4:	d111      	bne.n	8003efa <SPI_EndRxTransaction+0x3a>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d004      	beq.n	8003eea <SPI_EndRxTransaction+0x2a>
					|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d107      	bne.n	8003efa <SPI_EndRxTransaction+0x3a>
		/* Disable SPI peripheral */
		__HAL_SPI_DISABLE(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef8:	601a      	str	r2, [r3, #0]
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	; 0x80
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff ff04 	bl	8003d12 <SPI_WaitFlagStateUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <SPI_EndRxTransaction+0x60>
			Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e023      	b.n	8003f68 <SPI_EndRxTransaction+0xa8>
	}

	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f28:	d11d      	bne.n	8003f66 <SPI_EndRxTransaction+0xa6>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d004      	beq.n	8003f3e <SPI_EndRxTransaction+0x7e>
					|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3c:	d113      	bne.n	8003f66 <SPI_EndRxTransaction+0xa6>
		/* Empty the FRLVL fifo */
		if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ff4b 	bl	8003de6 <SPI_WaitFifoStateUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <SPI_EndRxTransaction+0xa6>
				Timeout, Tickstart) != HAL_OK) {
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
			return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e000      	b.n	8003f68 <SPI_EndRxTransaction+0xa8>
		}
	}
	return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <SPI_EndRxTxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
	/* Control if the TX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ff2c 	bl	8003de6 <SPI_WaitFifoStateUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <SPI_EndRxTxTransaction+0x34>
			Timeout, Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e027      	b.n	8003ff4 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff feaf 	bl	8003d12 <SPI_WaitFlagStateUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <SPI_EndRxTxTransaction+0x5a>
			Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e014      	b.n	8003ff4 <SPI_EndRxTxTransaction+0x84>
	}

	/* Control if the RX fifo is empty */
	if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff ff05 	bl	8003de6 <SPI_WaitFifoStateUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <SPI_EndRxTxTransaction+0x82>
			Timeout, Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
		return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e000      	b.n	8003ff4 <SPI_EndRxTxTransaction+0x84>
	}

	return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e01d      	b.n	800404a <HAL_TIM_Base_Init+0x4e>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f002 fe98 	bl	8006d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 f8c2 	bl	80041c4 <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_TIM_ConfigClockSource+0x18>
 8004066:	2302      	movs	r3, #2
 8004068:	e0a8      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x16a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800408c:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004094:	60fb      	str	r3, [r7, #12]
	htim->Instance->SMCR = tmpsmcr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d067      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x124>
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d80b      	bhi.n	80040c2 <HAL_TIM_ConfigClockSource+0x70>
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d073      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x144>
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d802      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x66>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06f      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x144>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
		break;
	}

	default:
		break;
 80040b6:	e078      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
	switch (sClockSourceConfig->ClockSource) {
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d06c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x144>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d06a      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x144>
		break;
 80040c0:	e073      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
	switch (sClockSourceConfig->ClockSource) {
 80040c2:	2b70      	cmp	r3, #112	; 0x70
 80040c4:	d00d      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x90>
 80040c6:	2b70      	cmp	r3, #112	; 0x70
 80040c8:	d804      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x82>
 80040ca:	2b50      	cmp	r3, #80	; 0x50
 80040cc:	d033      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xe4>
 80040ce:	2b60      	cmp	r3, #96	; 0x60
 80040d0:	d041      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x104>
		break;
 80040d2:	e06a      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
	switch (sClockSourceConfig->ClockSource) {
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	d066      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x156>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	d017      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0xbe>
		break;
 80040e0:	e063      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f000 f97b 	bl	80043ec <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004104:	60fb      	str	r3, [r7, #12]
		htim->Instance->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
		break;
 800410e:	e04c      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f000 f964 	bl	80043ec <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004132:	609a      	str	r2, [r3, #8]
		break;
 8004134:	e039      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f8d8 	bl	80042f8 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2150      	movs	r1, #80	; 0x50
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f931 	bl	80043b6 <TIM_ITRx_SetConfig>
		break;
 8004154:	e029      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_TI2_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f8f7 	bl	8004356 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2160      	movs	r1, #96	; 0x60
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f921 	bl	80043b6 <TIM_ITRx_SetConfig>
		break;
 8004174:	e019      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f8b8 	bl	80042f8 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f911 	bl	80043b6 <TIM_ITRx_SetConfig>
		break;
 8004194:	e009      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 f908 	bl	80043b6 <TIM_ITRx_SetConfig>
		break;
 80041a6:	e000      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x158>
		break;
 80041a8:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3d      	ldr	r2, [pc, #244]	; (80042dc <TIM_Base_SetConfig+0x118>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3c      	ldr	r2, [pc, #240]	; (80042e0 <TIM_Base_SetConfig+0x11c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3b      	ldr	r2, [pc, #236]	; (80042e4 <TIM_Base_SetConfig+0x120>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01f      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d01b      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <TIM_Base_SetConfig+0x118>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d017      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2b      	ldr	r2, [pc, #172]	; (80042e0 <TIM_Base_SetConfig+0x11c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <TIM_Base_SetConfig+0x120>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a28      	ldr	r2, [pc, #160]	; (80042ec <TIM_Base_SetConfig+0x128>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a27      	ldr	r2, [pc, #156]	; (80042f0 <TIM_Base_SetConfig+0x12c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <TIM_Base_SetConfig+0x130>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0xac>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <TIM_Base_SetConfig+0x128>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <TIM_Base_SetConfig+0x12c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <TIM_Base_SetConfig+0x130>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d103      	bne.n	80042c4 <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	615a      	str	r2, [r3, #20]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004322:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 030a 	bic.w	r3, r3, #10
 8004334:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0210 	bic.w	r2, r3, #16
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004380:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	031b      	lsls	r3, r3, #12
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004392:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043cc:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f043 0307 	orr.w	r3, r3, #7
 80043d8:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004406:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	431a      	orrs	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004440:	2302      	movs	r3, #2
 8004442:	e045      	b.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800447e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40013400 	.word	0x40013400

080044e4 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e040      	b.n	8004578 <HAL_UART_Init+0x94>
		/* Check the parameters */
		assert_param(
				(IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f002 fc46 	bl	8006d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	675a      	str	r2, [r3, #116]	; 0x74

	__HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa94 	bl	8004a50 <UART_SetConfig>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fdd0 	bl	80050e0 <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454e:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455e:	609a      	str	r2, [r3, #8]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	__HAL_UART_ENABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fe57 	bl	8005224 <UART_CheckIdleState>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_Transmit>:
 * @param Size    Amount of data to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004594:	2b20      	cmp	r3, #32
 8004596:	f040 8081 	bne.w	800469c <HAL_UART_Transmit+0x11c>
		if ((pData == NULL) || (Size == 0U)) {
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_UART_Transmit+0x26>
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Transmit+0x2a>
			return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e079      	b.n	800469e <HAL_UART_Transmit+0x11e>
		}

		__HAL_LOCK(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_UART_Transmit+0x38>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e072      	b.n	800469e <HAL_UART_Transmit+0x11e>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	67da      	str	r2, [r3, #124]	; 0x7c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	675a      	str	r2, [r3, #116]	; 0x74

		/* Init tickstart for timeout managment*/
		tickstart = HAL_GetTick();
 80045cc:	f7fb ffe0 	bl	8000590 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		huart->TxXferCount = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d108      	bne.n	80045fe <HAL_UART_Transmit+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_UART_Transmit+0x7e>
			pdata8bits = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t *) pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e003      	b.n	8004606 <HAL_UART_Transmit+0x86>
		} else {
			pdata8bits = pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U) {
 8004606:	e02d      	b.n	8004664 <HAL_UART_Transmit+0xe4>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fe4b 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_UART_Transmit+0xa2>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e03d      	b.n	800469e <HAL_UART_Transmit+0x11e>
			}
			if (pdata8bits == NULL) {
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_UART_Transmit+0xc0>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004634:	b292      	uxth	r2, r2
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata16bits++;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	3302      	adds	r3, #2
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e008      	b.n	8004652 <HAL_UART_Transmit+0xd2>
			} else {
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b292      	uxth	r2, r2
 800464a:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1cb      	bne.n	8004608 <HAL_UART_Transmit+0x88>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	2140      	movs	r1, #64	; 0x40
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fe17 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_UART_Transmit+0x10a>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e009      	b.n	800469e <HAL_UART_Transmit+0x11e>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	675a      	str	r2, [r3, #116]	; 0x74

		__HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_UART_Transmit+0x11e>
	} else {
		return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
	}
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Abort>:
 *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
 *           - Set handle State to READY
 * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart) {
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
	/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80046bc:	601a      	str	r2, [r3, #0]
			(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

	/* Disable the UART DMA Tx request if enabled */
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d124      	bne.n	8004726 <HAL_UART_Abort+0x80>
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ea:	609a      	str	r2, [r3, #8]

		/* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
		if (huart->hdmatx != NULL) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d018      	beq.n	8004726 <HAL_UART_Abort+0x80>
			/* Set the UART DMA Abort callback to Null.
			 No call back execution at end of DMA abort procedure */
			huart->hdmatx->XferAbortCallback = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f8:	2200      	movs	r2, #0
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38

			if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	4618      	mov	r0, r3
 8004702:	f7fd f88a 	bl	800181a <HAL_DMA_Abort>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_UART_Abort+0x80>
				if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004710:	4618      	mov	r0, r3
 8004712:	f7fd f901 	bl	8001918 <HAL_DMA_GetError>
 8004716:	4603      	mov	r3, r0
 8004718:	2b20      	cmp	r3, #32
 800471a:	d104      	bne.n	8004726 <HAL_UART_Abort+0x80>
					/* Set error code to DMA */
					huart->ErrorCode = HAL_UART_ERROR_DMA;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2210      	movs	r2, #16
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c

					return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e04b      	b.n	80047be <HAL_UART_Abort+0x118>
			}
		}
	}

	/* Disable the UART DMA Rx request if enabled */
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d124      	bne.n	800477e <HAL_UART_Abort+0xd8>
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004742:	609a      	str	r2, [r3, #8]

		/* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
		if (huart->hdmarx != NULL) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <HAL_UART_Abort+0xd8>
			/* Set the UART DMA Abort callback to Null.
			 No call back execution at end of DMA abort procedure */
			huart->hdmarx->XferAbortCallback = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004750:	2200      	movs	r2, #0
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

			if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd f85e 	bl	800181a <HAL_DMA_Abort>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00c      	beq.n	800477e <HAL_UART_Abort+0xd8>
				if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004768:	4618      	mov	r0, r3
 800476a:	f7fd f8d5 	bl	8001918 <HAL_DMA_GetError>
 800476e:	4603      	mov	r3, r0
 8004770:	2b20      	cmp	r3, #32
 8004772:	d104      	bne.n	800477e <HAL_UART_Abort+0xd8>
					/* Set error code to DMA */
					huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2210      	movs	r2, #16
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

					return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e01f      	b.n	80047be <HAL_UART_Abort+0x118>
			}
		}
	}

	/* Reset Tx and Rx transfer counters */
	huart->TxXferCount = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	huart->RxXferCount = 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	/* Clear the Error flags in the ICR register */
	__HAL_UART_CLEAR_FLAG(huart,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	220f      	movs	r2, #15
 8004794:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

	/* Discard the received data */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	8b1b      	ldrh	r3, [r3, #24]
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0208 	orr.w	r2, r2, #8
 80047a6:	b292      	uxth	r2, r2
 80047a8:	831a      	strh	r2, [r3, #24]

	/* Restore huart->gState and huart->RxState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	675a      	str	r2, [r3, #116]	; 0x74
	huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	679a      	str	r2, [r3, #120]	; 0x78

	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c

	return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_UART_IRQHandler>:
/**
 * @brief Handle UART interrupt request.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	61fb      	str	r3, [r7, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61bb      	str	r3, [r7, #24]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]

	uint32_t errorflags;
	uint32_t errorcode;

	/* If no error occurs */
	errorflags = (isrflags
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	613b      	str	r3, [r7, #16]
			& (uint32_t) (USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE
					| USART_ISR_NE));
	if (errorflags == 0U) {
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d113      	bne.n	800481e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
		if (((isrflags & USART_ISR_RXNE) != 0U)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <HAL_UART_IRQHandler+0x56>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
				{
			if (huart->RxISR != NULL) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80ff 	beq.w	8004a12 <HAL_UART_IRQHandler+0x24a>
				huart->RxISR(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
			}
			return;
 800481c:	e0f9      	b.n	8004a12 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
	if ((errorflags != 0U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80c1 	beq.w	80049a8 <HAL_UART_IRQHandler+0x1e0>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <HAL_UART_IRQHandler+0x74>
					|| ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80b6 	beq.w	80049a8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
			{
		/* UART parity error interrupt occurred -------------------------------------*/
		if (((isrflags & USART_ISR_PE) != 0U)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00e      	beq.n	8004864 <HAL_UART_IRQHandler+0x9c>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_UART_IRQHandler+0x9c>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	67da      	str	r2, [r3, #124]	; 0x7c
		}

		/* UART frame error interrupt occurred --------------------------------------*/
		if (((isrflags & USART_ISR_FE) != 0U)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <HAL_UART_IRQHandler+0xc4>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_UART_IRQHandler+0xc4>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2202      	movs	r2, #2
 800487e:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004884:	f043 0204 	orr.w	r2, r3, #4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	67da      	str	r2, [r3, #124]	; 0x7c
		}

		/* UART noise error interrupt occurred --------------------------------------*/
		if (((isrflags & USART_ISR_NE) != 0U)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <HAL_UART_IRQHandler+0xec>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_UART_IRQHandler+0xec>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2204      	movs	r2, #4
 80048a6:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
		if (((isrflags & USART_ISR_ORE) != 0U)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d013      	beq.n	80048e6 <HAL_UART_IRQHandler+0x11e>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <HAL_UART_IRQHandler+0x10a>
						|| ((cr3its & USART_CR3_EIE) != 0U)))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
				{
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2208      	movs	r2, #8
 80048d8:	621a      	str	r2, [r3, #32]

			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048de:	f043 0208 	orr.w	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c
		}

		/* Call UART Error Call back function if need be --------------------------*/
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8093 	beq.w	8004a16 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
			if (((isrflags & USART_ISR_RXNE) != 0U)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_UART_IRQHandler+0x14c>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
					{
				if (huart->RxISR != NULL) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_UART_IRQHandler+0x14c>
					huart->RxISR(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
				}
			}

			/* If Overrun error occurs, or if any error occurs in DMA mode reception,
			 consider error as blocking */
			errorcode = huart->ErrorCode;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	60fb      	str	r3, [r7, #12]
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d004      	beq.n	8004932 <HAL_UART_IRQHandler+0x16a>
					|| ((errorcode & HAL_UART_ERROR_ORE) != 0U)) {
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d031      	beq.n	8004996 <HAL_UART_IRQHandler+0x1ce>
				/* Blocking error : transfer is aborted
				 Set the UART state ready to be able to start again the process,
				 Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
				UART_EndRxTransfer(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fd03 	bl	800533e <UART_EndRxTransfer>

				/* Disable the UART DMA Rx request if enabled */
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d123      	bne.n	800498e <HAL_UART_IRQHandler+0x1c6>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	609a      	str	r2, [r3, #8]

					/* Abort the UART DMA Rx channel */
					if (huart->hdmarx != NULL) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d013      	beq.n	8004986 <HAL_UART_IRQHandler+0x1be>
						/* Set the UART DMA Abort callback :
						 will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <HAL_UART_IRQHandler+0x25c>)
 8004964:	639a      	str	r2, [r3, #56]	; 0x38

						/* Abort DMA RX */
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc ff93 	bl	8001896 <HAL_DMA_Abort_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_UART_IRQHandler+0x1dc>
							/* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8004984:	e00e      	b.n	80049a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
						/*Call legacy weak error callback*/
						HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f858 	bl	8004a3c <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800498c:	e00a      	b.n	80049a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
					/*Call legacy weak error callback*/
					HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f854 	bl	8004a3c <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8004994:	e006      	b.n	80049a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
				/*Call legacy weak error callback*/
				HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f850 	bl	8004a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
		return;
 80049a2:	e038      	b.n	8004a16 <HAL_UART_IRQHandler+0x24e>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80049a4:	bf00      	nop
		return;
 80049a6:	e036      	b.n	8004a16 <HAL_UART_IRQHandler+0x24e>

	} /* End if some error occurs */

	/* UART wakeup from Stop mode interrupt occurred ---------------------------*/
	if (((isrflags & USART_ISR_WUF) != 0U)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <HAL_UART_IRQHandler+0x206>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x206>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
		/* Call legacy weak Wakeup Callback */
		HAL_UARTEx_WakeupCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fd08 	bl	80053dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
		return;
 80049cc:	e026      	b.n	8004a1c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
	if (((isrflags & USART_ISR_TXE) != 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_UART_IRQHandler+0x22c>
			&& ((cr1its & USART_CR1_TXEIE) != 0U))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
			{
		if (huart->TxISR != NULL) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_UART_IRQHandler+0x252>
			huart->TxISR(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
		}
		return;
 80049f2:	e012      	b.n	8004a1a <HAL_UART_IRQHandler+0x252>
	}

	/* UART in mode Transmitter (transmission end) -----------------------------*/
	if (((isrflags & USART_ISR_TC) != 0U)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <HAL_UART_IRQHandler+0x254>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_UART_IRQHandler+0x254>
		UART_EndTransmit_IT(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fcce 	bl	80053aa <UART_EndTransmit_IT>
		return;
 8004a0e:	bf00      	nop
 8004a10:	e004      	b.n	8004a1c <HAL_UART_IRQHandler+0x254>
			return;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <HAL_UART_IRQHandler+0x254>
		return;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <HAL_UART_IRQHandler+0x254>
		return;
 8004a1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	0800537f 	.word	0x0800537f

08004a28 <HAL_UART_TxCpltCallback>:
/**
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_TxCpltCallback can be implemented in the user file.
	 */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_ErrorCallback can be implemented in the user file.
	 */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8004a50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv = 0x00000000U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	74fb      	strb	r3, [r7, #19]
	uint32_t lpuart_ker_ck_pres = 0x00000000U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4bac      	ldr	r3, [pc, #688]	; (8004d38 <UART_SetConfig+0x2e8>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	69f9      	ldr	r1, [r7, #28]
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61fb      	str	r3, [r7, #28]

	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4aa2      	ldr	r2, [pc, #648]	; (8004d3c <UART_SetConfig+0x2ec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <UART_SetConfig+0x72>
		tmpreg |= huart->Init.OneBitSampling;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]
	}
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a99      	ldr	r2, [pc, #612]	; (8004d40 <UART_SetConfig+0x2f0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d121      	bne.n	8004b24 <UART_SetConfig+0xd4>
 8004ae0:	4b98      	ldr	r3, [pc, #608]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d816      	bhi.n	8004b1c <UART_SetConfig+0xcc>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0xa4>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b11 	.word	0x08004b11
 8004afc:	08004b0b 	.word	0x08004b0b
 8004b00:	08004b17 	.word	0x08004b17
 8004b04:	2301      	movs	r3, #1
 8004b06:	76fb      	strb	r3, [r7, #27]
 8004b08:	e0e8      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	76fb      	strb	r3, [r7, #27]
 8004b0e:	e0e5      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b10:	2304      	movs	r3, #4
 8004b12:	76fb      	strb	r3, [r7, #27]
 8004b14:	e0e2      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b16:	2308      	movs	r3, #8
 8004b18:	76fb      	strb	r3, [r7, #27]
 8004b1a:	e0df      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	bf00      	nop
 8004b22:	e0db      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a87      	ldr	r2, [pc, #540]	; (8004d48 <UART_SetConfig+0x2f8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d134      	bne.n	8004b98 <UART_SetConfig+0x148>
 8004b2e:	4b85      	ldr	r3, [pc, #532]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d829      	bhi.n	8004b90 <UART_SetConfig+0x140>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0xf4>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004b91 	.word	0x08004b91
 8004b4c:	08004b91 	.word	0x08004b91
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004b91 	.word	0x08004b91
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004b91 	.word	0x08004b91
 8004b64:	08004b7f 	.word	0x08004b7f
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b91 	.word	0x08004b91
 8004b74:	08004b8b 	.word	0x08004b8b
 8004b78:	2300      	movs	r3, #0
 8004b7a:	76fb      	strb	r3, [r7, #27]
 8004b7c:	e0ae      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	76fb      	strb	r3, [r7, #27]
 8004b82:	e0ab      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b84:	2304      	movs	r3, #4
 8004b86:	76fb      	strb	r3, [r7, #27]
 8004b88:	e0a8      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	76fb      	strb	r3, [r7, #27]
 8004b8e:	e0a5      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b90:	2310      	movs	r3, #16
 8004b92:	76fb      	strb	r3, [r7, #27]
 8004b94:	bf00      	nop
 8004b96:	e0a1      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6b      	ldr	r2, [pc, #428]	; (8004d4c <UART_SetConfig+0x2fc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d120      	bne.n	8004be4 <UART_SetConfig+0x194>
 8004ba2:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d00f      	beq.n	8004bd0 <UART_SetConfig+0x180>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d802      	bhi.n	8004bba <UART_SetConfig+0x16a>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <UART_SetConfig+0x174>
 8004bb8:	e010      	b.n	8004bdc <UART_SetConfig+0x18c>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d005      	beq.n	8004bca <UART_SetConfig+0x17a>
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d009      	beq.n	8004bd6 <UART_SetConfig+0x186>
 8004bc2:	e00b      	b.n	8004bdc <UART_SetConfig+0x18c>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	76fb      	strb	r3, [r7, #27]
 8004bc8:	e088      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	76fb      	strb	r3, [r7, #27]
 8004bce:	e085      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	76fb      	strb	r3, [r7, #27]
 8004bd4:	e082      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	76fb      	strb	r3, [r7, #27]
 8004bda:	e07f      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	76fb      	strb	r3, [r7, #27]
 8004be0:	bf00      	nop
 8004be2:	e07b      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a59      	ldr	r2, [pc, #356]	; (8004d50 <UART_SetConfig+0x300>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d120      	bne.n	8004c30 <UART_SetConfig+0x1e0>
 8004bee:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d00f      	beq.n	8004c1c <UART_SetConfig+0x1cc>
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d802      	bhi.n	8004c06 <UART_SetConfig+0x1b6>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <UART_SetConfig+0x1c0>
 8004c04:	e010      	b.n	8004c28 <UART_SetConfig+0x1d8>
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d005      	beq.n	8004c16 <UART_SetConfig+0x1c6>
 8004c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c0c:	d009      	beq.n	8004c22 <UART_SetConfig+0x1d2>
 8004c0e:	e00b      	b.n	8004c28 <UART_SetConfig+0x1d8>
 8004c10:	2300      	movs	r3, #0
 8004c12:	76fb      	strb	r3, [r7, #27]
 8004c14:	e062      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c16:	2302      	movs	r3, #2
 8004c18:	76fb      	strb	r3, [r7, #27]
 8004c1a:	e05f      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	76fb      	strb	r3, [r7, #27]
 8004c20:	e05c      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c22:	2308      	movs	r3, #8
 8004c24:	76fb      	strb	r3, [r7, #27]
 8004c26:	e059      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	76fb      	strb	r3, [r7, #27]
 8004c2c:	bf00      	nop
 8004c2e:	e055      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <UART_SetConfig+0x304>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d124      	bne.n	8004c84 <UART_SetConfig+0x234>
 8004c3a:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c48:	d012      	beq.n	8004c70 <UART_SetConfig+0x220>
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d802      	bhi.n	8004c56 <UART_SetConfig+0x206>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <UART_SetConfig+0x214>
 8004c54:	e012      	b.n	8004c7c <UART_SetConfig+0x22c>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5a:	d006      	beq.n	8004c6a <UART_SetConfig+0x21a>
 8004c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c60:	d009      	beq.n	8004c76 <UART_SetConfig+0x226>
 8004c62:	e00b      	b.n	8004c7c <UART_SetConfig+0x22c>
 8004c64:	2300      	movs	r3, #0
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e038      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e035      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c70:	2304      	movs	r3, #4
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e032      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c76:	2308      	movs	r3, #8
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e02f      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	bf00      	nop
 8004c82:	e02b      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <UART_SetConfig+0x2ec>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d124      	bne.n	8004cd8 <UART_SetConfig+0x288>
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <UART_SetConfig+0x2f4>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9c:	d012      	beq.n	8004cc4 <UART_SetConfig+0x274>
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d802      	bhi.n	8004caa <UART_SetConfig+0x25a>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <UART_SetConfig+0x268>
 8004ca8:	e012      	b.n	8004cd0 <UART_SetConfig+0x280>
 8004caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x26e>
 8004cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb4:	d009      	beq.n	8004cca <UART_SetConfig+0x27a>
 8004cb6:	e00b      	b.n	8004cd0 <UART_SetConfig+0x280>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	76fb      	strb	r3, [r7, #27]
 8004cbc:	e00e      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	76fb      	strb	r3, [r7, #27]
 8004cc2:	e00b      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	76fb      	strb	r3, [r7, #27]
 8004cc8:	e008      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	76fb      	strb	r3, [r7, #27]
 8004cce:	e005      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	bf00      	nop
 8004cd6:	e001      	b.n	8004cdc <UART_SetConfig+0x28c>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	76fb      	strb	r3, [r7, #27]

	/* Check LPUART instance */
	if (UART_INSTANCE_LOWPOWER(huart)) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <UART_SetConfig+0x2ec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f040 80fa 	bne.w	8004edc <UART_SetConfig+0x48c>
		/* Retrieve frequency clock */
		switch (clocksource) {
 8004ce8:	7efb      	ldrb	r3, [r7, #27]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d836      	bhi.n	8004d5c <UART_SetConfig+0x30c>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x2a4>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d5d 	.word	0x08004d5d
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d5d 	.word	0x08004d5d
 8004d04:	08004d27 	.word	0x08004d27
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004d5d 	.word	0x08004d5d
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d2f 	.word	0x08004d2f
		case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
			lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fd fd94 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
			break;
 8004d1e:	e020      	b.n	8004d62 <UART_SetConfig+0x312>
		case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
			lpuart_ker_ck_pres = (uint32_t) HSI_VALUE;
 8004d20:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <UART_SetConfig+0x308>)
 8004d22:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
			break;
 8004d24:	e01d      	b.n	8004d62 <UART_SetConfig+0x312>
		case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
			lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004d26:	f7fd fcf7 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004d2a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
			break;
 8004d2c:	e019      	b.n	8004d62 <UART_SetConfig+0x312>
		case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
			lpuart_ker_ck_pres = (uint32_t) LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d32:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
			break;
 8004d34:	e015      	b.n	8004d62 <UART_SetConfig+0x312>
 8004d36:	bf00      	nop
 8004d38:	efff69f3 	.word	0xefff69f3
 8004d3c:	40008000 	.word	0x40008000
 8004d40:	40013800 	.word	0x40013800
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	40004800 	.word	0x40004800
 8004d50:	40004c00 	.word	0x40004c00
 8004d54:	40005000 	.word	0x40005000
 8004d58:	00f42400 	.word	0x00f42400
		case UART_CLOCKSOURCE_UNDEFINED:
		default:
			ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	74fb      	strb	r3, [r7, #19]
			break;
 8004d60:	bf00      	nop
		}

		/* if proper clock source reported */
		if (lpuart_ker_ck_pres != 0U) {
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 81ac 	beq.w	80050c2 <UART_SetConfig+0x672>
			/* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
			if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d305      	bcc.n	8004d86 <UART_SetConfig+0x336>
					|| (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate))) {
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	031b      	lsls	r3, r3, #12
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d902      	bls.n	8004d8c <UART_SetConfig+0x33c>
				ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	74fb      	strb	r3, [r7, #19]
 8004d8a:	e19a      	b.n	80050c2 <UART_SetConfig+0x672>
			} else {
				switch (clocksource) {
 8004d8c:	7efb      	ldrb	r3, [r7, #27]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	f200 8091 	bhi.w	8004eb6 <UART_SetConfig+0x466>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x34c>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004eb7 	.word	0x08004eb7
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004eb7 	.word	0x08004eb7
 8004dac:	08004e41 	.word	0x08004e41
 8004db0:	08004eb7 	.word	0x08004eb7
 8004db4:	08004eb7 	.word	0x08004eb7
 8004db8:	08004eb7 	.word	0x08004eb7
 8004dbc:	08004e8d 	.word	0x08004e8d
				case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
					usartdiv = (uint32_t) (UART_DIV_LPUART(
 8004dc0:	f7fd fd40 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	f04f 0400 	mov.w	r4, #0
 8004dd4:	0214      	lsls	r4, r2, #8
 8004dd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004dda:	020b      	lsls	r3, r1, #8
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6852      	ldr	r2, [r2, #4]
 8004de0:	0852      	lsrs	r2, r2, #1
 8004de2:	4611      	mov	r1, r2
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	eb13 0b01 	adds.w	fp, r3, r1
 8004dec:	eb44 0c02 	adc.w	ip, r4, r2
 8004df0:	4658      	mov	r0, fp
 8004df2:	4661      	mov	r1, ip
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f04f 0400 	mov.w	r4, #0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4623      	mov	r3, r4
 8004e00:	f7fb f9e2 	bl	80001c8 <__aeabi_uldivmod>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	617b      	str	r3, [r7, #20]
							HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
					break;
 8004e0a:	e057      	b.n	8004ebc <UART_SetConfig+0x46c>
				case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
					usartdiv = (uint32_t) (UART_DIV_LPUART(HSI_VALUE,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	49b1      	ldr	r1, [pc, #708]	; (80050dc <UART_SetConfig+0x68c>)
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	eb13 0b01 	adds.w	fp, r3, r1
 8004e20:	eb44 0c02 	adc.w	ip, r4, r2
 8004e24:	4658      	mov	r0, fp
 8004e26:	4661      	mov	r1, ip
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	461a      	mov	r2, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	f7fb f9c8 	bl	80001c8 <__aeabi_uldivmod>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	617b      	str	r3, [r7, #20]
							huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
					break;
 8004e3e:	e03d      	b.n	8004ebc <UART_SetConfig+0x46c>
				case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
					usartdiv = (uint32_t) (UART_DIV_LPUART(
 8004e40:	f7fd fc6a 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4619      	mov	r1, r3
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	f04f 0400 	mov.w	r4, #0
 8004e54:	0214      	lsls	r4, r2, #8
 8004e56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e5a:	020b      	lsls	r3, r1, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	0852      	lsrs	r2, r2, #1
 8004e62:	4611      	mov	r1, r2
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	eb13 0b01 	adds.w	fp, r3, r1
 8004e6c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e70:	4658      	mov	r0, fp
 8004e72:	4661      	mov	r1, ip
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f04f 0400 	mov.w	r4, #0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	f7fb f9a2 	bl	80001c8 <__aeabi_uldivmod>
 8004e84:	4603      	mov	r3, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	617b      	str	r3, [r7, #20]
							HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
					break;
 8004e8a:	e017      	b.n	8004ebc <UART_SetConfig+0x46c>
				case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
					usartdiv = (uint32_t) (UART_DIV_LPUART(LSE_VALUE,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	f04f 0400 	mov.w	r4, #0
 8004e96:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004e9a:	f144 0100 	adc.w	r1, r4, #0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f04f 0400 	mov.w	r4, #0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	f7fb f98d 	bl	80001c8 <__aeabi_uldivmod>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	617b      	str	r3, [r7, #20]
							huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
					break;
 8004eb4:	e002      	b.n	8004ebc <UART_SetConfig+0x46c>
				case UART_CLOCKSOURCE_UNDEFINED:
				default:
					ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	74fb      	strb	r3, [r7, #19]
					break;
 8004eba:	bf00      	nop
				}

				/* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
				if ((usartdiv >= LPUART_BRR_MIN)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec2:	d308      	bcc.n	8004ed6 <UART_SetConfig+0x486>
						&& (usartdiv <= LPUART_BRR_MAX)) {
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eca:	d204      	bcs.n	8004ed6 <UART_SetConfig+0x486>
					huart->Instance->BRR = usartdiv;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e0f5      	b.n	80050c2 <UART_SetConfig+0x672>
				} else {
					ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	74fb      	strb	r3, [r7, #19]
 8004eda:	e0f2      	b.n	80050c2 <UART_SetConfig+0x672>
				}
			} /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
		} /* if (lpuart_ker_ck_pres != 0) */
	}
	/* Check UART Over Sampling to set Baud Rate Register */
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	d17f      	bne.n	8004fe6 <UART_SetConfig+0x596>
		switch (clocksource) {
 8004ee6:	7efb      	ldrb	r3, [r7, #27]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d85c      	bhi.n	8004fa6 <UART_SetConfig+0x556>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x4a4>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004fa7 	.word	0x08004fa7
 8004f04:	08004f71 	.word	0x08004f71
 8004f08:	08004fa7 	.word	0x08004fa7
 8004f0c:	08004fa7 	.word	0x08004fa7
 8004f10:	08004fa7 	.word	0x08004fa7
 8004f14:	08004f8f 	.word	0x08004f8f
		case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(),
 8004f18:	f7fd fc94 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	005a      	lsls	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8004f34:	e03a      	b.n	8004fac <UART_SetConfig+0x55c>
		case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(),
 8004f36:	f7fd fc9b 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	005a      	lsls	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8004f52:	e02b      	b.n	8004fac <UART_SetConfig+0x55c>
		case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(HSI_VALUE,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004f5e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6852      	ldr	r2, [r2, #4]
 8004f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8004f6e:	e01d      	b.n	8004fac <UART_SetConfig+0x55c>
		case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(),
 8004f70:	f7fd fbd2 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004f74:	4603      	mov	r3, r0
 8004f76:	005a      	lsls	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8004f8c:	e00e      	b.n	8004fac <UART_SetConfig+0x55c>
		case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(LSE_VALUE,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8004fa4:	e002      	b.n	8004fac <UART_SetConfig+0x55c>
		case UART_CLOCKSOURCE_UNDEFINED:
		default:
			ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	74fb      	strb	r3, [r7, #19]
			break;
 8004faa:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d916      	bls.n	8004fe0 <UART_SetConfig+0x590>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d212      	bcs.n	8004fe0 <UART_SetConfig+0x590>
			brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f023 030f 	bic.w	r3, r3, #15
 8004fc2:	817b      	strh	r3, [r7, #10]
			brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	897b      	ldrh	r3, [r7, #10]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	817b      	strh	r3, [r7, #10]
			huart->Instance->BRR = brrtemp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	897a      	ldrh	r2, [r7, #10]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e070      	b.n	80050c2 <UART_SetConfig+0x672>
		} else {
			ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	74fb      	strb	r3, [r7, #19]
 8004fe4:	e06d      	b.n	80050c2 <UART_SetConfig+0x672>
		}
	} else {
		switch (clocksource) {
 8004fe6:	7efb      	ldrb	r3, [r7, #27]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d859      	bhi.n	80050a0 <UART_SetConfig+0x650>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x5a4>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	08005051 	.word	0x08005051
 8005000:	080050a1 	.word	0x080050a1
 8005004:	0800506d 	.word	0x0800506d
 8005008:	080050a1 	.word	0x080050a1
 800500c:	080050a1 	.word	0x080050a1
 8005010:	080050a1 	.word	0x080050a1
 8005014:	08005089 	.word	0x08005089
		case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(),
 8005018:	f7fd fc14 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	441a      	add	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8005032:	e038      	b.n	80050a6 <UART_SetConfig+0x656>
		case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(),
 8005034:	f7fd fc1c 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 800504e:	e02a      	b.n	80050a6 <UART_SetConfig+0x656>
		case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(HSI_VALUE,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800505a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6852      	ldr	r2, [r2, #4]
 8005062:	fbb3 f3f2 	udiv	r3, r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 800506a:	e01c      	b.n	80050a6 <UART_SetConfig+0x656>
		case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(
 800506c:	f7fd fb54 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	617b      	str	r3, [r7, #20]
					HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 8005086:	e00e      	b.n	80050a6 <UART_SetConfig+0x656>
		case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(LSE_VALUE,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	617b      	str	r3, [r7, #20]
					huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
			break;
 800509e:	e002      	b.n	80050a6 <UART_SetConfig+0x656>
		case UART_CLOCKSOURCE_UNDEFINED:
		default:
			ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	74fb      	strb	r3, [r7, #19]
			break;
 80050a4:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d908      	bls.n	80050be <UART_SetConfig+0x66e>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d204      	bcs.n	80050be <UART_SetConfig+0x66e>
			huart->Instance->BRR = usartdiv;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e001      	b.n	80050c2 <UART_SetConfig+0x672>
		} else {
			ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	661a      	str	r2, [r3, #96]	; 0x60
	huart->TxISR = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	665a      	str	r2, [r3, #100]	; 0x64

	return ret;
 80050ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80050da:	bf00      	nop
 80050dc:	f4240000 	.word	0xf4240000

080050e0 <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x116>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	d10a      	bne.n	80051f6 <UART_AdvFeatureConfig+0x116>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x138>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Init tickstart for timeout managment*/
	tickstart = HAL_GetTick();
 8005232:	f7fb f9ad 	bl	8000590 <HAL_GetTick>
 8005236:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b08      	cmp	r3, #8
 8005244:	d10e      	bne.n	8005264 <UART_CheckIdleState+0x40>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8005246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f82a 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <UART_CheckIdleState+0x40>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e020      	b.n	80052a6 <UART_CheckIdleState+0x82>
		}
	}

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d10e      	bne.n	8005290 <UART_CheckIdleState+0x6c>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8005272:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f814 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <UART_CheckIdleState+0x6c>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e00a      	b.n	80052a6 <UART_CheckIdleState+0x82>
		}
	}

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	675a      	str	r2, [r3, #116]	; 0x74
	huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	679a      	str	r2, [r3, #120]	; 0x78

	__HAL_UNLOCK(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80052be:	e02a      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0x68>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d026      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x68>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80052c8:	f7fb f962 	bl	8000590 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11b      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0x68>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
				CLEAR_BIT(huart->Instance->CR1,
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052ec:	601a      	str	r2, [r3, #0]
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	609a      	str	r2, [r3, #8]

				huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	675a      	str	r2, [r3, #116]	; 0x74
				huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	679a      	str	r2, [r3, #120]	; 0x78

				__HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

				return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e00f      	b.n	8005336 <UART_WaitOnFlagUntilTimeout+0x88>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	429a      	cmp	r2, r3
 8005332:	d0c5      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005354:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	679a      	str	r2, [r3, #120]	; 0x78

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <UART_DMAAbortOnError>:
 * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = (UART_HandleTypeDef *) (hdma->Parent);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	60fb      	str	r3, [r7, #12]
	huart->RxXferCount = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	huart->TxXferCount = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
	/*Call legacy weak error callback*/
	HAL_UART_ErrorCallback(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fb4d 	bl	8004a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c0:	601a      	str	r2, [r3, #0]

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	675a      	str	r2, [r3, #116]	; 0x74

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fb2a 	bl	8004a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <RFM96_set_pins>:

/*********************************
 	 	 Radio Handling
 *********************************/
// DONE - Need to test
HAL_StatusTypeDef RFM96_set_pins(RFM96* sensor, SPI_HandleTypeDef spi_bus, GPIO_TypeDef* ss_gpio_port, uint16_t ss_pin, GPIO_TypeDef* reset_gpio_port, uint16_t reset_pin) {
 80053f0:	b084      	sub	sp, #16
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	f107 0014 	add.w	r0, r7, #20
 80053fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sensor->spi_bus = spi_bus;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	2264      	movs	r2, #100	; 0x64
 800540c:	4619      	mov	r1, r3
 800540e:	f001 fee1 	bl	80071d4 <memcpy>
	sensor->ss_gpio_port = ss_gpio_port;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005416:	665a      	str	r2, [r3, #100]	; 0x64
	sensor->ss_pin = ss_pin;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800541e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	sensor->reset_gpio_port = reset_gpio_port;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005428:	66da      	str	r2, [r3, #108]	; 0x6c
	sensor->reset_pin = reset_pin;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005430:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005440:	b004      	add	sp, #16
 8005442:	4770      	bx	lr

08005444 <RFM96_init>:

// DONE - Depending on set_tx_power and set_frequency/get_packet_rssi to complete
HAL_StatusTypeDef RFM96_init(RFM96* sensor, long frequency, uint8_t sensor_version) {
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b0a1      	sub	sp, #132	; 0x84
 8005448:	af1a      	add	r7, sp, #104	; 0x68
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
	uint8_t read_version = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	75bb      	strb	r3, [r7, #22]
	uint8_t read_value = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	757b      	strb	r3, [r7, #21]

	/* Performs Reset */
	status = RFM96_reset(sensor);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f8ff 	bl	8005662 <RFM96_reset>
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <RFM96_init+0x2e>
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	e0f3      	b.n	800565a <RFM96_init+0x216>

	/* Verifies Version */
	status = READ_REG(RFM96_REG_VERSION, &read_version);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800547c:	68fc      	ldr	r4, [r7, #12]
 800547e:	2164      	movs	r1, #100	; 0x64
 8005480:	9119      	str	r1, [sp, #100]	; 0x64
 8005482:	f107 0116 	add.w	r1, r7, #22
 8005486:	9118      	str	r1, [sp, #96]	; 0x60
 8005488:	2142      	movs	r1, #66	; 0x42
 800548a:	9117      	str	r1, [sp, #92]	; 0x5c
 800548c:	9216      	str	r2, [sp, #88]	; 0x58
 800548e:	9315      	str	r3, [sp, #84]	; 0x54
 8005490:	4668      	mov	r0, sp
 8005492:	f104 0310 	add.w	r3, r4, #16
 8005496:	2254      	movs	r2, #84	; 0x54
 8005498:	4619      	mov	r1, r3
 800549a:	f001 fe9b 	bl	80071d4 <memcpy>
 800549e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80054a2:	f001 fdbb 	bl	800701c <SPI_read_register>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <RFM96_init+0x70>
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	e0d2      	b.n	800565a <RFM96_init+0x216>
	if (read_version != sensor_version) {
 80054b4:	7dbb      	ldrb	r3, [r7, #22]
 80054b6:	79fa      	ldrb	r2, [r7, #7]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <RFM96_init+0x7c>
		return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0cc      	b.n	800565a <RFM96_init+0x216>
	}

	/* Set Sleep Mode */
	status = RFM96_set_op_mode(sensor, RFM96_LORA_MODE_SLEEP);
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f8f7 	bl	80056b6 <RFM96_set_op_mode>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <RFM96_init+0x92>
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	e0c1      	b.n	800565a <RFM96_init+0x216>

	/* Set Frequency */
	status = RFM96_set_frequency(sensor, frequency);
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f911 	bl	8005700 <RFM96_set_frequency>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <RFM96_init+0xa8>
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	e0b6      	b.n	800565a <RFM96_init+0x216>

	/* Set Base address */
	status = WRITE_REG(RFM96_REG_FIFO_RX_BASE_ADDR, 0x00);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80054f6:	68fc      	ldr	r4, [r7, #12]
 80054f8:	2164      	movs	r1, #100	; 0x64
 80054fa:	9119      	str	r1, [sp, #100]	; 0x64
 80054fc:	2100      	movs	r1, #0
 80054fe:	9118      	str	r1, [sp, #96]	; 0x60
 8005500:	210f      	movs	r1, #15
 8005502:	9117      	str	r1, [sp, #92]	; 0x5c
 8005504:	9216      	str	r2, [sp, #88]	; 0x58
 8005506:	9315      	str	r3, [sp, #84]	; 0x54
 8005508:	4668      	mov	r0, sp
 800550a:	f104 0310 	add.w	r3, r4, #16
 800550e:	2254      	movs	r2, #84	; 0x54
 8005510:	4619      	mov	r1, r3
 8005512:	f001 fe5f 	bl	80071d4 <memcpy>
 8005516:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800551a:	f001 fdc6 	bl	80070aa <SPI_write_register>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <RFM96_init+0xe8>
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	e096      	b.n	800565a <RFM96_init+0x216>
	status = WRITE_REG(RFM96_REG_FIFO_TX_BASE_ADDR, 0x00);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005536:	68fc      	ldr	r4, [r7, #12]
 8005538:	2164      	movs	r1, #100	; 0x64
 800553a:	9119      	str	r1, [sp, #100]	; 0x64
 800553c:	2100      	movs	r1, #0
 800553e:	9118      	str	r1, [sp, #96]	; 0x60
 8005540:	210e      	movs	r1, #14
 8005542:	9117      	str	r1, [sp, #92]	; 0x5c
 8005544:	9216      	str	r2, [sp, #88]	; 0x58
 8005546:	9315      	str	r3, [sp, #84]	; 0x54
 8005548:	4668      	mov	r0, sp
 800554a:	f104 0310 	add.w	r3, r4, #16
 800554e:	2254      	movs	r2, #84	; 0x54
 8005550:	4619      	mov	r1, r3
 8005552:	f001 fe3f 	bl	80071d4 <memcpy>
 8005556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800555a:	f001 fda6 	bl	80070aa <SPI_write_register>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <RFM96_init+0x128>
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	e076      	b.n	800565a <RFM96_init+0x216>

	/* Set LNA boost */
	status = READ_REG(RFM96_REG_LNA, &read_value);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005576:	68fc      	ldr	r4, [r7, #12]
 8005578:	2164      	movs	r1, #100	; 0x64
 800557a:	9119      	str	r1, [sp, #100]	; 0x64
 800557c:	f107 0115 	add.w	r1, r7, #21
 8005580:	9118      	str	r1, [sp, #96]	; 0x60
 8005582:	210c      	movs	r1, #12
 8005584:	9117      	str	r1, [sp, #92]	; 0x5c
 8005586:	9216      	str	r2, [sp, #88]	; 0x58
 8005588:	9315      	str	r3, [sp, #84]	; 0x54
 800558a:	4668      	mov	r0, sp
 800558c:	f104 0310 	add.w	r3, r4, #16
 8005590:	2254      	movs	r2, #84	; 0x54
 8005592:	4619      	mov	r1, r3
 8005594:	f001 fe1e 	bl	80071d4 <memcpy>
 8005598:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800559c:	f001 fd3e 	bl	800701c <SPI_read_register>
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <RFM96_init+0x16a>
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	e055      	b.n	800565a <RFM96_init+0x216>
	status = WRITE_REG(RFM96_REG_LNA, read_value | 0x03);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80055b8:	7d79      	ldrb	r1, [r7, #21]
 80055ba:	f041 0103 	orr.w	r1, r1, #3
 80055be:	b2c9      	uxtb	r1, r1
 80055c0:	68fc      	ldr	r4, [r7, #12]
 80055c2:	2064      	movs	r0, #100	; 0x64
 80055c4:	9019      	str	r0, [sp, #100]	; 0x64
 80055c6:	9118      	str	r1, [sp, #96]	; 0x60
 80055c8:	210c      	movs	r1, #12
 80055ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80055cc:	9216      	str	r2, [sp, #88]	; 0x58
 80055ce:	9315      	str	r3, [sp, #84]	; 0x54
 80055d0:	4668      	mov	r0, sp
 80055d2:	f104 0310 	add.w	r3, r4, #16
 80055d6:	2254      	movs	r2, #84	; 0x54
 80055d8:	4619      	mov	r1, r3
 80055da:	f001 fdfb 	bl	80071d4 <memcpy>
 80055de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80055e2:	f001 fd62 	bl	80070aa <SPI_write_register>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <RFM96_init+0x1b0>
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	e032      	b.n	800565a <RFM96_init+0x216>

	/* Set auto AGC */
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_3, 0x04);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80055fe:	68fc      	ldr	r4, [r7, #12]
 8005600:	2164      	movs	r1, #100	; 0x64
 8005602:	9119      	str	r1, [sp, #100]	; 0x64
 8005604:	2104      	movs	r1, #4
 8005606:	9118      	str	r1, [sp, #96]	; 0x60
 8005608:	2126      	movs	r1, #38	; 0x26
 800560a:	9117      	str	r1, [sp, #92]	; 0x5c
 800560c:	9216      	str	r2, [sp, #88]	; 0x58
 800560e:	9315      	str	r3, [sp, #84]	; 0x54
 8005610:	4668      	mov	r0, sp
 8005612:	f104 0310 	add.w	r3, r4, #16
 8005616:	2254      	movs	r2, #84	; 0x54
 8005618:	4619      	mov	r1, r3
 800561a:	f001 fddb 	bl	80071d4 <memcpy>
 800561e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005622:	f001 fd42 	bl	80070aa <SPI_write_register>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <RFM96_init+0x1f0>
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	e012      	b.n	800565a <RFM96_init+0x216>

	/* Set Output Power */
	status = RFM96_set_tx_power(sensor, 17, RFM96_LORA_PA_BOOST_PIN);
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	2111      	movs	r1, #17
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f8f1 	bl	8005820 <RFM96_set_tx_power>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <RFM96_init+0x208>
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	e006      	b.n	800565a <RFM96_init+0x216>

	/* Set Standby Mode */
	status = RFM96_set_op_mode(sensor, RFM96_LORA_MODE_STANDBY);
 800564c:	2181      	movs	r1, #129	; 0x81
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f831 	bl	80056b6 <RFM96_set_op_mode>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]
	return status;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}

08005662 <RFM96_reset>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_reset(RFM96* sensor) {
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]

	if (sensor->ss_pin != RFM96_IGNORE_RESET_PIN) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005678:	4293      	cmp	r3, r2
 800567a:	d017      	beq.n	80056ac <RFM96_reset+0x4a>
		HAL_GPIO_WritePin(sensor->reset_gpio_port, sensor->reset_pin, GPIO_PIN_RESET);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8005686:	2200      	movs	r2, #0
 8005688:	4619      	mov	r1, r3
 800568a:	f7fc faf9 	bl	8001c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800568e:	200a      	movs	r0, #10
 8005690:	f7fa ff8a 	bl	80005a8 <HAL_Delay>
		HAL_GPIO_WritePin(sensor->reset_gpio_port, sensor->reset_pin, GPIO_PIN_SET);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800569e:	2201      	movs	r2, #1
 80056a0:	4619      	mov	r1, r3
 80056a2:	f7fc faed 	bl	8001c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80056a6:	200a      	movs	r0, #10
 80056a8:	f7fa ff7e 	bl	80005a8 <HAL_Delay>
	}

	return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <RFM96_set_op_mode>:

/*********************************
 	 	 Radio Configuration
 *********************************/
// DONE - Need to test
HAL_StatusTypeDef RFM96_set_op_mode(RFM96* sensor, uint8_t mode) {
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b09d      	sub	sp, #116	; 0x74
 80056ba:	af1a      	add	r7, sp, #104	; 0x68
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
	return WRITE_REG(RFM96_REG_OP_MODE, mode);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80056cc:	687c      	ldr	r4, [r7, #4]
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	9119      	str	r1, [sp, #100]	; 0x64
 80056d2:	78f9      	ldrb	r1, [r7, #3]
 80056d4:	9118      	str	r1, [sp, #96]	; 0x60
 80056d6:	2101      	movs	r1, #1
 80056d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80056da:	9216      	str	r2, [sp, #88]	; 0x58
 80056dc:	9315      	str	r3, [sp, #84]	; 0x54
 80056de:	4668      	mov	r0, sp
 80056e0:	f104 0310 	add.w	r3, r4, #16
 80056e4:	2254      	movs	r2, #84	; 0x54
 80056e6:	4619      	mov	r1, r3
 80056e8:	f001 fd74 	bl	80071d4 <memcpy>
 80056ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80056f0:	f001 fcdb 	bl	80070aa <SPI_write_register>
 80056f4:	4603      	mov	r3, r0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
	...

08005700 <RFM96_set_frequency>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_set_frequency(RFM96* sensor, long frequency) {
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	b0a1      	sub	sp, #132	; 0x84
 8005704:	af1a      	add	r7, sp, #104	; 0x68
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005714:	135e      	asrs	r6, r3, #13
 8005716:	04dd      	lsls	r5, r3, #19
 8005718:	4a40      	ldr	r2, [pc, #256]	; (800581c <RFM96_set_frequency+0x11c>)
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	4628      	mov	r0, r5
 8005720:	4631      	mov	r1, r6
 8005722:	f7fa fd51 	bl	80001c8 <__aeabi_uldivmod>
 8005726:	4603      	mov	r3, r0
 8005728:	460c      	mov	r4, r1
 800572a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	sensor->frequency = frequency;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	675a      	str	r2, [r3, #116]	; 0x74

	status = WRITE_REG(RFM96_REG_FRF_MSB, (uint8_t )(frf >> 16));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 800573e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	0c0b      	lsrs	r3, r1, #16
 800574c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005750:	0c14      	lsrs	r4, r2, #16
 8005752:	b2db      	uxtb	r3, r3
 8005754:	687c      	ldr	r4, [r7, #4]
 8005756:	2264      	movs	r2, #100	; 0x64
 8005758:	9219      	str	r2, [sp, #100]	; 0x64
 800575a:	9318      	str	r3, [sp, #96]	; 0x60
 800575c:	2306      	movs	r3, #6
 800575e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005760:	9516      	str	r5, [sp, #88]	; 0x58
 8005762:	9015      	str	r0, [sp, #84]	; 0x54
 8005764:	4668      	mov	r0, sp
 8005766:	f104 0310 	add.w	r3, r4, #16
 800576a:	2254      	movs	r2, #84	; 0x54
 800576c:	4619      	mov	r1, r3
 800576e:	f001 fd31 	bl	80071d4 <memcpy>
 8005772:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005776:	f001 fc98 	bl	80070aa <SPI_write_register>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <RFM96_set_frequency+0x88>
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	e045      	b.n	8005814 <RFM96_set_frequency+0x114>
	status = WRITE_REG(RFM96_REG_FRF_MID, (uint8_t )(frf >> 8));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8005792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	f04f 0400 	mov.w	r4, #0
 800579e:	0a0b      	lsrs	r3, r1, #8
 80057a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057a4:	0a14      	lsrs	r4, r2, #8
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	687c      	ldr	r4, [r7, #4]
 80057aa:	2264      	movs	r2, #100	; 0x64
 80057ac:	9219      	str	r2, [sp, #100]	; 0x64
 80057ae:	9318      	str	r3, [sp, #96]	; 0x60
 80057b0:	2307      	movs	r3, #7
 80057b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80057b4:	9516      	str	r5, [sp, #88]	; 0x58
 80057b6:	9015      	str	r0, [sp, #84]	; 0x54
 80057b8:	4668      	mov	r0, sp
 80057ba:	f104 0310 	add.w	r3, r4, #16
 80057be:	2254      	movs	r2, #84	; 0x54
 80057c0:	4619      	mov	r1, r3
 80057c2:	f001 fd07 	bl	80071d4 <memcpy>
 80057c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057ca:	f001 fc6e 	bl	80070aa <SPI_write_register>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <RFM96_set_frequency+0xdc>
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	e01b      	b.n	8005814 <RFM96_set_frequency+0x114>
	status = WRITE_REG(RFM96_REG_FRF_LSB, (uint8_t )(frf));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80057e6:	7a39      	ldrb	r1, [r7, #8]
 80057e8:	687c      	ldr	r4, [r7, #4]
 80057ea:	2064      	movs	r0, #100	; 0x64
 80057ec:	9019      	str	r0, [sp, #100]	; 0x64
 80057ee:	9118      	str	r1, [sp, #96]	; 0x60
 80057f0:	2108      	movs	r1, #8
 80057f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80057f4:	9216      	str	r2, [sp, #88]	; 0x58
 80057f6:	9315      	str	r3, [sp, #84]	; 0x54
 80057f8:	4668      	mov	r0, sp
 80057fa:	f104 0310 	add.w	r3, r4, #16
 80057fe:	2254      	movs	r2, #84	; 0x54
 8005800:	4619      	mov	r1, r3
 8005802:	f001 fce7 	bl	80071d4 <memcpy>
 8005806:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800580a:	f001 fc4e 	bl	80070aa <SPI_write_register>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
	return status;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581c:	01e84800 	.word	0x01e84800

08005820 <RFM96_set_tx_power>:

// PARTIAL - Need to implement MaxPower and understand OCP values
HAL_StatusTypeDef RFM96_set_tx_power(RFM96* sensor, int power,
		uint8_t pa_out_pin) {
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b0a1      	sub	sp, #132	; 0x84
 8005824:	af1a      	add	r7, sp, #104	; 0x68
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
	uint8_t pa_config_val = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	75bb      	strb	r3, [r7, #22]

	/* Protects against invalid values */
	if (power < 0) {
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da01      	bge.n	8005840 <RFM96_set_tx_power+0x20>
		power = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
	}

	/* Selects Output Pin */
	if (pa_out_pin == RFM96_LORA_PA_RFO_PIN) {
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b70      	cmp	r3, #112	; 0x70
 8005844:	d12f      	bne.n	80058a6 <RFM96_set_tx_power+0x86>
		/* Low Power */
		if (power > 14) {
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b0e      	cmp	r3, #14
 800584a:	dd01      	ble.n	8005850 <RFM96_set_tx_power+0x30>
			power = 14;
 800584c:	230e      	movs	r3, #14
 800584e:	60bb      	str	r3, [r7, #8]
		}

		/* Default Operation (section 5.4.3) */
		status = WRITE_REG(RFM96_REG_PA_DAC, 0x84);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800585a:	68fc      	ldr	r4, [r7, #12]
 800585c:	2164      	movs	r1, #100	; 0x64
 800585e:	9119      	str	r1, [sp, #100]	; 0x64
 8005860:	2184      	movs	r1, #132	; 0x84
 8005862:	9118      	str	r1, [sp, #96]	; 0x60
 8005864:	214d      	movs	r1, #77	; 0x4d
 8005866:	9117      	str	r1, [sp, #92]	; 0x5c
 8005868:	9216      	str	r2, [sp, #88]	; 0x58
 800586a:	9315      	str	r3, [sp, #84]	; 0x54
 800586c:	4668      	mov	r0, sp
 800586e:	f104 0310 	add.w	r3, r4, #16
 8005872:	2254      	movs	r2, #84	; 0x54
 8005874:	4619      	mov	r1, r3
 8005876:	f001 fcad 	bl	80071d4 <memcpy>
 800587a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800587e:	f001 fc14 	bl	80070aa <SPI_write_register>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]
		RETURN_ON_ERROR(status);
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <RFM96_set_tx_power+0x70>
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	e08c      	b.n	80059aa <RFM96_set_tx_power+0x18a>
		status = RFM96_set_ocp(sensor, 100);				///?
 8005890:	2164      	movs	r1, #100	; 0x64
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f956 	bl	8005b44 <RFM96_set_ocp>
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]
		RETURN_ON_ERROR(status);
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d064      	beq.n	800596c <RFM96_set_tx_power+0x14c>
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	e081      	b.n	80059aa <RFM96_set_tx_power+0x18a>

	} else if (pa_out_pin == RFM96_LORA_PA_BOOST_PIN) {
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d15d      	bne.n	8005968 <RFM96_set_tx_power+0x148>
		/* High Power */
		if (power > 17) {
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b11      	cmp	r3, #17
 80058b0:	dd2f      	ble.n	8005912 <RFM96_set_tx_power+0xf2>
			/* Protects against invalid values */
			if (power > 20) {
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b14      	cmp	r3, #20
 80058b6:	dd01      	ble.n	80058bc <RFM96_set_tx_power+0x9c>
				power = 20;
 80058b8:	2314      	movs	r3, #20
 80058ba:	60bb      	str	r3, [r7, #8]
			}

			/* +20 dBm Operation (section 5.4.3) */
			status = WRITE_REG(RFM96_REG_PA_DAC, 0x87);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80058c6:	68fc      	ldr	r4, [r7, #12]
 80058c8:	2164      	movs	r1, #100	; 0x64
 80058ca:	9119      	str	r1, [sp, #100]	; 0x64
 80058cc:	2187      	movs	r1, #135	; 0x87
 80058ce:	9118      	str	r1, [sp, #96]	; 0x60
 80058d0:	214d      	movs	r1, #77	; 0x4d
 80058d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80058d4:	9216      	str	r2, [sp, #88]	; 0x58
 80058d6:	9315      	str	r3, [sp, #84]	; 0x54
 80058d8:	4668      	mov	r0, sp
 80058da:	f104 0310 	add.w	r3, r4, #16
 80058de:	2254      	movs	r2, #84	; 0x54
 80058e0:	4619      	mov	r1, r3
 80058e2:	f001 fc77 	bl	80071d4 <memcpy>
 80058e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058ea:	f001 fbde 	bl	80070aa <SPI_write_register>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]
			RETURN_ON_ERROR(status);
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <RFM96_set_tx_power+0xdc>
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
 80058fa:	e056      	b.n	80059aa <RFM96_set_tx_power+0x18a>
			status = RFM96_set_ocp(sensor, 140);			///?
 80058fc:	218c      	movs	r1, #140	; 0x8c
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f920 	bl	8005b44 <RFM96_set_ocp>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]
			RETURN_ON_ERROR(status);
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02e      	beq.n	800596c <RFM96_set_tx_power+0x14c>
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	e04b      	b.n	80059aa <RFM96_set_tx_power+0x18a>

		} else {
			/* Default Operation (section 5.4.3) */
			status = WRITE_REG(RFM96_REG_PA_DAC, 0x84);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800591c:	68fc      	ldr	r4, [r7, #12]
 800591e:	2164      	movs	r1, #100	; 0x64
 8005920:	9119      	str	r1, [sp, #100]	; 0x64
 8005922:	2184      	movs	r1, #132	; 0x84
 8005924:	9118      	str	r1, [sp, #96]	; 0x60
 8005926:	214d      	movs	r1, #77	; 0x4d
 8005928:	9117      	str	r1, [sp, #92]	; 0x5c
 800592a:	9216      	str	r2, [sp, #88]	; 0x58
 800592c:	9315      	str	r3, [sp, #84]	; 0x54
 800592e:	4668      	mov	r0, sp
 8005930:	f104 0310 	add.w	r3, r4, #16
 8005934:	2254      	movs	r2, #84	; 0x54
 8005936:	4619      	mov	r1, r3
 8005938:	f001 fc4c 	bl	80071d4 <memcpy>
 800593c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005940:	f001 fbb3 	bl	80070aa <SPI_write_register>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]
			RETURN_ON_ERROR(status);
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <RFM96_set_tx_power+0x132>
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	e02b      	b.n	80059aa <RFM96_set_tx_power+0x18a>
			status = RFM96_set_ocp(sensor, 100);			///?
 8005952:	2164      	movs	r1, #100	; 0x64
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f8f5 	bl	8005b44 <RFM96_set_ocp>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
			RETURN_ON_ERROR(status);
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <RFM96_set_tx_power+0x14c>
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	e020      	b.n	80059aa <RFM96_set_tx_power+0x18a>

		}
	} else {
		/* Invalid Output Pin */
		return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e01e      	b.n	80059aa <RFM96_set_tx_power+0x18a>
	}

	/* Writes Final value in PaConfig */
	pa_config_val = ((uint8_t) power) | pa_out_pin;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	4313      	orrs	r3, r2
 8005974:	75bb      	strb	r3, [r7, #22]
	return WRITE_REG(RFM96_REG_PA_CONFIG, pa_config_val);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005980:	68fc      	ldr	r4, [r7, #12]
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	9119      	str	r1, [sp, #100]	; 0x64
 8005986:	7db9      	ldrb	r1, [r7, #22]
 8005988:	9118      	str	r1, [sp, #96]	; 0x60
 800598a:	2109      	movs	r1, #9
 800598c:	9117      	str	r1, [sp, #92]	; 0x5c
 800598e:	9216      	str	r2, [sp, #88]	; 0x58
 8005990:	9315      	str	r3, [sp, #84]	; 0x54
 8005992:	4668      	mov	r0, sp
 8005994:	f104 0310 	add.w	r3, r4, #16
 8005998:	2254      	movs	r2, #84	; 0x54
 800599a:	4619      	mov	r1, r3
 800599c:	f001 fc1a 	bl	80071d4 <memcpy>
 80059a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80059a4:	f001 fb81 	bl	80070aa <SPI_write_register>
 80059a8:	4603      	mov	r3, r0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}

080059b2 <RFM96_set_spreading_factor>:

// PARTIAL - Need to implement Special Case SF6
HAL_StatusTypeDef RFM96_set_spreading_factor(RFM96* sensor, uint8_t sf) {
 80059b2:	b590      	push	{r4, r7, lr}
 80059b4:	b09f      	sub	sp, #124	; 0x7c
 80059b6:	af1a      	add	r7, sp, #104	; 0x68
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73bb      	strb	r3, [r7, #14]

	/* Protects against invalid spreading factor values */
	if (sf < 6) {
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d802      	bhi.n	80059d2 <RFM96_set_spreading_factor+0x20>
		sf = 6;
 80059cc:	2306      	movs	r3, #6
 80059ce:	70fb      	strb	r3, [r7, #3]
 80059d0:	e004      	b.n	80059dc <RFM96_set_spreading_factor+0x2a>
	} else if (sf > 12) {
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d901      	bls.n	80059dc <RFM96_set_spreading_factor+0x2a>
		sf = 12;
 80059d8:	230c      	movs	r3, #12
 80059da:	70fb      	strb	r3, [r7, #3]
		/* Set bits 2-0 of register detection optimize (address 0x31) to value "0b101" */
		/* Set register detection threshold (address 0x37) to value 0x0C */
	}

	/* Set sf in Register ModemConfig2 */
	status = READ_REG(RFM96_REG_MODEM_CONFIG_2, &reg_val);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80059e6:	687c      	ldr	r4, [r7, #4]
 80059e8:	2164      	movs	r1, #100	; 0x64
 80059ea:	9119      	str	r1, [sp, #100]	; 0x64
 80059ec:	f107 010e 	add.w	r1, r7, #14
 80059f0:	9118      	str	r1, [sp, #96]	; 0x60
 80059f2:	211e      	movs	r1, #30
 80059f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80059f6:	9216      	str	r2, [sp, #88]	; 0x58
 80059f8:	9315      	str	r3, [sp, #84]	; 0x54
 80059fa:	4668      	mov	r0, sp
 80059fc:	f104 0310 	add.w	r3, r4, #16
 8005a00:	2254      	movs	r2, #84	; 0x54
 8005a02:	4619      	mov	r1, r3
 8005a04:	f001 fbe6 	bl	80071d4 <memcpy>
 8005a08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a0c:	f001 fb06 	bl	800701c <SPI_read_register>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <RFM96_set_spreading_factor+0x6c>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	e02f      	b.n	8005a7e <RFM96_set_spreading_factor+0xcc>
	reg_val = RFM96_LORA_SET_SF(reg_val, sf);
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	b25a      	sxtb	r2, r3
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	b25b      	sxtb	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_2, reg_val);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005a40:	7bb9      	ldrb	r1, [r7, #14]
 8005a42:	687c      	ldr	r4, [r7, #4]
 8005a44:	2064      	movs	r0, #100	; 0x64
 8005a46:	9019      	str	r0, [sp, #100]	; 0x64
 8005a48:	9118      	str	r1, [sp, #96]	; 0x60
 8005a4a:	211e      	movs	r1, #30
 8005a4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a4e:	9216      	str	r2, [sp, #88]	; 0x58
 8005a50:	9315      	str	r3, [sp, #84]	; 0x54
 8005a52:	4668      	mov	r0, sp
 8005a54:	f104 0310 	add.w	r3, r4, #16
 8005a58:	2254      	movs	r2, #84	; 0x54
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f001 fbba 	bl	80071d4 <memcpy>
 8005a60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a64:	f001 fb21 	bl	80070aa <SPI_write_register>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <RFM96_set_spreading_factor+0xc4>
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	e003      	b.n	8005a7e <RFM96_set_spreading_factor+0xcc>

	return RFM96_set_ldo_flag(sensor);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f978 	bl	8005d6c <RFM96_set_ldo_flag>
 8005a7c:	4603      	mov	r3, r0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd90      	pop	{r4, r7, pc}

08005a86 <RFM96_set_signal_bandwidth>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_set_signal_bandwidth(RFM96* sensor, uint8_t bw) {
 8005a86:	b590      	push	{r4, r7, lr}
 8005a88:	b09f      	sub	sp, #124	; 0x7c
 8005a8a:	af1a      	add	r7, sp, #104	; 0x68
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_MODEM_CONFIG_1, &read_value);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005aa4:	687c      	ldr	r4, [r7, #4]
 8005aa6:	2164      	movs	r1, #100	; 0x64
 8005aa8:	9119      	str	r1, [sp, #100]	; 0x64
 8005aaa:	f107 010e 	add.w	r1, r7, #14
 8005aae:	9118      	str	r1, [sp, #96]	; 0x60
 8005ab0:	211d      	movs	r1, #29
 8005ab2:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ab4:	9216      	str	r2, [sp, #88]	; 0x58
 8005ab6:	9315      	str	r3, [sp, #84]	; 0x54
 8005ab8:	4668      	mov	r0, sp
 8005aba:	f104 0310 	add.w	r3, r4, #16
 8005abe:	2254      	movs	r2, #84	; 0x54
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f001 fb87 	bl	80071d4 <memcpy>
 8005ac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005aca:	f001 faa7 	bl	800701c <SPI_read_register>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <RFM96_set_signal_bandwidth+0x56>
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	e02e      	b.n	8005b3a <RFM96_set_signal_bandwidth+0xb4>
	read_value = (RFM96_LORA_BW_CLR(read_value)) | bw;
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	b25a      	sxtb	r2, r3
 8005ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_1, read_value);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005afc:	7bb9      	ldrb	r1, [r7, #14]
 8005afe:	687c      	ldr	r4, [r7, #4]
 8005b00:	2064      	movs	r0, #100	; 0x64
 8005b02:	9019      	str	r0, [sp, #100]	; 0x64
 8005b04:	9118      	str	r1, [sp, #96]	; 0x60
 8005b06:	211d      	movs	r1, #29
 8005b08:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b0a:	9216      	str	r2, [sp, #88]	; 0x58
 8005b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8005b0e:	4668      	mov	r0, sp
 8005b10:	f104 0310 	add.w	r3, r4, #16
 8005b14:	2254      	movs	r2, #84	; 0x54
 8005b16:	4619      	mov	r1, r3
 8005b18:	f001 fb5c 	bl	80071d4 <memcpy>
 8005b1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005b20:	f001 fac3 	bl	80070aa <SPI_write_register>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <RFM96_set_signal_bandwidth+0xac>
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	e003      	b.n	8005b3a <RFM96_set_signal_bandwidth+0xb4>

	return RFM96_set_ldo_flag(sensor);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f91a 	bl	8005d6c <RFM96_set_ldo_flag>
 8005b38:	4603      	mov	r3, r0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd90      	pop	{r4, r7, pc}
	...

08005b44 <RFM96_set_ocp>:

	return RFM96_set_ldo_flag(sensor);
}

// DONE - Need to test
HAL_StatusTypeDef RFM96_set_ocp(RFM96* sensor, uint16_t current_mA) {
 8005b44:	b590      	push	{r4, r7, lr}
 8005b46:	b09f      	sub	sp, #124	; 0x7c
 8005b48:	af1a      	add	r7, sp, #104	; 0x68
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
	uint8_t ocp_trim = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]
	uint8_t ocp_val = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73bb      	strb	r3, [r7, #14]

	/* calculates register value corresponding to current (section 5.4.4) */
	if (current_mA >= 240) {
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	2bef      	cmp	r3, #239	; 0xef
 8005b5c:	d902      	bls.n	8005b64 <RFM96_set_ocp+0x20>
		ocp_trim = 28;
 8005b5e:	231c      	movs	r3, #28
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e01e      	b.n	8005ba2 <RFM96_set_ocp+0x5e>
	} else if (current_mA > 120) {
 8005b64:	887b      	ldrh	r3, [r7, #2]
 8005b66:	2b78      	cmp	r3, #120	; 0x78
 8005b68:	d909      	bls.n	8005b7e <RFM96_set_ocp+0x3a>
		ocp_trim = (current_mA + 30) / 10;
 8005b6a:	887b      	ldrh	r3, [r7, #2]
 8005b6c:	331e      	adds	r3, #30
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <RFM96_set_ocp+0xa8>)
 8005b70:	fb82 1203 	smull	r1, r2, r2, r3
 8005b74:	1092      	asrs	r2, r2, #2
 8005b76:	17db      	asrs	r3, r3, #31
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e011      	b.n	8005ba2 <RFM96_set_ocp+0x5e>
	} else if (current_mA >= 45) {
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	2b2c      	cmp	r3, #44	; 0x2c
 8005b82:	d909      	bls.n	8005b98 <RFM96_set_ocp+0x54>
		ocp_trim = (current_mA - 45) / 5;
 8005b84:	887b      	ldrh	r3, [r7, #2]
 8005b86:	3b2d      	subs	r3, #45	; 0x2d
 8005b88:	4a18      	ldr	r2, [pc, #96]	; (8005bec <RFM96_set_ocp+0xa8>)
 8005b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8005b8e:	1052      	asrs	r2, r2, #1
 8005b90:	17db      	asrs	r3, r3, #31
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	73fb      	strb	r3, [r7, #15]
 8005b96:	e004      	b.n	8005ba2 <RFM96_set_ocp+0x5e>
	} else {
		return RFM96_disable_ocp(sensor);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f829 	bl	8005bf0 <RFM96_disable_ocp>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	e020      	b.n	8005be4 <RFM96_set_ocp+0xa0>
	}

	ocp_val = RFM96_LORA_OCP_SET(ocp_trim);
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f043 0320 	orr.w	r3, r3, #32
 8005bae:	73bb      	strb	r3, [r7, #14]

	return WRITE_REG(RFM96_REG_OCP, ocp_val);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005bba:	687c      	ldr	r4, [r7, #4]
 8005bbc:	2164      	movs	r1, #100	; 0x64
 8005bbe:	9119      	str	r1, [sp, #100]	; 0x64
 8005bc0:	7bb9      	ldrb	r1, [r7, #14]
 8005bc2:	9118      	str	r1, [sp, #96]	; 0x60
 8005bc4:	210b      	movs	r1, #11
 8005bc6:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bc8:	9216      	str	r2, [sp, #88]	; 0x58
 8005bca:	9315      	str	r3, [sp, #84]	; 0x54
 8005bcc:	4668      	mov	r0, sp
 8005bce:	f104 0310 	add.w	r3, r4, #16
 8005bd2:	2254      	movs	r2, #84	; 0x54
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	f001 fafd 	bl	80071d4 <memcpy>
 8005bda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005bde:	f001 fa64 	bl	80070aa <SPI_write_register>
 8005be2:	4603      	mov	r3, r0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd90      	pop	{r4, r7, pc}
 8005bec:	66666667 	.word	0x66666667

08005bf0 <RFM96_disable_ocp>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_disable_ocp(RFM96* sensor) {
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b09d      	sub	sp, #116	; 0x74
 8005bf4:	af1a      	add	r7, sp, #104	; 0x68
 8005bf6:	6078      	str	r0, [r7, #4]
	return WRITE_REG(RFM96_REG_OCP, RFM96_LORA_OCP_RESET);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005c02:	687c      	ldr	r4, [r7, #4]
 8005c04:	2164      	movs	r1, #100	; 0x64
 8005c06:	9119      	str	r1, [sp, #100]	; 0x64
 8005c08:	2100      	movs	r1, #0
 8005c0a:	9118      	str	r1, [sp, #96]	; 0x60
 8005c0c:	210b      	movs	r1, #11
 8005c0e:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c10:	9216      	str	r2, [sp, #88]	; 0x58
 8005c12:	9315      	str	r3, [sp, #84]	; 0x54
 8005c14:	4668      	mov	r0, sp
 8005c16:	f104 0310 	add.w	r3, r4, #16
 8005c1a:	2254      	movs	r2, #84	; 0x54
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f001 fad9 	bl	80071d4 <memcpy>
 8005c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005c26:	f001 fa40 	bl	80070aa <SPI_write_register>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}

08005c34 <RFM96_enable_crc>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_enable_crc(RFM96* sensor) {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b09f      	sub	sp, #124	; 0x7c
 8005c38:	af1a      	add	r7, sp, #104	; 0x68
 8005c3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_MODEM_CONFIG_2, &read_value);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005c4e:	687c      	ldr	r4, [r7, #4]
 8005c50:	2164      	movs	r1, #100	; 0x64
 8005c52:	9119      	str	r1, [sp, #100]	; 0x64
 8005c54:	f107 010e 	add.w	r1, r7, #14
 8005c58:	9118      	str	r1, [sp, #96]	; 0x60
 8005c5a:	211e      	movs	r1, #30
 8005c5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c5e:	9216      	str	r2, [sp, #88]	; 0x58
 8005c60:	9315      	str	r3, [sp, #84]	; 0x54
 8005c62:	4668      	mov	r0, sp
 8005c64:	f104 0310 	add.w	r3, r4, #16
 8005c68:	2254      	movs	r2, #84	; 0x54
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f001 fab2 	bl	80071d4 <memcpy>
 8005c70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005c74:	f001 f9d2 	bl	800701c <SPI_read_register>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <RFM96_enable_crc+0x52>
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	e020      	b.n	8005cc8 <RFM96_enable_crc+0x94>
	read_value = RFM96_LORA_CRC_SET(read_value);
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_2, read_value);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005c9a:	7bb9      	ldrb	r1, [r7, #14]
 8005c9c:	687c      	ldr	r4, [r7, #4]
 8005c9e:	2064      	movs	r0, #100	; 0x64
 8005ca0:	9019      	str	r0, [sp, #100]	; 0x64
 8005ca2:	9118      	str	r1, [sp, #96]	; 0x60
 8005ca4:	211e      	movs	r1, #30
 8005ca6:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ca8:	9216      	str	r2, [sp, #88]	; 0x58
 8005caa:	9315      	str	r3, [sp, #84]	; 0x54
 8005cac:	4668      	mov	r0, sp
 8005cae:	f104 0310 	add.w	r3, r4, #16
 8005cb2:	2254      	movs	r2, #84	; 0x54
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f001 fa8d 	bl	80071d4 <memcpy>
 8005cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005cbe:	f001 f9f4 	bl	80070aa <SPI_write_register>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
	return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}

08005cd0 <RFM96_explicit_header_mode>:
	read_value = RFM96_LORA_CRC_RESET(read_value);
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_2, read_value);
	return status;
}

HAL_StatusTypeDef RFM96_explicit_header_mode(RFM96* sensor) {
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b09f      	sub	sp, #124	; 0x7c
 8005cd4:	af1a      	add	r7, sp, #104	; 0x68
 8005cd6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_MODEM_CONFIG_1, &reg_value);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005cea:	687c      	ldr	r4, [r7, #4]
 8005cec:	2164      	movs	r1, #100	; 0x64
 8005cee:	9119      	str	r1, [sp, #100]	; 0x64
 8005cf0:	f107 010e 	add.w	r1, r7, #14
 8005cf4:	9118      	str	r1, [sp, #96]	; 0x60
 8005cf6:	211d      	movs	r1, #29
 8005cf8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005cfa:	9216      	str	r2, [sp, #88]	; 0x58
 8005cfc:	9315      	str	r3, [sp, #84]	; 0x54
 8005cfe:	4668      	mov	r0, sp
 8005d00:	f104 0310 	add.w	r3, r4, #16
 8005d04:	2254      	movs	r2, #84	; 0x54
 8005d06:	4619      	mov	r1, r3
 8005d08:	f001 fa64 	bl	80071d4 <memcpy>
 8005d0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005d10:	f001 f984 	bl	800701c <SPI_read_register>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <RFM96_explicit_header_mode+0x52>
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	e020      	b.n	8005d64 <RFM96_explicit_header_mode+0x94>
	reg_value = RFM96_LORA_EXPLICIT(reg_value);
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_1, reg_value);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005d36:	7bb9      	ldrb	r1, [r7, #14]
 8005d38:	687c      	ldr	r4, [r7, #4]
 8005d3a:	2064      	movs	r0, #100	; 0x64
 8005d3c:	9019      	str	r0, [sp, #100]	; 0x64
 8005d3e:	9118      	str	r1, [sp, #96]	; 0x60
 8005d40:	211d      	movs	r1, #29
 8005d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d44:	9216      	str	r2, [sp, #88]	; 0x58
 8005d46:	9315      	str	r3, [sp, #84]	; 0x54
 8005d48:	4668      	mov	r0, sp
 8005d4a:	f104 0310 	add.w	r3, r4, #16
 8005d4e:	2254      	movs	r2, #84	; 0x54
 8005d50:	4619      	mov	r1, r3
 8005d52:	f001 fa3f 	bl	80071d4 <memcpy>
 8005d56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005d5a:	f001 f9a6 	bl	80070aa <SPI_write_register>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
	return status;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd90      	pop	{r4, r7, pc}

08005d6c <RFM96_set_ldo_flag>:
	status = WRITE_REG(RFM96_REG_MODEM_CONFIG_1, reg_value);
	return status;
}

// DONE - Need to test
HAL_StatusTypeDef RFM96_set_ldo_flag(RFM96* sensor) {
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b0a1      	sub	sp, #132	; 0x84
 8005d70:	af1a      	add	r7, sp, #104	; 0x68
 8005d72:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	75fb      	strb	r3, [r7, #23]
	long sbw = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
	uint8_t sf = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	72fb      	strb	r3, [r7, #11]
	long symbol_duration;
	uint8_t reg_config3_val = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	72bb      	strb	r3, [r7, #10]

	/* Read arguments from registers*/
	status = RFM96_get_signal_bandwidth(sensor, &sbw);
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f92c 	bl	8005fe8 <RFM96_get_signal_bandwidth>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <RFM96_set_ldo_flag+0x32>
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	e061      	b.n	8005e62 <RFM96_set_ldo_flag+0xf6>
	status = RFM96_get_spreading_factor(sensor, &sf);
 8005d9e:	f107 030b 	add.w	r3, r7, #11
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f8b6 	bl	8005f16 <RFM96_get_spreading_factor>
 8005daa:	4603      	mov	r3, r0
 8005dac:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <RFM96_set_ldo_flag+0x4c>
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	e054      	b.n	8005e62 <RFM96_set_ldo_flag+0xf6>
	status = READ_REG(RFM96_REG_MODEM_CONFIG_3, &reg_config3_val);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005dc2:	687c      	ldr	r4, [r7, #4]
 8005dc4:	2164      	movs	r1, #100	; 0x64
 8005dc6:	9119      	str	r1, [sp, #100]	; 0x64
 8005dc8:	f107 010a 	add.w	r1, r7, #10
 8005dcc:	9118      	str	r1, [sp, #96]	; 0x60
 8005dce:	2126      	movs	r1, #38	; 0x26
 8005dd0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005dd2:	9216      	str	r2, [sp, #88]	; 0x58
 8005dd4:	9315      	str	r3, [sp, #84]	; 0x54
 8005dd6:	4668      	mov	r0, sp
 8005dd8:	f104 0310 	add.w	r3, r4, #16
 8005ddc:	2254      	movs	r2, #84	; 0x54
 8005dde:	4619      	mov	r1, r3
 8005de0:	f001 f9f8 	bl	80071d4 <memcpy>
 8005de4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005de8:	f001 f918 	bl	800701c <SPI_read_register>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <RFM96_set_ldo_flag+0x8e>
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	e033      	b.n	8005e62 <RFM96_set_ldo_flag+0xf6>

	/* Calculates and sets ldo value */
	symbol_duration = 1000 / (sbw / (1L << sf)); // Section 4.1.1.5 and 4.1.1.6
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	2301      	movs	r3, #1
 8005e02:	408b      	lsls	r3, r1
 8005e04:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e10:	613b      	str	r3, [r7, #16]
	if (symbol_duration > 16) {
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	dd05      	ble.n	8005e24 <RFM96_set_ldo_flag+0xb8>
		reg_config3_val = RFM96_LORA_LDO_SET(reg_config3_val);
 8005e18:	7abb      	ldrb	r3, [r7, #10]
 8005e1a:	f043 0308 	orr.w	r3, r3, #8
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	72bb      	strb	r3, [r7, #10]
 8005e22:	e004      	b.n	8005e2e <RFM96_set_ldo_flag+0xc2>
	} else {
		reg_config3_val = RFM96_LORA_LDO_RESET(reg_config3_val);
 8005e24:	7abb      	ldrb	r3, [r7, #10]
 8005e26:	f023 0308 	bic.w	r3, r3, #8
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	72bb      	strb	r3, [r7, #10]
	}

	return WRITE_REG(RFM96_REG_MODEM_CONFIG_3, reg_config3_val);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005e38:	7ab9      	ldrb	r1, [r7, #10]
 8005e3a:	687c      	ldr	r4, [r7, #4]
 8005e3c:	2064      	movs	r0, #100	; 0x64
 8005e3e:	9019      	str	r0, [sp, #100]	; 0x64
 8005e40:	9118      	str	r1, [sp, #96]	; 0x60
 8005e42:	2126      	movs	r1, #38	; 0x26
 8005e44:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e46:	9216      	str	r2, [sp, #88]	; 0x58
 8005e48:	9315      	str	r3, [sp, #84]	; 0x54
 8005e4a:	4668      	mov	r0, sp
 8005e4c:	f104 0310 	add.w	r3, r4, #16
 8005e50:	2254      	movs	r2, #84	; 0x54
 8005e52:	4619      	mov	r1, r3
 8005e54:	f001 f9be 	bl	80071d4 <memcpy>
 8005e58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e5c:	f001 f925 	bl	80070aa <SPI_write_register>
 8005e60:	4603      	mov	r3, r0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd90      	pop	{r4, r7, pc}

08005e6a <RFM96_set_dio0>:

HAL_StatusTypeDef RFM96_set_dio0(RFM96* sensor, uint8_t dio_mapping){
 8005e6a:	b590      	push	{r4, r7, lr}
 8005e6c:	b09f      	sub	sp, #124	; 0x7c
 8005e6e:	af1a      	add	r7, sp, #104	; 0x68
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_DIO_MAPPING_1, &reg_value);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005e88:	687c      	ldr	r4, [r7, #4]
 8005e8a:	2164      	movs	r1, #100	; 0x64
 8005e8c:	9119      	str	r1, [sp, #100]	; 0x64
 8005e8e:	f107 010e 	add.w	r1, r7, #14
 8005e92:	9118      	str	r1, [sp, #96]	; 0x60
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e98:	9216      	str	r2, [sp, #88]	; 0x58
 8005e9a:	9315      	str	r3, [sp, #84]	; 0x54
 8005e9c:	4668      	mov	r0, sp
 8005e9e:	f104 0310 	add.w	r3, r4, #16
 8005ea2:	2254      	movs	r2, #84	; 0x54
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f001 f995 	bl	80071d4 <memcpy>
 8005eaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005eae:	f001 f8b5 	bl	800701c <SPI_read_register>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <RFM96_set_dio0+0x56>
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	e026      	b.n	8005f0e <RFM96_set_dio0+0xa4>
	reg_value = (reg_value & 0b11111100) | dio_mapping;
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	b25b      	sxtb	r3, r3
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	b25a      	sxtb	r2, r3
 8005eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(RFM96_REG_DIO_MAPPING_1, reg_value);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005ee0:	7bb9      	ldrb	r1, [r7, #14]
 8005ee2:	687c      	ldr	r4, [r7, #4]
 8005ee4:	2064      	movs	r0, #100	; 0x64
 8005ee6:	9019      	str	r0, [sp, #100]	; 0x64
 8005ee8:	9118      	str	r1, [sp, #96]	; 0x60
 8005eea:	2140      	movs	r1, #64	; 0x40
 8005eec:	9117      	str	r1, [sp, #92]	; 0x5c
 8005eee:	9216      	str	r2, [sp, #88]	; 0x58
 8005ef0:	9315      	str	r3, [sp, #84]	; 0x54
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	f104 0310 	add.w	r3, r4, #16
 8005ef8:	2254      	movs	r2, #84	; 0x54
 8005efa:	4619      	mov	r1, r3
 8005efc:	f001 f96a 	bl	80071d4 <memcpy>
 8005f00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f04:	f001 f8d1 	bl	80070aa <SPI_write_register>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]
	return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd90      	pop	{r4, r7, pc}

08005f16 <RFM96_get_spreading_factor>:
	*snr = read_value * 0.25;
	return HAL_OK;
}

// DONE - Need to test
HAL_StatusTypeDef RFM96_get_spreading_factor(RFM96* sensor, uint8_t* sf) {
 8005f16:	b590      	push	{r4, r7, lr}
 8005f18:	b09f      	sub	sp, #124	; 0x7c
 8005f1a:	af1a      	add	r7, sp, #104	; 0x68
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_MODEM_CONFIG_2, &read_value);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005f32:	687c      	ldr	r4, [r7, #4]
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	9119      	str	r1, [sp, #100]	; 0x64
 8005f38:	f107 010e 	add.w	r1, r7, #14
 8005f3c:	9118      	str	r1, [sp, #96]	; 0x60
 8005f3e:	211e      	movs	r1, #30
 8005f40:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f42:	9216      	str	r2, [sp, #88]	; 0x58
 8005f44:	9315      	str	r3, [sp, #84]	; 0x54
 8005f46:	4668      	mov	r0, sp
 8005f48:	f104 0310 	add.w	r3, r4, #16
 8005f4c:	2254      	movs	r2, #84	; 0x54
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f001 f940 	bl	80071d4 <memcpy>
 8005f54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f58:	f001 f860 	bl	800701c <SPI_read_register>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <RFM96_get_spreading_factor+0x54>
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	e005      	b.n	8005f76 <RFM96_get_spreading_factor+0x60>
	*sf = read_value >> 4;
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}

08005f7e <RFM96_get_raw_signal_bandwidth>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_get_raw_signal_bandwidth(RFM96* sensor, uint8_t* raw_sbw) {
 8005f7e:	b590      	push	{r4, r7, lr}
 8005f80:	b09f      	sub	sp, #124	; 0x7c
 8005f82:	af1a      	add	r7, sp, #104	; 0x68
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(RFM96_REG_MODEM_CONFIG_1, &read_value);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8005f9a:	687c      	ldr	r4, [r7, #4]
 8005f9c:	2164      	movs	r1, #100	; 0x64
 8005f9e:	9119      	str	r1, [sp, #100]	; 0x64
 8005fa0:	f107 010e 	add.w	r1, r7, #14
 8005fa4:	9118      	str	r1, [sp, #96]	; 0x60
 8005fa6:	211d      	movs	r1, #29
 8005fa8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005faa:	9216      	str	r2, [sp, #88]	; 0x58
 8005fac:	9315      	str	r3, [sp, #84]	; 0x54
 8005fae:	4668      	mov	r0, sp
 8005fb0:	f104 0310 	add.w	r3, r4, #16
 8005fb4:	2254      	movs	r2, #84	; 0x54
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f001 f90c 	bl	80071d4 <memcpy>
 8005fbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005fc0:	f001 f82c 	bl	800701c <SPI_read_register>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <RFM96_get_raw_signal_bandwidth+0x54>
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	e006      	b.n	8005fe0 <RFM96_get_raw_signal_bandwidth+0x62>
	*raw_sbw = RFM96_LORA_BW_MASK(read_value);
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	f023 030f 	bic.w	r3, r3, #15
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd90      	pop	{r4, r7, pc}

08005fe8 <RFM96_get_signal_bandwidth>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_get_signal_bandwidth(RFM96* sensor, long* sbw) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_sbw = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73bb      	strb	r3, [r7, #14]

	status = RFM96_get_raw_signal_bandwidth(sensor, &raw_sbw);
 8005ffa:	f107 030e 	add.w	r3, r7, #14
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ffbc 	bl	8005f7e <RFM96_get_raw_signal_bandwidth>
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <RFM96_get_signal_bandwidth+0x2c>
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	e007      	b.n	8006024 <RFM96_get_signal_bandwidth+0x3c>
	status = RFM96_raw_sbw_to_long(raw_sbw, sbw);
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f807 	bl	800602c <RFM96_raw_sbw_to_long>
 800601e:	4603      	mov	r3, r0
 8006020:	73fb      	strb	r3, [r7, #15]
	return status;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <RFM96_raw_sbw_to_long>:

// DONE - Need to test
HAL_StatusTypeDef RFM96_raw_sbw_to_long(uint8_t raw_sbw, long* sbw) {
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
	switch (raw_sbw) {
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d033      	beq.n	80060a6 <RFM96_raw_sbw_to_long+0x7a>
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	dc0b      	bgt.n	800605a <RFM96_raw_sbw_to_long+0x2e>
 8006042:	2b10      	cmp	r3, #16
 8006044:	d01d      	beq.n	8006082 <RFM96_raw_sbw_to_long+0x56>
 8006046:	2b10      	cmp	r3, #16
 8006048:	dc02      	bgt.n	8006050 <RFM96_raw_sbw_to_long+0x24>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d013      	beq.n	8006076 <RFM96_raw_sbw_to_long+0x4a>
 800604e:	e04b      	b.n	80060e8 <RFM96_raw_sbw_to_long+0xbc>
 8006050:	2b20      	cmp	r3, #32
 8006052:	d01c      	beq.n	800608e <RFM96_raw_sbw_to_long+0x62>
 8006054:	2b30      	cmp	r3, #48	; 0x30
 8006056:	d020      	beq.n	800609a <RFM96_raw_sbw_to_long+0x6e>
 8006058:	e046      	b.n	80060e8 <RFM96_raw_sbw_to_long+0xbc>
 800605a:	2b70      	cmp	r3, #112	; 0x70
 800605c:	d035      	beq.n	80060ca <RFM96_raw_sbw_to_long+0x9e>
 800605e:	2b70      	cmp	r3, #112	; 0x70
 8006060:	dc04      	bgt.n	800606c <RFM96_raw_sbw_to_long+0x40>
 8006062:	2b50      	cmp	r3, #80	; 0x50
 8006064:	d025      	beq.n	80060b2 <RFM96_raw_sbw_to_long+0x86>
 8006066:	2b60      	cmp	r3, #96	; 0x60
 8006068:	d029      	beq.n	80060be <RFM96_raw_sbw_to_long+0x92>
 800606a:	e03d      	b.n	80060e8 <RFM96_raw_sbw_to_long+0xbc>
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d031      	beq.n	80060d4 <RFM96_raw_sbw_to_long+0xa8>
 8006070:	2b90      	cmp	r3, #144	; 0x90
 8006072:	d034      	beq.n	80060de <RFM96_raw_sbw_to_long+0xb2>
 8006074:	e038      	b.n	80060e8 <RFM96_raw_sbw_to_long+0xbc>
	case RFM96_LORA_BW_7_8:
		*sbw = 7.8E3;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f641 6278 	movw	r2, #7800	; 0x1e78
 800607c:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e033      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_10_4:
		*sbw = 10.4E3;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006088:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e02d      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_15_6:
		*sbw = 15.6E3;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8006094:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e027      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_20_8:
		*sbw = 20.8E3;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	f245 1240 	movw	r2, #20800	; 0x5140
 80060a0:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e021      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_31_25:
		*sbw = 31.25E3;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f647 2212 	movw	r2, #31250	; 0x7a12
 80060ac:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e01b      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_41_7:
		*sbw = 41.7E3;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80060b8:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e015      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_62_5:
		*sbw = 62.5E3;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f24f 4224 	movw	r2, #62500	; 0xf424
 80060c4:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e00f      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_125:
		*sbw = 125E3;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <RFM96_raw_sbw_to_long+0xcc>)
 80060ce:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e00a      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_250:
		*sbw = 250E3;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <RFM96_raw_sbw_to_long+0xd0>)
 80060d8:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e005      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	case RFM96_LORA_BW_500:
		*sbw = 500E3;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	4a07      	ldr	r2, [pc, #28]	; (8006100 <RFM96_raw_sbw_to_long+0xd4>)
 80060e2:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <RFM96_raw_sbw_to_long+0xbe>
	}
	return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	0001e848 	.word	0x0001e848
 80060fc:	0003d090 	.word	0x0003d090
 8006100:	0007a120 	.word	0x0007a120

08006104 <RFM96_read_packet>:
	//RETURN_ON_ERROR(status);
	return RFM96_set_op_mode(sensor, RFM96_LORA_MODE_TX);
}

// TO-DO
HAL_StatusTypeDef RFM96_read_packet(RFM96* sensor, void* packet, uint8_t length) {
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b0a1      	sub	sp, #132	; 0x84
 8006108:	af1a      	add	r7, sp, #104	; 0x68
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
	uint8_t reg_op_val, iqr_val, fifo_addr_ptr;
	uint8_t i;

	/* Verifies if is not transmiting */
	status = READ_REG(RFM96_REG_OP_MODE, &reg_op_val);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8006120:	68fc      	ldr	r4, [r7, #12]
 8006122:	2164      	movs	r1, #100	; 0x64
 8006124:	9119      	str	r1, [sp, #100]	; 0x64
 8006126:	f107 0116 	add.w	r1, r7, #22
 800612a:	9118      	str	r1, [sp, #96]	; 0x60
 800612c:	2101      	movs	r1, #1
 800612e:	9117      	str	r1, [sp, #92]	; 0x5c
 8006130:	9216      	str	r2, [sp, #88]	; 0x58
 8006132:	9315      	str	r3, [sp, #84]	; 0x54
 8006134:	4668      	mov	r0, sp
 8006136:	f104 0310 	add.w	r3, r4, #16
 800613a:	2254      	movs	r2, #84	; 0x54
 800613c:	4619      	mov	r1, r3
 800613e:	f001 f849 	bl	80071d4 <memcpy>
 8006142:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006146:	f000 ff69 	bl	800701c <SPI_read_register>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <RFM96_read_packet+0x54>
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	e0eb      	b.n	8006330 <RFM96_read_packet+0x22c>
	reg_op_val = RFM96_GET_LORA_MODE(reg_op_val);
 8006158:	7dbb      	ldrb	r3, [r7, #22]
 800615a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800615e:	b2db      	uxtb	r3, r3
 8006160:	75bb      	strb	r3, [r7, #22]
	if (reg_op_val == RFM96_LORA_MODE_FSTX && reg_op_val == RFM96_LORA_MODE_TX) {
 8006162:	7dbb      	ldrb	r3, [r7, #22]
 8006164:	2b82      	cmp	r3, #130	; 0x82
 8006166:	d104      	bne.n	8006172 <RFM96_read_packet+0x6e>
 8006168:	7dbb      	ldrb	r3, [r7, #22]
 800616a:	2b83      	cmp	r3, #131	; 0x83
 800616c:	d101      	bne.n	8006172 <RFM96_read_packet+0x6e>
		return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0de      	b.n	8006330 <RFM96_read_packet+0x22c>
	//RETURN_ON_ERROR(status);
	/* Set Header Mode */
	//status = RFM96_explicit_header_mode(sensor);
	//RETURN_ON_ERROR(status);
	/* Verifies Received Packet and Consistency */
	status = READ_REG(RFM96_REG_IRQ_FLAGS, &iqr_val);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800617c:	68fc      	ldr	r4, [r7, #12]
 800617e:	2164      	movs	r1, #100	; 0x64
 8006180:	9119      	str	r1, [sp, #100]	; 0x64
 8006182:	f107 0115 	add.w	r1, r7, #21
 8006186:	9118      	str	r1, [sp, #96]	; 0x60
 8006188:	2112      	movs	r1, #18
 800618a:	9117      	str	r1, [sp, #92]	; 0x5c
 800618c:	9216      	str	r2, [sp, #88]	; 0x58
 800618e:	9315      	str	r3, [sp, #84]	; 0x54
 8006190:	4668      	mov	r0, sp
 8006192:	f104 0310 	add.w	r3, r4, #16
 8006196:	2254      	movs	r2, #84	; 0x54
 8006198:	4619      	mov	r1, r3
 800619a:	f001 f81b 	bl	80071d4 <memcpy>
 800619e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80061a2:	f000 ff3b 	bl	800701c <SPI_read_register>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <RFM96_read_packet+0xb0>
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	e0bd      	b.n	8006330 <RFM96_read_packet+0x22c>
	if ((iqr_val & 0b01100000) != 0b01000000) {
 80061b4:	7d7b      	ldrb	r3, [r7, #21]
 80061b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d001      	beq.n	80061c2 <RFM96_read_packet+0xbe>
		return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0b6      	b.n	8006330 <RFM96_read_packet+0x22c>
	}
	status = WRITE_REG(RFM96_REG_IRQ_FLAGS, iqr_val);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80061cc:	7d79      	ldrb	r1, [r7, #21]
 80061ce:	68fc      	ldr	r4, [r7, #12]
 80061d0:	2064      	movs	r0, #100	; 0x64
 80061d2:	9019      	str	r0, [sp, #100]	; 0x64
 80061d4:	9118      	str	r1, [sp, #96]	; 0x60
 80061d6:	2112      	movs	r1, #18
 80061d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80061da:	9216      	str	r2, [sp, #88]	; 0x58
 80061dc:	9315      	str	r3, [sp, #84]	; 0x54
 80061de:	4668      	mov	r0, sp
 80061e0:	f104 0310 	add.w	r3, r4, #16
 80061e4:	2254      	movs	r2, #84	; 0x54
 80061e6:	4619      	mov	r1, r3
 80061e8:	f000 fff4 	bl	80071d4 <memcpy>
 80061ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80061f0:	f000 ff5b 	bl	80070aa <SPI_write_register>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <RFM96_read_packet+0xfe>
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	e096      	b.n	8006330 <RFM96_read_packet+0x22c>

	/* Packet Length */
	status = READ_REG(RFM96_REG_RX_NB_BYTES, &i);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800620c:	68fc      	ldr	r4, [r7, #12]
 800620e:	2164      	movs	r1, #100	; 0x64
 8006210:	9119      	str	r1, [sp, #100]	; 0x64
 8006212:	f107 0113 	add.w	r1, r7, #19
 8006216:	9118      	str	r1, [sp, #96]	; 0x60
 8006218:	2113      	movs	r1, #19
 800621a:	9117      	str	r1, [sp, #92]	; 0x5c
 800621c:	9216      	str	r2, [sp, #88]	; 0x58
 800621e:	9315      	str	r3, [sp, #84]	; 0x54
 8006220:	4668      	mov	r0, sp
 8006222:	f104 0310 	add.w	r3, r4, #16
 8006226:	2254      	movs	r2, #84	; 0x54
 8006228:	4619      	mov	r1, r3
 800622a:	f000 ffd3 	bl	80071d4 <memcpy>
 800622e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006232:	f000 fef3 	bl	800701c <SPI_read_register>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <RFM96_read_packet+0x140>
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	e075      	b.n	8006330 <RFM96_read_packet+0x22c>
	length = (i < length) ? (i) : (length);
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	79fa      	ldrb	r2, [r7, #7]
 8006248:	4293      	cmp	r3, r2
 800624a:	bf28      	it	cs
 800624c:	4613      	movcs	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]

	/* RX Init */
	status = READ_REG(RFM96_REG_FIFO_RX_CURRENT_ADDR, &fifo_addr_ptr);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800625a:	68fc      	ldr	r4, [r7, #12]
 800625c:	2164      	movs	r1, #100	; 0x64
 800625e:	9119      	str	r1, [sp, #100]	; 0x64
 8006260:	f107 0114 	add.w	r1, r7, #20
 8006264:	9118      	str	r1, [sp, #96]	; 0x60
 8006266:	2110      	movs	r1, #16
 8006268:	9117      	str	r1, [sp, #92]	; 0x5c
 800626a:	9216      	str	r2, [sp, #88]	; 0x58
 800626c:	9315      	str	r3, [sp, #84]	; 0x54
 800626e:	4668      	mov	r0, sp
 8006270:	f104 0310 	add.w	r3, r4, #16
 8006274:	2254      	movs	r2, #84	; 0x54
 8006276:	4619      	mov	r1, r3
 8006278:	f000 ffac 	bl	80071d4 <memcpy>
 800627c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006280:	f000 fecc 	bl	800701c <SPI_read_register>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <RFM96_read_packet+0x18e>
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	e04e      	b.n	8006330 <RFM96_read_packet+0x22c>
	status = WRITE_REG(RFM96_REG_FIFO_ADDR_PTR, fifo_addr_ptr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800629c:	7d39      	ldrb	r1, [r7, #20]
 800629e:	68fc      	ldr	r4, [r7, #12]
 80062a0:	2064      	movs	r0, #100	; 0x64
 80062a2:	9019      	str	r0, [sp, #100]	; 0x64
 80062a4:	9118      	str	r1, [sp, #96]	; 0x60
 80062a6:	210d      	movs	r1, #13
 80062a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80062aa:	9216      	str	r2, [sp, #88]	; 0x58
 80062ac:	9315      	str	r3, [sp, #84]	; 0x54
 80062ae:	4668      	mov	r0, sp
 80062b0:	f104 0310 	add.w	r3, r4, #16
 80062b4:	2254      	movs	r2, #84	; 0x54
 80062b6:	4619      	mov	r1, r3
 80062b8:	f000 ff8c 	bl	80071d4 <memcpy>
 80062bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80062c0:	f000 fef3 	bl	80070aa <SPI_write_register>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <RFM96_read_packet+0x1ce>
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e02e      	b.n	8006330 <RFM96_read_packet+0x22c>

	/* Read Packet Data */
	for (i = 0; i < length; i++) {
 80062d2:	2300      	movs	r3, #0
 80062d4:	74fb      	strb	r3, [r7, #19]
 80062d6:	e026      	b.n	8006326 <RFM96_read_packet+0x222>
		status = READ_REG(RFM96_REG_FIFO, ((uint8_t* )(packet + i)));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80062e2:	7cf9      	ldrb	r1, [r7, #19]
 80062e4:	4608      	mov	r0, r1
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4401      	add	r1, r0
 80062ea:	68fc      	ldr	r4, [r7, #12]
 80062ec:	2064      	movs	r0, #100	; 0x64
 80062ee:	9019      	str	r0, [sp, #100]	; 0x64
 80062f0:	9118      	str	r1, [sp, #96]	; 0x60
 80062f2:	2100      	movs	r1, #0
 80062f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80062f6:	9216      	str	r2, [sp, #88]	; 0x58
 80062f8:	9315      	str	r3, [sp, #84]	; 0x54
 80062fa:	4668      	mov	r0, sp
 80062fc:	f104 0310 	add.w	r3, r4, #16
 8006300:	2254      	movs	r2, #84	; 0x54
 8006302:	4619      	mov	r1, r3
 8006304:	f000 ff66 	bl	80071d4 <memcpy>
 8006308:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800630c:	f000 fe86 	bl	800701c <SPI_read_register>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]
		RETURN_ON_ERROR(status);
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <RFM96_read_packet+0x21a>
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	e008      	b.n	8006330 <RFM96_read_packet+0x22c>
	for (i = 0; i < length; i++) {
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	3301      	adds	r3, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	74fb      	strb	r3, [r7, #19]
 8006326:	7cfb      	ldrb	r3, [r7, #19]
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	429a      	cmp	r2, r3
 800632c:	d8d4      	bhi.n	80062d8 <RFM96_read_packet+0x1d4>
	}

	//status = RFM96_set_op_mode(sensor, RFM96_LORA_MODE_RX_CONT);
	return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd90      	pop	{r4, r7, pc}

08006338 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006338:	b5b0      	push	{r4, r5, r7, lr}
 800633a:	b09c      	sub	sp, #112	; 0x70
 800633c:	af1a      	add	r7, sp, #104	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800633e:	f7fa f8c3 	bl	80004c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006342:	f000 f8c5 	bl	80064d0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006346:	f000 fb29 	bl	800699c <_ZL12MX_GPIO_Initv>
	MX_SPI2_Init();
 800634a:	f000 fa1f 	bl	800678c <_ZL12MX_SPI2_Initv>
	MX_TIM3_Init();
 800634e:	f000 fa5f 	bl	8006810 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8006352:	f000 faef 	bl	8006934 <_ZL19MX_USART2_UART_Initv>
	MX_ADC1_Init();
 8006356:	f000 f959 	bl	800660c <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 800635a:	f000 f9dd 	bl	8006718 <_ZL12MX_CAN1_Initv>
	MX_UART4_Init();
 800635e:	f000 fab5 	bl	80068cc <_ZL13MX_UART4_Initv>

//#define INVERT_RADIOS



	HAL_StatusTypeDef status = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	70fb      	strb	r3, [r7, #3]

	//RX Config
	rfmRX = (RFM96*) malloc(sizeof(RFM96));
 8006366:	2078      	movs	r0, #120	; 0x78
 8006368:	f000 ff2c 	bl	80071c4 <malloc>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	4b51      	ldr	r3, [pc, #324]	; (80064b8 <main+0x180>)
 8006372:	601a      	str	r2, [r3, #0]
#ifndef INVERT_RADIOS
	status = RFM96_set_pins(rfmRX, hspi2, SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, RESET_COMM_RX_GPIO_Port, RESET_COMM_RX_Pin);
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <main+0x180>)
 8006376:	681d      	ldr	r5, [r3, #0]
 8006378:	4c50      	ldr	r4, [pc, #320]	; (80064bc <main+0x184>)
 800637a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800637e:	9319      	str	r3, [sp, #100]	; 0x64
 8006380:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <main+0x188>)
 8006382:	9318      	str	r3, [sp, #96]	; 0x60
 8006384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006388:	9317      	str	r3, [sp, #92]	; 0x5c
 800638a:	4b4d      	ldr	r3, [pc, #308]	; (80064c0 <main+0x188>)
 800638c:	9316      	str	r3, [sp, #88]	; 0x58
 800638e:	4668      	mov	r0, sp
 8006390:	f104 030c 	add.w	r3, r4, #12
 8006394:	2258      	movs	r2, #88	; 0x58
 8006396:	4619      	mov	r1, r3
 8006398:	f000 ff1c 	bl	80071d4 <memcpy>
 800639c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80063a0:	4628      	mov	r0, r5
 80063a2:	f7ff f825 	bl	80053f0 <RFM96_set_pins>
 80063a6:	4603      	mov	r3, r0
 80063a8:	70fb      	strb	r3, [r7, #3]
#else
	status = RFM96_set_pins(rfmRX, hspi2, SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin);
#endif
	status = RFM96_init(rfmRX, 433.123E6, 0x12);
 80063aa:	4b43      	ldr	r3, [pc, #268]	; (80064b8 <main+0x180>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2212      	movs	r2, #18
 80063b0:	4944      	ldr	r1, [pc, #272]	; (80064c4 <main+0x18c>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff f846 	bl	8005444 <RFM96_init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_signal_bandwidth(rfmRX, RFM96_LORA_BW_125);
 80063bc:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <main+0x180>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2170      	movs	r1, #112	; 0x70
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fb5f 	bl	8005a86 <RFM96_set_signal_bandwidth>
 80063c8:	4603      	mov	r3, r0
 80063ca:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_spreading_factor(rfmRX, 7);
 80063cc:	4b3a      	ldr	r3, [pc, #232]	; (80064b8 <main+0x180>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2107      	movs	r1, #7
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff faed 	bl	80059b2 <RFM96_set_spreading_factor>
 80063d8:	4603      	mov	r3, r0
 80063da:	70fb      	strb	r3, [r7, #3]
	status = RFM96_enable_crc(rfmRX);
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <main+0x180>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fc27 	bl	8005c34 <RFM96_enable_crc>
 80063e6:	4603      	mov	r3, r0
 80063e8:	70fb      	strb	r3, [r7, #3]
	status = RFM96_explicit_header_mode(rfmRX);
 80063ea:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <main+0x180>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fc6e 	bl	8005cd0 <RFM96_explicit_header_mode>
 80063f4:	4603      	mov	r3, r0
 80063f6:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_dio0(rfmRX, RFM96_LORA_DIO0_RX_DONE);
 80063f8:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <main+0x180>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fd33 	bl	8005e6a <RFM96_set_dio0>
 8006404:	4603      	mov	r3, r0
 8006406:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_op_mode(rfmRX, RFM96_LORA_MODE_RX_CONT);
 8006408:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <main+0x180>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2185      	movs	r1, #133	; 0x85
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff f951 	bl	80056b6 <RFM96_set_op_mode>
 8006414:	4603      	mov	r3, r0
 8006416:	70fb      	strb	r3, [r7, #3]

	//TX Config
	rfmTX = (RFM96*) malloc(sizeof(RFM96));
 8006418:	2078      	movs	r0, #120	; 0x78
 800641a:	f000 fed3 	bl	80071c4 <malloc>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <main+0x190>)
 8006424:	601a      	str	r2, [r3, #0]
#ifndef INVERT_RADIOS
	status = RFM96_set_pins(rfmTX, hspi2, SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin);
 8006426:	4b28      	ldr	r3, [pc, #160]	; (80064c8 <main+0x190>)
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	4c24      	ldr	r4, [pc, #144]	; (80064bc <main+0x184>)
 800642c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006430:	9319      	str	r3, [sp, #100]	; 0x64
 8006432:	4b26      	ldr	r3, [pc, #152]	; (80064cc <main+0x194>)
 8006434:	9318      	str	r3, [sp, #96]	; 0x60
 8006436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643a:	9317      	str	r3, [sp, #92]	; 0x5c
 800643c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006440:	9316      	str	r3, [sp, #88]	; 0x58
 8006442:	4668      	mov	r0, sp
 8006444:	f104 030c 	add.w	r3, r4, #12
 8006448:	2258      	movs	r2, #88	; 0x58
 800644a:	4619      	mov	r1, r3
 800644c:	f000 fec2 	bl	80071d4 <memcpy>
 8006450:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8006454:	4628      	mov	r0, r5
 8006456:	f7fe ffcb 	bl	80053f0 <RFM96_set_pins>
 800645a:	4603      	mov	r3, r0
 800645c:	70fb      	strb	r3, [r7, #3]
#else
	status = RFM96_set_pins(rfmTX, hspi2, SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, RESET_COMM_RX_GPIO_Port, RESET_COMM_RX_Pin);
#endif
	status = RFM96_init(rfmTX, 433.123E6, 0x12);
 800645e:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <main+0x190>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2212      	movs	r2, #18
 8006464:	4917      	ldr	r1, [pc, #92]	; (80064c4 <main+0x18c>)
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe ffec 	bl	8005444 <RFM96_init>
 800646c:	4603      	mov	r3, r0
 800646e:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_tx_power(rfmTX, 20, RFM96_LORA_PA_BOOST_PIN);
 8006470:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <main+0x190>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2280      	movs	r2, #128	; 0x80
 8006476:	2114      	movs	r1, #20
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff f9d1 	bl	8005820 <RFM96_set_tx_power>
 800647e:	4603      	mov	r3, r0
 8006480:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_signal_bandwidth(rfmTX, RFM96_LORA_BW_125);
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <main+0x190>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2170      	movs	r1, #112	; 0x70
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fafc 	bl	8005a86 <RFM96_set_signal_bandwidth>
 800648e:	4603      	mov	r3, r0
 8006490:	70fb      	strb	r3, [r7, #3]
	status = RFM96_set_spreading_factor(rfmTX, 7);
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <main+0x190>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2107      	movs	r1, #7
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fa8a 	bl	80059b2 <RFM96_set_spreading_factor>
 800649e:	4603      	mov	r3, r0
 80064a0:	70fb      	strb	r3, [r7, #3]
	status = RFM96_enable_crc(rfmTX);
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <main+0x190>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fbc4 	bl	8005c34 <RFM96_enable_crc>
 80064ac:	4603      	mov	r3, r0
 80064ae:	70fb      	strb	r3, [r7, #3]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i;
	while (1) {
		i++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3301      	adds	r3, #1
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	e7fb      	b.n	80064b0 <main+0x178>
 80064b8:	200002c0 	.word	0x200002c0
 80064bc:	20000118 	.word	0x20000118
 80064c0:	48000400 	.word	0x48000400
 80064c4:	19d0eeb8 	.word	0x19d0eeb8
 80064c8:	200002bc 	.word	0x200002bc
 80064cc:	48000800 	.word	0x48000800

080064d0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b0b8      	sub	sp, #224	; 0xe0
 80064d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80064d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80064da:	2244      	movs	r2, #68	; 0x44
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fe83 	bl	80071ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80064e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80064f4:	463b      	mov	r3, r7
 80064f6:	2288      	movs	r2, #136	; 0x88
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fe75 	bl	80071ea <memset>

	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006500:	2302      	movs	r3, #2
 8006502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800650a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800650e:	2310      	movs	r3, #16
 8006510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006514:	2302      	movs	r3, #2
 8006516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800651a:	2302      	movs	r3, #2
 800651c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8006520:	2301      	movs	r3, #1
 8006522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 8006526:	230a      	movs	r3, #10
 8006528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800652c:	2307      	movs	r3, #7
 800652e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006532:	2302      	movs	r3, #2
 8006534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006538:	2302      	movs	r3, #2
 800653a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800653e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006542:	4618      	mov	r0, r3
 8006544:	f7fb fc56 	bl	8001df4 <HAL_RCC_OscConfig>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf14      	ite	ne
 800654e:	2301      	movne	r3, #1
 8006550:	2300      	moveq	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <_Z18SystemClock_Configv+0x8c>
		Error_Handler();
 8006558:	f000 faee 	bl	8006b38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800655c:	230f      	movs	r3, #15
 800655e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006562:	2303      	movs	r3, #3
 8006564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800657a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800657e:	2104      	movs	r1, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7fb ffe7 	bl	8002554 <HAL_RCC_ClockConfig>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <_Z18SystemClock_Configv+0xca>
		Error_Handler();
 8006596:	f000 facf 	bl	8006b38 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800659a:	f244 030a 	movw	r3, #16394	; 0x400a
 800659e:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80065a4:	2300      	movs	r3, #0
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80065a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065ac:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80065ae:	2302      	movs	r3, #2
 80065b0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80065b6:	2308      	movs	r3, #8
 80065b8:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80065ba:	2307      	movs	r3, #7
 80065bc:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80065be:	2302      	movs	r3, #2
 80065c0:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80065c2:	2302      	movs	r3, #2
 80065c4:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80065c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065ca:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80065cc:	463b      	mov	r3, r7
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fc f9c4 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <_Z18SystemClock_Configv+0x118>
		Error_Handler();
 80065e4:	f000 faa8 	bl	8006b38 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage 
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80065e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065ec:	f7fb fbac 	bl	8001d48 <HAL_PWREx_ControlVoltageScaling>
 80065f0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <_Z18SystemClock_Configv+0x134>
		Error_Handler();
 8006600:	f000 fa9a 	bl	8006b38 <Error_Handler>
	}
}
 8006604:	bf00      	nop
 8006606:	37e0      	adds	r7, #224	; 0xe0
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8006612:	f107 031c 	add.w	r3, r7, #28
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	60da      	str	r2, [r3, #12]
 800662a:	611a      	str	r2, [r3, #16]
 800662c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config 
	 */
	hadc1.Instance = ADC1;
 800662e:	4b37      	ldr	r3, [pc, #220]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006630:	4a37      	ldr	r2, [pc, #220]	; (8006710 <_ZL12MX_ADC1_Initv+0x104>)
 8006632:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006634:	4b35      	ldr	r3, [pc, #212]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800663a:	4b34      	ldr	r3, [pc, #208]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006640:	4b32      	ldr	r3, [pc, #200]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006642:	2200      	movs	r2, #0
 8006644:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006646:	4b31      	ldr	r3, [pc, #196]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800664c:	4b2f      	ldr	r3, [pc, #188]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 800664e:	2204      	movs	r2, #4
 8006650:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006654:	2200      	movs	r2, #0
 8006656:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8006658:	4b2c      	ldr	r3, [pc, #176]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 800665a:	2200      	movs	r2, #0
 800665c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800665e:	4b2b      	ldr	r3, [pc, #172]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006660:	2201      	movs	r2, #1
 8006662:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800666c:	4b27      	ldr	r3, [pc, #156]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 800666e:	2200      	movs	r2, #0
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006672:	4b26      	ldr	r3, [pc, #152]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006678:	4b24      	ldr	r3, [pc, #144]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006680:	4b22      	ldr	r3, [pc, #136]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006682:	2200      	movs	r2, #0
 8006684:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800668e:	481f      	ldr	r0, [pc, #124]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 8006690:	f7fa f92c 	bl	80008ec <HAL_ADC_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <_ZL12MX_ADC1_Initv+0x9c>
		Error_Handler();
 80066a4:	f000 fa48 	bl	8006b38 <Error_Handler>
	}
	/** Configure the ADC multi-mode 
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80066ac:	f107 031c 	add.w	r3, r7, #28
 80066b0:	4619      	mov	r1, r3
 80066b2:	4816      	ldr	r0, [pc, #88]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 80066b4:	f7fa fdf8 	bl	80012a8 <HAL_ADCEx_MultiModeConfigChannel>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <_ZL12MX_ADC1_Initv+0xc0>
		Error_Handler();
 80066c8:	f000 fa36 	bl	8006b38 <Error_Handler>
	}
	/** Configure Regular Channel 
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <_ZL12MX_ADC1_Initv+0x108>)
 80066ce:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80066d0:	2306      	movs	r3, #6
 80066d2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80066d8:	237f      	movs	r3, #127	; 0x7f
 80066da:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80066dc:	2304      	movs	r3, #4
 80066de:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4808      	ldr	r0, [pc, #32]	; (800670c <_ZL12MX_ADC1_Initv+0x100>)
 80066ea:	f7fa fa53 	bl	8000b94 <HAL_ADC_ConfigChannel>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <_ZL12MX_ADC1_Initv+0xf6>
		Error_Handler();
 80066fe:	f000 fa1b 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8006702:	bf00      	nop
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	2000008c 	.word	0x2000008c
 8006710:	50040000 	.word	0x50040000
 8006714:	25b00200 	.word	0x25b00200

08006718 <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 800671e:	4a1a      	ldr	r2, [pc, #104]	; (8006788 <_ZL12MX_CAN1_Initv+0x70>)
 8006720:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8006722:	4b18      	ldr	r3, [pc, #96]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006724:	2210      	movs	r2, #16
 8006726:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800672e:	4b15      	ldr	r3, [pc, #84]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006730:	2200      	movs	r2, #0
 8006732:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8006734:	4b13      	ldr	r3, [pc, #76]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006736:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800673a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800673c:	4b11      	ldr	r3, [pc, #68]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 800673e:	2200      	movs	r2, #0
 8006740:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006744:	2200      	movs	r2, #0
 8006746:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 800674a:	2200      	movs	r2, #0
 800674c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006750:	2200      	movs	r2, #0
 8006752:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006756:	2200      	movs	r2, #0
 8006758:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8006760:	4b08      	ldr	r3, [pc, #32]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006762:	2200      	movs	r2, #0
 8006764:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8006766:	4807      	ldr	r0, [pc, #28]	; (8006784 <_ZL12MX_CAN1_Initv+0x6c>)
 8006768:	f7fa fe4a 	bl	8001400 <HAL_CAN_Init>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <_ZL12MX_CAN1_Initv+0x68>
		Error_Handler();
 800677c:	f000 f9dc 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}
 8006784:	200000f0 	.word	0x200000f0
 8006788:	40006400 	.word	0x40006400

0800678c <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 8006792:	4a1e      	ldr	r2, [pc, #120]	; (800680c <_ZL12MX_SPI2_Initv+0x80>)
 8006794:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8006796:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 8006798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800679c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80067aa:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067be:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067c2:	2220      	movs	r2, #32
 80067c4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067da:	2207      	movs	r2, #7
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80067e4:	4b08      	ldr	r3, [pc, #32]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067e6:	2208      	movs	r2, #8
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80067ea:	4807      	ldr	r0, [pc, #28]	; (8006808 <_ZL12MX_SPI2_Initv+0x7c>)
 80067ec:	f7fc fd66 	bl	80032bc <HAL_SPI_Init>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf14      	ite	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	2300      	moveq	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <_ZL12MX_SPI2_Initv+0x78>
		Error_Handler();
 8006800:	f000 f99a 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8006804:	bf00      	nop
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000118 	.word	0x20000118
 800680c:	40003800 	.word	0x40003800

08006810 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006816:	f107 0310 	add.w	r3, r7, #16
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
 8006820:	609a      	str	r2, [r3, #8]
 8006822:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800682e:	4b25      	ldr	r3, [pc, #148]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006830:	4a25      	ldr	r2, [pc, #148]	; (80068c8 <_ZL12MX_TIM3_Initv+0xb8>)
 8006832:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 79;
 8006834:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006836:	224f      	movs	r2, #79	; 0x4f
 8006838:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 800683c:	2200      	movs	r2, #0
 800683e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 8006840:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006846:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 800684a:	2200      	movs	r2, #0
 800684c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800684e:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006850:	2200      	movs	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8006854:	481b      	ldr	r0, [pc, #108]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006856:	f7fd fbd1 	bl	8003ffc <HAL_TIM_Base_Init>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <_ZL12MX_TIM3_Initv+0x5e>
		Error_Handler();
 800686a:	f000 f965 	bl	8006b38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800686e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006872:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8006874:	f107 0310 	add.w	r3, r7, #16
 8006878:	4619      	mov	r1, r3
 800687a:	4812      	ldr	r0, [pc, #72]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 800687c:	f7fd fbe9 	bl	8004052 <HAL_TIM_ConfigClockSource>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <_ZL12MX_TIM3_Initv+0x84>
		Error_Handler();
 8006890:	f000 f952 	bl	8006b38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006894:	2300      	movs	r3, #0
 8006896:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4808      	ldr	r0, [pc, #32]	; (80068c4 <_ZL12MX_TIM3_Initv+0xb4>)
 80068a2:	f7fd fdc3 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 80068a6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <_ZL12MX_TIM3_Initv+0xaa>
		Error_Handler();
 80068b6:	f000 f93f 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80068ba:	bf00      	nop
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2000017c 	.word	0x2000017c
 80068c8:	40000400 	.word	0x40000400

080068cc <_ZL13MX_UART4_Initv>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80068d0:	4b16      	ldr	r3, [pc, #88]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068d2:	4a17      	ldr	r2, [pc, #92]	; (8006930 <_ZL13MX_UART4_Initv+0x64>)
 80068d4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 57600;
 80068d6:	4b15      	ldr	r3, [pc, #84]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068d8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80068dc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80068f0:	4b0e      	ldr	r3, [pc, #56]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068f2:	220c      	movs	r2, #12
 80068f4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 8006904:	2200      	movs	r2, #0
 8006906:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 800690a:	2200      	movs	r2, #0
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800690e:	4807      	ldr	r0, [pc, #28]	; (800692c <_ZL13MX_UART4_Initv+0x60>)
 8006910:	f7fd fde8 	bl	80044e4 <HAL_UART_Init>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	bf14      	ite	ne
 800691a:	2301      	movne	r3, #1
 800691c:	2300      	moveq	r3, #0
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <_ZL13MX_UART4_Initv+0x5c>
		Error_Handler();
 8006924:	f000 f908 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8006928:	bf00      	nop
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200001bc 	.word	0x200001bc
 8006930:	40004c00 	.word	0x40004c00

08006934 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8006938:	4b16      	ldr	r3, [pc, #88]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <_ZL19MX_USART2_UART_Initv+0x64>)
 800693c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800693e:	4b15      	ldr	r3, [pc, #84]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006944:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006948:	2200      	movs	r2, #0
 800694a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 800694e:	2200      	movs	r2, #0
 8006950:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 800695a:	220c      	movs	r2, #12
 800695c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800695e:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006960:	2200      	movs	r2, #0
 8006962:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006966:	2200      	movs	r2, #0
 8006968:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 800696c:	2200      	movs	r2, #0
 800696e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006972:	2200      	movs	r2, #0
 8006974:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8006976:	4807      	ldr	r0, [pc, #28]	; (8006994 <_ZL19MX_USART2_UART_Initv+0x60>)
 8006978:	f7fd fdb4 	bl	80044e4 <HAL_UART_Init>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf14      	ite	ne
 8006982:	2301      	movne	r3, #1
 8006984:	2300      	moveq	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <_ZL19MX_USART2_UART_Initv+0x5c>
		Error_Handler();
 800698c:	f000 f8d4 	bl	8006b38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8006990:	bf00      	nop
 8006992:	bd80      	pop	{r7, pc}
 8006994:	2000023c 	.word	0x2000023c
 8006998:	40004400 	.word	0x40004400

0800699c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80069a2:	f107 0314 	add.w	r3, r7, #20
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	609a      	str	r2, [r3, #8]
 80069ae:	60da      	str	r2, [r3, #12]
 80069b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80069b2:	4b5c      	ldr	r3, [pc, #368]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b6:	4a5b      	ldr	r2, [pc, #364]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069be:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80069ca:	4b56      	ldr	r3, [pc, #344]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	4a55      	ldr	r2, [pc, #340]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069d6:	4b53      	ldr	r3, [pc, #332]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80069e2:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e6:	4a4f      	ldr	r2, [pc, #316]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069ee:	4b4d      	ldr	r3, [pc, #308]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 80069fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fe:	4a49      	ldr	r2, [pc, #292]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a06:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <_ZL12MX_GPIO_Initv+0x188>)
 8006a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RESET_COMM_RX_Pin | SS_COMM_RX_Pin, GPIO_PIN_SET);
 8006a12:	2201      	movs	r2, #1
 8006a14:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006a18:	4843      	ldr	r0, [pc, #268]	; (8006b28 <_ZL12MX_GPIO_Initv+0x18c>)
 8006a1a:	f7fb f931 	bl	8001c80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2140      	movs	r1, #64	; 0x40
 8006a22:	4842      	ldr	r0, [pc, #264]	; (8006b2c <_ZL12MX_GPIO_Initv+0x190>)
 8006a24:	f7fb f92c 	bl	8001c80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin, GPIO_PIN_SET);
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a2e:	483f      	ldr	r0, [pc, #252]	; (8006b2c <_ZL12MX_GPIO_Initv+0x190>)
 8006a30:	f7fb f926 	bl	8001c80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, GPIO_PIN_SET);
 8006a34:	2201      	movs	r2, #1
 8006a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a3e:	f7fb f91f 	bl	8001c80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DEPLOY_GPIO_Port, DEPLOY_Pin, GPIO_PIN_RESET);
 8006a42:	2200      	movs	r2, #0
 8006a44:	2104      	movs	r1, #4
 8006a46:	483a      	ldr	r0, [pc, #232]	; (8006b30 <_ZL12MX_GPIO_Initv+0x194>)
 8006a48:	f7fb f91a 	bl	8001c80 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RESET_COMM_RX_Pin SS_COMM_RX_Pin */
	GPIO_InitStruct.Pin = RESET_COMM_RX_Pin | SS_COMM_RX_Pin;
 8006a4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a52:	2301      	movs	r3, #1
 8006a54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	4619      	mov	r1, r3
 8006a64:	4830      	ldr	r0, [pc, #192]	; (8006b28 <_ZL12MX_GPIO_Initv+0x18c>)
 8006a66:	f7fa ff63 	bl	8001930 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO0_RX_Pin */
	GPIO_InitStruct.Pin = DIO0_RX_Pin;
 8006a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a70:	4b30      	ldr	r3, [pc, #192]	; (8006b34 <_ZL12MX_GPIO_Initv+0x198>)
 8006a72:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIO0_RX_GPIO_Port, &GPIO_InitStruct);
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	482a      	ldr	r0, [pc, #168]	; (8006b28 <_ZL12MX_GPIO_Initv+0x18c>)
 8006a80:	f7fa ff56 	bl	8001930 <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_LED_Pin RESET_COMM_TX_Pin */
	GPIO_InitStruct.Pin = TEST_LED_Pin | RESET_COMM_TX_Pin;
 8006a84:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006a88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a92:	2300      	movs	r3, #0
 8006a94:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a96:	f107 0314 	add.w	r3, r7, #20
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4823      	ldr	r0, [pc, #140]	; (8006b2c <_ZL12MX_GPIO_Initv+0x190>)
 8006a9e:	f7fa ff47 	bl	8001930 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_COMM_TX_Pin */
	GPIO_InitStruct.Pin = SS_COMM_TX_Pin;
 8006aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SS_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 8006ab4:	f107 0314 	add.w	r3, r7, #20
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006abe:	f7fa ff37 	bl	8001930 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO0_COMM_TX_Pin */
	GPIO_InitStruct.Pin = DIO0_COMM_TX_Pin;
 8006ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ac8:	4b1a      	ldr	r3, [pc, #104]	; (8006b34 <_ZL12MX_GPIO_Initv+0x198>)
 8006aca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIO0_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 8006ad0:	f107 0314 	add.w	r3, r7, #20
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ada:	f7fa ff29 	bl	8001930 <HAL_GPIO_Init>

	/*Configure GPIO pin : DEPLOY_Pin */
	GPIO_InitStruct.Pin = DEPLOY_Pin;
 8006ade:	2304      	movs	r3, #4
 8006ae0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DEPLOY_GPIO_Port, &GPIO_InitStruct);
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	4619      	mov	r1, r3
 8006af4:	480e      	ldr	r0, [pc, #56]	; (8006b30 <_ZL12MX_GPIO_Initv+0x194>)
 8006af6:	f7fa ff1b 	bl	8001930 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	2017      	movs	r0, #23
 8006b00:	f7fa fe55 	bl	80017ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006b04:	2017      	movs	r0, #23
 8006b06:	f7fa fe6e 	bl	80017e6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2028      	movs	r0, #40	; 0x28
 8006b10:	f7fa fe4d 	bl	80017ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006b14:	2028      	movs	r0, #40	; 0x28
 8006b16:	f7fa fe66 	bl	80017e6 <HAL_NVIC_EnableIRQ>

}
 8006b1a:	bf00      	nop
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	48000400 	.word	0x48000400
 8006b2c:	48000800 	.word	0x48000800
 8006b30:	48000c00 	.word	0x48000c00
 8006b34:	10110000 	.word	0x10110000

08006b38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006b3c:	bf00      	nop
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE()
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <HAL_MspInit+0x44>)
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	4a0e      	ldr	r2, [pc, #56]	; (8006b8c <HAL_MspInit+0x44>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6613      	str	r3, [r2, #96]	; 0x60
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <HAL_MspInit+0x44>)
 8006b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_PWR_CLK_ENABLE()
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <HAL_MspInit+0x44>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <HAL_MspInit+0x44>)
 8006b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6593      	str	r3, [r2, #88]	; 0x58
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_MspInit+0x44>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000

08006b90 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006b98:	f107 0314 	add.w	r3, r7, #20
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <HAL_ADC_MspInit+0x74>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d124      	bne.n	8006bfc <HAL_ADC_MspInit+0x6c>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC_CLK_ENABLE()
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	693b      	ldr	r3, [r7, #16]
		;

		__HAL_RCC_GPIOA_CLK_ENABLE()
 8006bca:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	4a0e      	ldr	r2, [pc, #56]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bd0:	f043 0301 	orr.w	r3, r3, #1
 8006bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <HAL_ADC_MspInit+0x78>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
		;
		/**ADC1 GPIO Configuration    
		 PA4     ------> ADC1_IN9 
		 */
		GPIO_InitStruct.Pin = THERM_Pin;
 8006be2:	2310      	movs	r3, #16
 8006be4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006be6:	230b      	movs	r3, #11
 8006be8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(THERM_GPIO_Port, &GPIO_InitStruct);
 8006bee:	f107 0314 	add.w	r3, r7, #20
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bf8:	f7fa fe9a 	bl	8001930 <HAL_GPIO_Init>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8006bfc:	bf00      	nop
 8006bfe:	3728      	adds	r7, #40	; 0x28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	50040000 	.word	0x50040000
 8006c08:	40021000 	.word	0x40021000

08006c0c <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	611a      	str	r2, [r3, #16]
	if (hcan->Instance == CAN1) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_CAN_MspInit+0x80>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d129      	bne.n	8006c82 <HAL_CAN_MspInit+0x76>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE()
 8006c2e:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c38:	6593      	str	r3, [r2, #88]	; 0x58
 8006c3a:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
		;

		__HAL_RCC_GPIOA_CLK_ENABLE()
 8006c46:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <HAL_CAN_MspInit+0x84>)
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
		;
		/**CAN1 GPIO Configuration    
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX 
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8006c5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c62:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c64:	2302      	movs	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006c70:	2309      	movs	r3, #9
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c7e:	f7fa fe57 	bl	8001930 <HAL_GPIO_Init>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 8006c82:	bf00      	nop
 8006c84:	3728      	adds	r7, #40	; 0x28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40006400 	.word	0x40006400
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006c9c:	f107 0314 	add.w	r3, r7, #20
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI2) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a25      	ldr	r2, [pc, #148]	; (8006d48 <HAL_SPI_MspInit+0xb4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d144      	bne.n	8006d40 <HAL_SPI_MspInit+0xac>
		/* USER CODE BEGIN SPI2_MspInit 0 */

		/* USER CODE END SPI2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE()
 8006cb6:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]
		;

		__HAL_RCC_GPIOC_CLK_ENABLE()
 8006cce:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cd4:	f043 0304 	orr.w	r3, r3, #4
 8006cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
		;
		__HAL_RCC_GPIOB_CLK_ENABLE()
 8006ce6:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cec:	f043 0302 	orr.w	r3, r3, #2
 8006cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cf2:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <HAL_SPI_MspInit+0xb8>)
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
		/**SPI2 GPIO Configuration    
		 PC2     ------> SPI2_MISO
		 PC3     ------> SPI2_MOSI
		 PB10     ------> SPI2_SCK 
		 */
		GPIO_InitStruct.Pin = MISO_COMM_Pin | MOSI_COMM_Pin;
 8006cfe:	230c      	movs	r3, #12
 8006d00:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d02:	2302      	movs	r3, #2
 8006d04:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d0e:	2305      	movs	r3, #5
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d12:	f107 0314 	add.w	r3, r7, #20
 8006d16:	4619      	mov	r1, r3
 8006d18:	480d      	ldr	r0, [pc, #52]	; (8006d50 <HAL_SPI_MspInit+0xbc>)
 8006d1a:	f7fa fe09 	bl	8001930 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = SCK_COMM_Pin;
 8006d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d22:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d24:	2302      	movs	r3, #2
 8006d26:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d30:	2305      	movs	r3, #5
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SCK_COMM_GPIO_Port, &GPIO_InitStruct);
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4806      	ldr	r0, [pc, #24]	; (8006d54 <HAL_SPI_MspInit+0xc0>)
 8006d3c:	f7fa fdf8 	bl	8001930 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 8006d40:	bf00      	nop
 8006d42:	3728      	adds	r7, #40	; 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40003800 	.word	0x40003800
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	48000800 	.word	0x48000800
 8006d54:	48000400 	.word	0x48000400

08006d58 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM3) {
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <HAL_TIM_Base_MspInit+0x38>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d10b      	bne.n	8006d82 <HAL_TIM_Base_MspInit+0x2a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE()
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <HAL_TIM_Base_MspInit+0x3c>)
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <HAL_TIM_Base_MspInit+0x3c>)
 8006d70:	f043 0302 	orr.w	r3, r3, #2
 8006d74:	6593      	str	r3, [r2, #88]	; 0x58
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_TIM_Base_MspInit+0x3c>)
 8006d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}

}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40021000 	.word	0x40021000

08006d98 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08c      	sub	sp, #48	; 0x30
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006da0:	f107 031c 	add.w	r3, r7, #28
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	609a      	str	r2, [r3, #8]
 8006dac:	60da      	str	r2, [r3, #12]
 8006dae:	611a      	str	r2, [r3, #16]
	if (huart->Instance == UART4) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a33      	ldr	r2, [pc, #204]	; (8006e84 <HAL_UART_MspInit+0xec>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d131      	bne.n	8006e1e <HAL_UART_MspInit+0x86>
		/* USER CODE BEGIN UART4_MspInit 0 */

		/* USER CODE END UART4_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_UART4_CLK_ENABLE()
 8006dba:	4b33      	ldr	r3, [pc, #204]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	4a32      	ldr	r2, [pc, #200]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc6:	4b30      	ldr	r3, [pc, #192]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	69bb      	ldr	r3, [r7, #24]
		;

		__HAL_RCC_GPIOA_CLK_ENABLE()
 8006dd2:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd6:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006dd8:	f043 0301 	orr.w	r3, r3, #1
 8006ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]
		;
		/**UART4 GPIO Configuration    
		 PA0     ------> UART4_TX
		 PA1     ------> UART4_RX 
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8006dea:	2303      	movs	r3, #3
 8006dec:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dee:	2302      	movs	r3, #2
 8006df0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df6:	2303      	movs	r3, #3
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dfe:	f107 031c 	add.w	r3, r7, #28
 8006e02:	4619      	mov	r1, r3
 8006e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e08:	f7fa fd92 	bl	8001930 <HAL_GPIO_Init>

		/* UART4 interrupt Init */
		HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2100      	movs	r1, #0
 8006e10:	2034      	movs	r0, #52	; 0x34
 8006e12:	f7fa fccc 	bl	80017ae <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006e16:	2034      	movs	r0, #52	; 0x34
 8006e18:	f7fa fce5 	bl	80017e6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8006e1c:	e02d      	b.n	8006e7a <HAL_UART_MspInit+0xe2>
	} else if (huart->Instance == USART2) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <HAL_UART_MspInit+0xf4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d128      	bne.n	8006e7a <HAL_UART_MspInit+0xe2>
		__HAL_RCC_USART2_CLK_ENABLE()
 8006e28:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e32:	6593      	str	r3, [r2, #88]	; 0x58
 8006e34:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE()
 8006e40:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	4a10      	ldr	r2, [pc, #64]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <HAL_UART_MspInit+0xf0>)
 8006e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8006e58:	230c      	movs	r3, #12
 8006e5a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e64:	2303      	movs	r3, #3
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e68:	2307      	movs	r3, #7
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	4619      	mov	r1, r3
 8006e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e76:	f7fa fd5b 	bl	8001930 <HAL_GPIO_Init>
}
 8006e7a:	bf00      	nop
 8006e7c:	3730      	adds	r7, #48	; 0x30
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40004c00 	.word	0x40004c00
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40004400 	.word	0x40004400

08006e90 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8006ea2:	e7fe      	b.n	8006ea2 <HardFault_Handler+0x4>

08006ea4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8006ea8:	e7fe      	b.n	8006ea8 <MemManage_Handler+0x4>

08006eaa <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8006eaa:	b480      	push	{r7}
 8006eac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8006eae:	e7fe      	b.n	8006eae <BusFault_Handler+0x4>

08006eb0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8006eb4:	e7fe      	b.n	8006eb4 <UsageFault_Handler+0x4>

08006eb6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8006eba:	bf00      	nop
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8006ed2:	b480      	push	{r7}
 8006ed4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8006ee4:	f7f9 fb42 	bl	800056c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8006ee8:	bf00      	nop
 8006eea:	bd80      	pop	{r7, pc}

08006eec <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006ef0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006ef4:	f7fa fef6 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}

08006efc <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8006f00:	2140      	movs	r1, #64	; 0x40
 8006f02:	480c      	ldr	r0, [pc, #48]	; (8006f34 <EXTI15_10_IRQHandler+0x38>)
 8006f04:	f7fa fed4 	bl	8001cb0 <HAL_GPIO_TogglePin>
	RFM96_read_packet(rfmRX, buffer, sizeof(buffer));
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <EXTI15_10_IRQHandler+0x3c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	22ff      	movs	r2, #255	; 0xff
 8006f0e:	490b      	ldr	r1, [pc, #44]	; (8006f3c <EXTI15_10_IRQHandler+0x40>)
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f8f7 	bl	8006104 <RFM96_read_packet>
	HAL_UART_Transmit(&huart4, buffer, sizeof(buffer), 40);
 8006f16:	2328      	movs	r3, #40	; 0x28
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	4908      	ldr	r1, [pc, #32]	; (8006f3c <EXTI15_10_IRQHandler+0x40>)
 8006f1c:	4808      	ldr	r0, [pc, #32]	; (8006f40 <EXTI15_10_IRQHandler+0x44>)
 8006f1e:	f7fd fb2f 	bl	8004580 <HAL_UART_Transmit>
	HAL_UART_Abort(&huart4);
 8006f22:	4807      	ldr	r0, [pc, #28]	; (8006f40 <EXTI15_10_IRQHandler+0x44>)
 8006f24:	f7fd fbbf 	bl	80046a6 <HAL_UART_Abort>
	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006f28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006f2c:	f7fa feda 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f30:	bf00      	nop
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	48000800 	.word	0x48000800
 8006f38:	200002c0 	.word	0x200002c0
 8006f3c:	200002c4 	.word	0x200002c4
 8006f40:	200001bc 	.word	0x200001bc

08006f44 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8006f48:	4802      	ldr	r0, [pc, #8]	; (8006f54 <UART4_IRQHandler+0x10>)
 8006f4a:	f7fd fc3d 	bl	80047c8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200001bc 	.word	0x200001bc

08006f58 <_sbrk>:

/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
 **/
caddr_t _sbrk(int incr) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <_sbrk+0x50>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <_sbrk+0x16>
		heap_end = &end;
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <_sbrk+0x50>)
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <_sbrk+0x54>)
 8006f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <_sbrk+0x50>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr) {
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <_sbrk+0x50>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	466a      	mov	r2, sp
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d907      	bls.n	8006f92 <_sbrk+0x3a>
		errno = ENOMEM;
 8006f82:	f000 f8f5 	bl	8007170 <__errno>
 8006f86:	4602      	mov	r2, r0
 8006f88:	230c      	movs	r3, #12
 8006f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e006      	b.n	8006fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <_sbrk+0x50>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	4a03      	ldr	r2, [pc, #12]	; (8006fa8 <_sbrk+0x50>)
 8006f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200003c4 	.word	0x200003c4
 8006fac:	200003d8 	.word	0x200003d8

08006fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fb4:	4b17      	ldr	r3, [pc, #92]	; (8007014 <SystemInit+0x64>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <SystemInit+0x64>)
 8006fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <SystemInit+0x68>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <SystemInit+0x68>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <SystemInit+0x68>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <SystemInit+0x68>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <SystemInit+0x68>)
 8006fdc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006fe0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <SystemInit+0x68>)
 8006fe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <SystemInit+0x68>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a09      	ldr	r2, [pc, #36]	; (8007018 <SystemInit+0x68>)
 8006ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ff8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <SystemInit+0x68>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <SystemInit+0x64>)
 8007002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007006:	609a      	str	r2, [r3, #8]
#endif
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000ed00 	.word	0xe000ed00
 8007018:	40021000 	.word	0x40021000

0800701c <SPI_read_register>:

#include "zSPI.h"

HAL_StatusTypeDef SPI_read_register(SPI_HandleTypeDef spi_bus,
		GPIO_TypeDef* ss_gpio_port, uint16_t ss_pin, uint8_t reg_addr,
		uint8_t* pvalue, uint32_t timeout) {
 800701c:	b084      	sub	sp, #16
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	f107 0c10 	add.w	ip, r7, #16
 8007028:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status = HAL_OK;// status of the execution (checks if any error occurs)	
 800702c:	2300      	movs	r3, #0
 800702e:	71fb      	strb	r3, [r7, #7]
	reg_addr = reg_addr & 0x7f;
 8007030:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8007034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

	/* Changes SS pin to enable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_RESET);
 800703e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007042:	2200      	movs	r2, #0
 8007044:	4619      	mov	r1, r3
 8007046:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007048:	f7fa fe1a 	bl	8001c80 <HAL_GPIO_WritePin>

	/* Writes Register Address in SPI */
	status = HAL_SPI_Transmit(&spi_bus, &reg_addr, 1, timeout);
 800704c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8007050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007054:	2201      	movs	r2, #1
 8007056:	f107 0010 	add.w	r0, r7, #16
 800705a:	f7fc f9b9 	bl	80033d0 <HAL_SPI_Transmit>
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <SPI_read_register+0x50>
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	e017      	b.n	800709c <SPI_read_register+0x80>

	/* Reads Register Value from SPI */
	status = HAL_SPI_Receive(&spi_bus, pvalue, 1, timeout);
 800706c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007070:	2201      	movs	r2, #1
 8007072:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007076:	f107 0010 	add.w	r0, r7, #16
 800707a:	f7fc fb0f 	bl	800369c <HAL_SPI_Receive>
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <SPI_read_register+0x70>
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	e007      	b.n	800709c <SPI_read_register+0x80>

	/* Changes SS pin to disable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_SET);
 800708c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007090:	2201      	movs	r2, #1
 8007092:	4619      	mov	r1, r3
 8007094:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007096:	f7fa fdf3 	bl	8001c80 <HAL_GPIO_WritePin>
	return status;
 800709a:	79fb      	ldrb	r3, [r7, #7]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070a6:	b004      	add	sp, #16
 80070a8:	4770      	bx	lr

080070aa <SPI_write_register>:
	return status;
}

HAL_StatusTypeDef SPI_write_register(SPI_HandleTypeDef spi_bus,
		GPIO_TypeDef* ss_gpio_port, uint16_t ss_pin, uint8_t reg_addr,
		uint8_t value, uint32_t timeout) {
 80070aa:	b084      	sub	sp, #16
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	f107 0c10 	add.w	ip, r7, #16
 80070b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	71fb      	strb	r3, [r7, #7]
	uint8_t sended_data[2];
	sended_data[0] = reg_addr | 0x80;
 80070be:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80070c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	713b      	strb	r3, [r7, #4]
	sended_data[1] = value;
 80070ca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80070ce:	717b      	strb	r3, [r7, #5]

	/* Changes SS pin to enable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_RESET);
 80070d0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80070d4:	2200      	movs	r2, #0
 80070d6:	4619      	mov	r1, r3
 80070d8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80070da:	f7fa fdd1 	bl	8001c80 <HAL_GPIO_WritePin>

	/* Writes in Register via SPI */
	status = HAL_SPI_Transmit(&spi_bus, sended_data, 2, timeout);
 80070de:	1d39      	adds	r1, r7, #4
 80070e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070e4:	2202      	movs	r2, #2
 80070e6:	f107 0010 	add.w	r0, r7, #16
 80070ea:	f7fc f971 	bl	80033d0 <HAL_SPI_Transmit>
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <SPI_write_register+0x52>
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	e007      	b.n	800710c <SPI_write_register+0x62>

	/* Changes SS pin to disable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_SET);
 80070fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007100:	2201      	movs	r2, #1
 8007102:	4619      	mov	r1, r3
 8007104:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007106:	f7fa fdbb 	bl	8001c80 <HAL_GPIO_WritePin>
	return status;
 800710a:	79fb      	ldrb	r3, [r7, #7]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007116:	b004      	add	sp, #16
 8007118:	4770      	bx	lr
	...

0800711c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800711c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007154 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007122:	e003      	b.n	800712c <LoopCopyDataInit>

08007124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800712a:	3104      	adds	r1, #4

0800712c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800712c:	480b      	ldr	r0, [pc, #44]	; (800715c <LoopForever+0xa>)
	ldr	r3, =_edata
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007134:	d3f6      	bcc.n	8007124 <CopyDataInit>
	ldr	r2, =_sbss
 8007136:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007138:	e002      	b.n	8007140 <LoopFillZerobss>

0800713a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800713a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800713c:	f842 3b04 	str.w	r3, [r2], #4

08007140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <LoopForever+0x16>)
	cmp	r2, r3
 8007142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007144:	d3f9      	bcc.n	800713a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007146:	f7ff ff33 	bl	8006fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800714a:	f000 f817 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800714e:	f7ff f8f3 	bl	8006338 <main>

08007152 <LoopForever>:

LoopForever:
    b LoopForever
 8007152:	e7fe      	b.n	8007152 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007154:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007158:	08007344 	.word	0x08007344
	ldr	r0, =_sdata
 800715c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007160:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8007164:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8007168:	200003d8 	.word	0x200003d8

0800716c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800716c:	e7fe      	b.n	800716c <ADC1_2_IRQHandler>
	...

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	; (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000000c 	.word	0x2000000c

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4e0d      	ldr	r6, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1ba4      	subs	r4, r4, r6
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2500      	movs	r5, #0
 8007188:	42a5      	cmp	r5, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4e0b      	ldr	r6, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f000 f8a0 	bl	80072d4 <_init>
 8007194:	1ba4      	subs	r4, r4, r6
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2500      	movs	r5, #0
 800719a:	42a5      	cmp	r5, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071a4:	4798      	blx	r3
 80071a6:	3501      	adds	r5, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071ae:	4798      	blx	r3
 80071b0:	3501      	adds	r5, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	0800733c 	.word	0x0800733c
 80071b8:	0800733c 	.word	0x0800733c
 80071bc:	0800733c 	.word	0x0800733c
 80071c0:	08007340 	.word	0x08007340

080071c4 <malloc>:
 80071c4:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <malloc+0xc>)
 80071c6:	4601      	mov	r1, r0
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f000 b817 	b.w	80071fc <_malloc_r>
 80071ce:	bf00      	nop
 80071d0:	2000000c 	.word	0x2000000c

080071d4 <memcpy>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	1e43      	subs	r3, r0, #1
 80071d8:	440a      	add	r2, r1
 80071da:	4291      	cmp	r1, r2
 80071dc:	d100      	bne.n	80071e0 <memcpy+0xc>
 80071de:	bd10      	pop	{r4, pc}
 80071e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e8:	e7f7      	b.n	80071da <memcpy+0x6>

080071ea <memset>:
 80071ea:	4402      	add	r2, r0
 80071ec:	4603      	mov	r3, r0
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d100      	bne.n	80071f4 <memset+0xa>
 80071f2:	4770      	bx	lr
 80071f4:	f803 1b01 	strb.w	r1, [r3], #1
 80071f8:	e7f9      	b.n	80071ee <memset+0x4>
	...

080071fc <_malloc_r>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	1ccd      	adds	r5, r1, #3
 8007200:	f025 0503 	bic.w	r5, r5, #3
 8007204:	3508      	adds	r5, #8
 8007206:	2d0c      	cmp	r5, #12
 8007208:	bf38      	it	cc
 800720a:	250c      	movcc	r5, #12
 800720c:	2d00      	cmp	r5, #0
 800720e:	4606      	mov	r6, r0
 8007210:	db01      	blt.n	8007216 <_malloc_r+0x1a>
 8007212:	42a9      	cmp	r1, r5
 8007214:	d903      	bls.n	800721e <_malloc_r+0x22>
 8007216:	230c      	movs	r3, #12
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	2000      	movs	r0, #0
 800721c:	bd70      	pop	{r4, r5, r6, pc}
 800721e:	f000 f857 	bl	80072d0 <__malloc_lock>
 8007222:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <_malloc_r+0xac>)
 8007224:	6814      	ldr	r4, [r2, #0]
 8007226:	4621      	mov	r1, r4
 8007228:	b991      	cbnz	r1, 8007250 <_malloc_r+0x54>
 800722a:	4c20      	ldr	r4, [pc, #128]	; (80072ac <_malloc_r+0xb0>)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	b91b      	cbnz	r3, 8007238 <_malloc_r+0x3c>
 8007230:	4630      	mov	r0, r6
 8007232:	f000 f83d 	bl	80072b0 <_sbrk_r>
 8007236:	6020      	str	r0, [r4, #0]
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f000 f838 	bl	80072b0 <_sbrk_r>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d124      	bne.n	800728e <_malloc_r+0x92>
 8007244:	230c      	movs	r3, #12
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f842 	bl	80072d2 <__malloc_unlock>
 800724e:	e7e4      	b.n	800721a <_malloc_r+0x1e>
 8007250:	680b      	ldr	r3, [r1, #0]
 8007252:	1b5b      	subs	r3, r3, r5
 8007254:	d418      	bmi.n	8007288 <_malloc_r+0x8c>
 8007256:	2b0b      	cmp	r3, #11
 8007258:	d90f      	bls.n	800727a <_malloc_r+0x7e>
 800725a:	600b      	str	r3, [r1, #0]
 800725c:	50cd      	str	r5, [r1, r3]
 800725e:	18cc      	adds	r4, r1, r3
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f836 	bl	80072d2 <__malloc_unlock>
 8007266:	f104 000b 	add.w	r0, r4, #11
 800726a:	1d23      	adds	r3, r4, #4
 800726c:	f020 0007 	bic.w	r0, r0, #7
 8007270:	1ac3      	subs	r3, r0, r3
 8007272:	d0d3      	beq.n	800721c <_malloc_r+0x20>
 8007274:	425a      	negs	r2, r3
 8007276:	50e2      	str	r2, [r4, r3]
 8007278:	e7d0      	b.n	800721c <_malloc_r+0x20>
 800727a:	428c      	cmp	r4, r1
 800727c:	684b      	ldr	r3, [r1, #4]
 800727e:	bf16      	itet	ne
 8007280:	6063      	strne	r3, [r4, #4]
 8007282:	6013      	streq	r3, [r2, #0]
 8007284:	460c      	movne	r4, r1
 8007286:	e7eb      	b.n	8007260 <_malloc_r+0x64>
 8007288:	460c      	mov	r4, r1
 800728a:	6849      	ldr	r1, [r1, #4]
 800728c:	e7cc      	b.n	8007228 <_malloc_r+0x2c>
 800728e:	1cc4      	adds	r4, r0, #3
 8007290:	f024 0403 	bic.w	r4, r4, #3
 8007294:	42a0      	cmp	r0, r4
 8007296:	d005      	beq.n	80072a4 <_malloc_r+0xa8>
 8007298:	1a21      	subs	r1, r4, r0
 800729a:	4630      	mov	r0, r6
 800729c:	f000 f808 	bl	80072b0 <_sbrk_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d0cf      	beq.n	8007244 <_malloc_r+0x48>
 80072a4:	6025      	str	r5, [r4, #0]
 80072a6:	e7db      	b.n	8007260 <_malloc_r+0x64>
 80072a8:	200003c8 	.word	0x200003c8
 80072ac:	200003cc 	.word	0x200003cc

080072b0 <_sbrk_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4c06      	ldr	r4, [pc, #24]	; (80072cc <_sbrk_r+0x1c>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	4605      	mov	r5, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	f7ff fe4c 	bl	8006f58 <_sbrk>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_sbrk_r+0x1a>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_sbrk_r+0x1a>
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	200003d4 	.word	0x200003d4

080072d0 <__malloc_lock>:
 80072d0:	4770      	bx	lr

080072d2 <__malloc_unlock>:
 80072d2:	4770      	bx	lr

080072d4 <_init>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr

080072e0 <_fini>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr
